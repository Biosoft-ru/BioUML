pluginName = JavaScript
providerName = Institute of Systems Biology

defineClass.descr = Load a Java class that defines a JavaScript object using the\
\nconventions outlined in ScriptableObject.defineClass.
defineClass.arg_1 = Java class that is used to define the JavaScript objects 
\nand properties.

help.descr = Returns description for the specified JavaScript function or host object.\
\nThis description should be loaded using 'biouml.pligins.javascript.function' or \
\n'biouml.pligins.javascript.hostObject' extension point. Use 'functions' and 'objects' \
\n parameters to show list of available functions and objects.
help.arg_1 = JavaScript object of function name. 
help.ex_1c = help()
help.ex_1d = will print description of 'help' function itself.
help.ex_2c = help(print)
help.ex_2d = will print description of 'print' function.
help.ex_3c = help("functions")
help.ex_3d = will print list of available functions.
help.ex_4c = help("objects")
help.ex_4d = will print list of available objects.

load.descr = Load JavaScript source files named by string arguments. \
\nIf multiple arguments are given, each file is read in and executed in turn.
load.arg_1 = name of JavaScript source file.
load.ex_1c = load('a.js', 'b.js'); 
load.ex_1d = will load and execute 'a.js' and 'b.js' JavaScript files.

quit.descr = Quit the shell. This only affects the interactive mode.

print.descr = Evaluate and print expressions. \
\nEvaluates each expression, converts the result to a string, and prints it.
print.arg_1 = value to be printed.    
print.ex_1c = print('a', 'b', 7+5);
print.ex_1d = will print: a b 12

version.descr = Get or set JavaScript version number. \
\n If no argument is supplied, the current version number is returned. 
version.arg_1 = If an argument is supplied, it is expected to be one of \
\n100, 110, 120, 130, or 140 to indicate JavaScript version \
\n1.0, 1.1, 1.2, 1.3, or 1.4 respectively.

plot.descr = Create and show plot.
plot.arg_1 = TableDataCollection
plot.arg_2 = name of column with X values
plot.arg_3 = name of column with Y values
plot.arg_4 = X values
plot.arg_5 = Y values
plot.arg_6 = X title
plot.arg_7 = Y title
plot.arg_8 = X values
plot.arg_9 = Y object (name, type, values)
plot.ex_1c = plot(t, "column1", "column2");
plot.ex_1d = will create simple graphic from table
plot.ex_2c = plot([1,2,3,4,5],[1,1.5,3,1,5],[5,2.5,1,5,2]);
plot.ex_2d = will create simple graphic from arrays
plot.ex_3c = plot('x','y',[1,2,3],{name:'line',type:'line',values:[3,2,0.5]},{name:'points',type:'experiment',values:{x:[1.5,2],y:[2,2.5]}});
plot.ex_3d = will create titled graph with different type lines

createPlot.descr = Create plot.
createPlot.ex_1c = createPlot(t, "column1", "column2");
createPlot.ex_2c = createPlot([1,2,3,4,5],[1,1.5,3,1,5],[5,2.5,1,5,2]);
createPlot.ex_3c = createPlot('x','y',[1,2,3],{name:'line',type:'line',values:[3,2,0.5]},{name:'points',type:'experiment',values:{x:[1.5,2],y:[2,2.5]}});

boxAndWhisker.descr = Create and show box and whisker chart
boxAndWhisker.arg_1 = column names
boxAndWhisker.arg_2 = values for column
boxAndWhisker.arg_3 = TableDataCollection
boxAndWhisker.arg_4 = name of column with values
boxAndWhisker.ex_1c = boxPlot(["c1","c2","c3"],[1,2,3],[1,1.5,3],[5,2.5,2]);
boxAndWhisker.ex_1d = will create simple box and whisker chart from arrays
boxAndWhisker.ex_2c = boxPlot(t,"v1","v2","v3");
boxAndWhisker.ex_2d = will create simple box and whisker chart from table

view.descr = Show table in new window
view.arg_1 = TableDataCollection

packages = bdk

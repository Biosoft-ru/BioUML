package biouml.model;

import ru.biosoft.graphics.CompositeView;
import ru.biosoft.graphics.View;

import com.developmentontheedge.beans.Option;

/**
 * Utility class that provides support for basic diagram filter operations.
 *
 * Subclasses should define {@link #processNode} method that should highlight
 * or hide node view depending on filter settings.
 */
public abstract class AbstractFilter extends Option implements DiagramFilter
{
    private boolean enabled = false;
    @Override
    public boolean isEnabled()
    {
        return enabled;
    }

    public void setEnabled(boolean enabled)
    {
        boolean oldValue = this.enabled;
        this.enabled = enabled;
        firePropertyChange("enabled", oldValue, enabled);
    }

    //set loading=true to avoid heavy operations during filter creation
    //is used now for ExpressionFilter in case properties are restored from saved
    protected boolean loading = false;
    @Override
    public void setLoading(boolean loading)
    {
        this.loading = loading;
    }

    @Override
    public String getName()
    {
        return null;
    }

    @Override
    public Object getProperties()
    {
        return null;
    }

    /**
     * Hides or highlights diagram elements according to filter settings.
     * Prerequisite: diagram view should be generated by DiagramViewBuilder.
     */
    @Override
    public void apply(Compartment diagram)
    {
        if( !isEnabled() )
            return;

        for(DiagramElement de: diagram)
        {
            if( de instanceof Compartment && ! ( de instanceof EquivalentNodeGroup ) )
                apply((Compartment)de);
            else if( de instanceof Node )
                processNode((Node)de);
        }
    }

    /**
     * Restores original diagram view.
     * For this purpose it makes visible all views and removes nodes background view
     * that is used for highlighting.
     */
    @Override
    public void restoreView(Compartment diagram)
    {
        diagram.recursiveStream().forEach( this::restoreView );
    }

    /** Should high or highlight node depending on filter settings. */
    protected abstract void processNode(Node node);

    protected void restoreView(DiagramElement de)
    {
        CompositeView view = (CompositeView)de.getView();

        // restore view if we hide it
        de.getView().setVisible(true);

        // check and remove highlighter
        View highlighter = view.elementAt(0);
        if( highlighter.getModel() instanceof DiagramFilter )
            view.remove(highlighter);
    }

    /**
     * Default realization of setDiagram method
     */
    @Override
    public void setDiagram(Diagram diagram)
    {
    }

    /**
     * Default realization of clone method
     */
    @Override
    public DiagramFilter clone()
    {
        try
        {
            return (DiagramFilter)super.clone();
        }
        catch( CloneNotSupportedException e )
        {
            throw new InternalError();
        }
    }
}

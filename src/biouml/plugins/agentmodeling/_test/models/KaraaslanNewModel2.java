package biouml.plugins.agentmodeling._test.models;

/*
 * This code is generated by BioUML FrameWork
 * for Karaslaan sod intake diagram  at 2008.03.20 12:44:54
 */
import biouml.plugins.simulation.ae.NewtonSolver;
import biouml.plugins.simulation.java.JavaBaseModel;

public class KaraaslanNewModel2 extends JavaBaseModel
{

    /*
     * Write rules to calculate equation parameters
     */
    private void __internalVarInitFunc_0(double time, double[] x)
    {
        psi_al = 0.17 + 0.94 / ( 1 + Math.exp( ( 0.48 - 1.2 * Math.log(C_al) / Math.log(10) ) / 0.88) );
        eta_dt_sodreab = n_eps_dt * psi_al;
        Fi_dt_sodreab = Fi_md_sod * eta_dt_sodreab;
        C_at = 20 * x[0];
        alpha_map = 0.5 + 1.1 / ( 1 + Math.exp( ( P_ma - 100 ) / 15) );
        P_ra = 0.2787 * Math.exp(Fi_co * 0.2281);
        alpha_rap = 1 - 0.0080 * ( P_ra );
        rsna = N_rsna * alpha_map * alpha_rap;
        beta_rsna = 1.5 * ( rsna - 1 ) + 1;
        R_ea = 51.66 * ( 0.9432 + 0.1363 / ( 0.2069 + Math.exp(3.108 - 1.785 * Math.log10(C_at)) ) );
        sigma_tgf = 0.3408 + 3.449 / ( 3.88 + Math.exp( ( Fi_md_sod - 3.859 ) / ( -0.9617 )) );
        R_aa = 31.67 * beta_rsna * sigma_tgf;
        Fi_sodin = 0.126;
        Fi_dt_sod = Fi_md_sod - Fi_dt_sodreab;
        C_anp = 7.427 - 6.554 / ( 1 + Math.exp(P_ra - 3.762) );
        lambda_anp = -0.1 * C_anp + 1.1199;
        lambda_dt = 0.82 + 0.39 / ( 1 + Math.exp(1 + ( Fi_dt_sod - 1.6 ) / 2) );
        eta_cd_sodreab = n_eta_cd * lambda_dt * lambda_anp;
        Fi_cd_sodreab = Fi_dt_sod * eta_cd_sodreab;
        Fi_u_sod = Fi_dt_sod - Fi_cd_sodreab;
        gamma_at = 0.95 + 0.12 / ( 1 + Math.exp(2.6 - 1.8 * Math.log(C_at) / Math.log(10)) );
        Fi_rb = P_ma / R_r;
        P_gh = P_ma - Fi_rb * R_aa;
        P_f = P_gh - P_B - P_go;
        Fi_gfilt = P_f * C_gcf;
        C_sod = x[1] / x[4];
        Fi_filsod = Fi_gfilt * C_sod;
        gamma_filsod = ( 0.8 + 0.3 / ( 1 + Math.exp(1 + Fi_filsod - 14) / 138 ) ) / 0.882;
        gamma_rsna = ( 0.5 + 0.7 / ( 1 + Math.exp( ( 1 - rsna ) / 2.18) ) ) / 0.853;
        eta_pt_sodreab = n_eta_pt * gamma_filsod * gamma_at * gamma_rsna;
        Fi_pt_sodreab = Fi_gfilt * C_sod * eta_pt_sodreab;
        C_adh = 4 * x[2];
        delta_ra = 0.2 * P_ra - 7.0E-4 * x[7];
        N_adhs = ( C_sod - 140 + eps_aum - delta_ra ) / 3;
        mu_adh = 0.37 + 0.8 / ( 1 + Math.exp(0.6 - 3.7 * Math.log10(C_adh)) );
        mu_al = 0.17 + 0.94 / ( 1 + Math.exp( ( 0.48 - 1.2 * Math.log10(C_al) ) / 0.88) );
        Fi_t_wreab = 0.025 - 0.001 / ( mu_al * mu_adh ) + 0.8 * Fi_gfilt;
        Fi_u = Fi_gfilt - Fi_t_wreab;
        Fi_win = 0.0081 / ( 1 + 1.822 * Math.pow(C_adh, ( -1.607 )) ) - 0.0053;
        R_ba = K_bar / x[6];
        R_a = R_ba * eps_aum;
        R_vr = ( 8 * R_bv + R_a ) / 31;
        V_b = 4.5602271 + 2.4312171 / ( 1 + Math.exp( - ( x[4] - 18.112781 ) * 0.4737) );
        P_mf = ( 7.436 * V_b - 30.18 ) * eps_aum;
        alpha_auto = 3.079 * Math.exp( -P_ma * 0.011);
        alpha_chemo = 0.25 * alpha_auto;
        vas_f = 11.312 * Math.exp( -Fi_co * 0.4799) / 100000;
        vas_d = x[6] * K_vd;
        ksi_map = 1;
        ksi_at = 0.4 + 2.4 / ( 1 + Math.exp( ( 2.82 - 1.5 * Math.log10(C_at) ) / 0.8) );
        C_K = 5.0;
        ksi_k_sod = C_K / ( 0.003525 * C_sod ) - 9;
        N_als = ksi_k_sod * ksi_map * ksi_at;
        R_tp = R_a + R_bv;
        nu_md_sod = 0.2262 + 28.04 / ( 11.56 + Math.exp( ( Fi_md_sod - 1.667 ) / 0.6056) );
        nu_rsna = 1.89 - 2.056 / ( 1.358 + Math.exp(rsna - 0.8667) );
        N_rs = nu_md_sod * nu_rsna;
    }


    /*
     * Write rules to calculate equation parameters excluding internal variables.
     */

    @Override
    public void init()
    {
        initialValues = getInitialValues();
        /*
         * Initialize variables

         */
        C_K = 5.0; // initial value of C_K
        C_adh = 4.0; // initial value of C_adh
        C_al = 85.0; // initial value of C_al
        C_anp = 1.0; // initial value of C_anp
        C_at = 20.0; // initial value of C_at
        C_gcf = 0.00781; // initial value of C_gcf
        C_sod = 144.0; // initial value of C_sod
        Fi_cd_sodreab = 1.674; // initial value of Fi_cd_sodreab
        Fi_co = 5.0; // initial value of Fi_co
        Fi_dt_sod = 1.8; // initial value of Fi_dt_sod
        Fi_dt_sodreab = 1.8; // initial value of Fi_dt_sodreab
        Fi_filsod = 18.0; // initial value of Fi_filsod
        Fi_gfilt = 0.125; // initial value of Fi_gfilt
        Fi_md_sod = 3.6; // initial value of Fi_md_sod
        Fi_pt_sodreab = 14.4; // initial value of Fi_pt_sodreab
        Fi_rb = 1.2; // initial value of Fi_rb
        Fi_sodin = 0.126; // initial value of Fi_sodin
        Fi_t_wreab = 0.124; // initial value of Fi_t_wreab
        Fi_u = 0.0010; // initial value of Fi_u
        Fi_u_sod = 0.126; // initial value of Fi_u_sod
        Fi_vr = 5.0; // initial value of Fi_vr
        Fi_win = 0.0010; // initial value of Fi_win
        K_bar = 16.6; // initial value of K_bar
        K_vd = 1.0E-5; // initial value of K_vd
        N_adhs = 1.0; // initial value of N_adhs
        N_als = 1.0; // initial value of N_als
        N_rs = 1.0; // initial value of N_rs
        N_rsna = 1.0; // initial value of N_rsna
        P_B = 18.0; // initial value of P_B
        P_f = 16.0; // initial value of P_f
        P_gh = 62.0; // initial value of P_gh
        P_go = 28.0; // initial value of P_go
        P_ma = 100.0; // initial value of P_ma
        P_mf = 7.0; // initial value of P_mf
        R_a = 16.6; // initial value of R_a
        R_aa = 31.67; // initial value of R_aa
        R_ba = 16.6; // initial value of R_ba
        R_bv = 3.4; // initial value of R_bv
        R_ea = 51.66; // initial value of R_ea
        R_r = 83.33; // initial value of R_r
        R_tp = 20.0; // initial value of R_tp
        R_vr = 1.4; // initial value of R_vr
        T_adh = 6.0; // initial value of T_adh
        T_al = 30.0; // initial value of T_al
        T_r = 15.0; // initial value of T_r
        V_b = 5.0; // initial value of V_b
        alpha_auto = 1.0; // initial value of alpha_auto
        alpha_chemo = 0.25; // initial value of alpha_chemo
        alpha_map = 1.0; // initial value of alpha_map
        alpha_rap = 1.0; // initial value of alpha_rap
        beta_rsna = 1.0; // initial value of beta_rsna
        eps_aum = 1.0; // initial value of eps_aum
        eta_cd_sodreab = 0.93; // initial value of eta_cd_sodreab
        eta_dt_sodreab = 0.5; // initial value of eta_dt_sodreab
        eta_pt_sodreab = 0.8; // initial value of eta_pt_sodreab
        gamma_at = 1.0; // initial value of gamma_at
        gamma_filsod = 1.0; // initial value of gamma_filsod
        gamma_rsna = 1.0; // initial value of gamma_rsna
        ksi_at = 1.0; // initial value of ksi_at
        ksi_k_sod = 1.0; // initial value of ksi_k_sod
        ksi_map = 1.0; // initial value of ksi_map
        lambda_anp = 1.0; // initial value of lambda_anp
        lambda_dt = 1.0; // initial value of lambda_dt
        mu_adh = 1.0; // initial value of mu_adh
        mu_al = 1.0; // initial value of mu_al
        n_eps_dt = 0.5; // initial value of n_eps_dt
        n_eta_cd = 0.93; // initial value of n_eta_cd
        n_eta_pt = 0.8; // initial value of n_eta_pt
        nu_md_sod = 1.0; // initial value of nu_md_sod
        nu_rsna = 1.0; // initial value of nu_rsna
        psi_al = 1.0; // initial value of psi_al
        rsna = 1.0; // initial value of rsna
        sigma_tgf = 1.0; // initial value of sigma_tgf
        vas_d = 1.0E-5; // initial value of vas_d
        vas_f = 1.0E-5; // initial value of vas_f
    }

    /*
     * Model variables initial values
     */
    protected double C_K;
    protected double C_adh;
    protected double C_al;
    protected double C_anp;
    protected double C_at;
    protected double C_gcf;
    protected double C_sod;
    protected double Fi_cd_sodreab;
    protected double Fi_co;
    protected double Fi_dt_sod;
    protected double Fi_dt_sodreab;
    protected double Fi_filsod;
    protected double Fi_gfilt;
    protected double Fi_md_sod;
    protected double Fi_pt_sodreab;
    protected double Fi_rb;
    protected double Fi_s;
    protected double Fi_sodin;
    protected double Fi_t_wreab;
    protected double Fi_u;
    protected double Fi_u_sod;
    protected double Fi_vr;
    protected double Fi_win;
    protected double K_bar;
    protected double K_vd;
    protected double N_adhs;
    protected double N_als;
    protected double N_rs;
    protected double N_rsna;
    protected double P_B;
    protected double P_f;
    protected double P_gh;
    protected double P_go;
    protected double P_ma;
    protected double P_mf;
    protected double P_ra;
    protected double R_a;
    protected double R_aa;
    protected double R_ba;
    protected double R_bv;
    protected double R_ea;
    protected double R_r;
    protected double R_tp;
    protected double R_vr;
    protected double T_adh;
    protected double T_al;
    protected double T_r;
    protected double V_b;
    protected double alpha_auto;
    protected double alpha_chemo;
    protected double alpha_map;
    protected double alpha_rap;
    protected double beta_rsna;
    protected double delta_ra;
    protected double eps_aum;
    protected double eta_cd_sodreab;
    protected double eta_dt_sodreab;
    protected double eta_pt_sodreab;
    protected double gamma_at;
    protected double gamma_filsod;
    protected double gamma_rsna;
    protected double ksi_at;
    protected double ksi_k_sod;
    protected double ksi_map;
    protected double lambda_anp;
    protected double lambda_dt;
    protected double mu_adh;
    protected double mu_al;
    protected double n_eps_dt;
    protected double n_eta_cd;
    protected double n_eta_pt;
    protected double nu_md_sod;
    protected double nu_rsna;
    protected double psi_al;
    protected double rsna;
    protected double sigma_tgf;
    protected double time;
    protected double vas_d;
    protected double vas_f;

    @Override
    public double[] extendResult(double time, double[] x)
    {
        this.time = time;
        double[] algebraicResult = new double[6];
        AlgFuncBegin_0(algebraicResult);
        this.x = x;
        try
        {
            NewtonSolver.solve(algebraicResult, this);
        }
        catch( Throwable t )
        {
            t.printStackTrace();
        }
        AlgFuncEnd_0(algebraicResult);

        __internalVarInitFunc_0(time, x);
        //        __internalVarInitFunc_1(time, x);

        double[] y = new double[73];
        y[0] = C_K;
        y[1] = C_adh;
        y[2] = C_al;
        y[3] = C_anp;
        y[4] = C_at;
        y[5] = x[0];
        y[6] = C_sod;
        y[7] = Fi_cd_sodreab;
        y[8] = Fi_co;
        y[9] = Fi_dt_sod;
        y[10] = Fi_dt_sodreab;
        y[11] = Fi_filsod;
        y[12] = Fi_gfilt;
        y[13] = Fi_md_sod;
        y[14] = Fi_pt_sodreab;
        y[15] = Fi_rb;
        y[16] = Fi_s;
        y[17] = Fi_sodin;
        y[18] = Fi_t_wreab;
        y[19] = Fi_u;
        y[20] = Fi_u_sod;
        y[21] = Fi_vr;
        y[22] = Fi_win;
        y[23] = x[1];
        y[24] = x[2];
        y[25] = N_adhs;
        y[26] = x[3];
        y[27] = N_als;
        y[28] = N_rs;
        y[29] = P_f;
        y[30] = P_gh;
        y[31] = P_ma;
        y[32] = P_mf;
        y[33] = P_ra;
        y[34] = R_a;
        y[35] = R_aa;
        y[36] = R_ba;
        y[37] = R_ea;
        y[38] = R_r;
        y[39] = R_tp;
        y[40] = R_vr;
        y[41] = V_b;
        y[42] = x[4];
        y[43] = alpha_auto;
        y[44] = x[5];
        y[45] = alpha_chemo;
        y[46] = alpha_map;
        y[47] = alpha_rap;
        y[48] = beta_rsna;
        y[49] = delta_ra;
        y[50] = eps_aum;
        y[51] = eta_cd_sodreab;
        y[52] = eta_dt_sodreab;
        y[53] = eta_pt_sodreab;
        y[54] = gamma_at;
        y[55] = gamma_filsod;
        y[56] = gamma_rsna;
        y[57] = ksi_at;
        y[58] = ksi_k_sod;
        y[59] = ksi_map;
        y[60] = lambda_anp;
        y[61] = lambda_dt;
        y[62] = mu_adh;
        y[63] = mu_al;
        y[64] = nu_md_sod;
        y[65] = nu_rsna;
        y[66] = psi_al;
        y[67] = rsna;
        y[68] = sigma_tgf;
        y[69] = x[6];
        y[70] = vas_d;
        y[71] = vas_f;
        y[72] = x[7];
        return y;
    }
    @Override
    public double[] getInitialValues()
    {
        double[] x = new double[8];
        this.time = 0.0;
        x[0] = 1.0; // - C_r
        x[1] = 2160.0; // - M_sod
        x[2] = 1.0; // - N_adh
        x[3] = 1.0; // - N_al
        x[4] = 15.0; // - V_ecf
        x[5] = 0.75; // - alpha_baro
        x[6] = 1.0; // - vas
        x[7] = 0.0; // - vsp1

        __internalVarInitFunc_0(time, x);
        //        __internalVarInitFunc_1(time, x);

        return x;
    }

    protected double[] x = null;
    @Override
    public double[] solveAlgebraic(double[] z)
    {
        C_al = z[0];
        Fi_co = z[1];
        Fi_md_sod = z[2];
        P_ma = z[3];
        R_r = z[4];
        eps_aum = z[5];
        double[] result = new double[6];

        result[0] = Fi_co * R_tp - P_ma;

        result[1] = ( P_mf - P_ra ) / R_vr - Fi_co;

        result[2] = alpha_chemo + x[5] - eps_aum;

        result[3] = x[3] * 85 - C_al;

        result[4] = R_aa + R_ea - R_r;

        result[5] = ( P_ma - Fi_rb * 31.67 * beta_rsna * ( 0.3408 + 3.449 / ( 3.88 + Math.exp( ( Fi_md_sod - 3.859 ) / ( -0.9617 )) ) )
                - P_B - P_go )
                * C_gcf
                * C_sod
                * ( 1 - n_eta_pt * ( ( 0.8 + 0.3 / ( 1 + Math.exp(1 + ( Fi_filsod - 14 ) / 138) ) ) / 0.882 ) * gamma_at * gamma_rsna )
                - Fi_md_sod;
        return result;
    }

    /*
     * code for algebraic rules calculations
     */

    public void AlgFuncBegin_0(double[] algebraicResult)
    {
        algebraicResult[0] = C_al;
        algebraicResult[1] = Fi_co;
        algebraicResult[2] = Fi_md_sod;
        algebraicResult[3] = P_ma;
        algebraicResult[4] = R_r;
        algebraicResult[5] = eps_aum;
    }
    public void AlgFuncEnd_0(double[] algebraicResult)
    {
        C_al = algebraicResult[0];
        Fi_co = algebraicResult[1];
        Fi_md_sod = algebraicResult[2];
        P_ma = algebraicResult[3];
        R_r = algebraicResult[4];
        eps_aum = algebraicResult[5];
    }
    /*
     * end of code for algebraic rules calculations
     */

    //    public void dy_dt_0(double time, double [] x, double[] result)
    //    {
    //        result[0] = +((0.2262 + 28.04/(11.56 + Math.exp((Fi_md_sod - 1.667)/0.6056)))*(1.89 - 2.056/(1.358 + Math.exp(N_rsna*(0.5 + 1.1/(1 + Math.exp((P_ma - 100)/15)))*(1 - 0.0080*0.2787*Math.exp(Fi_co*0.2281)) - 0.8667))) - x[0])/T_r;
    //double piecewise_2 = 0;
    //if (time < 3000) {
    //    piecewise_2 = 0.126;
    //}
    //
    //else if (time >= 3000 && time < 8200) {
    //    piecewise_2 = 0.26;
    //}
    //
    //else {
    //
    //    piecewise_2 = 0.02;
    //}
    //
    //
    //        result[1] = +piecewise_2 - (Fi_md_sod - Fi_md_sod*(n_eps_dt*(0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log(C_al)/Math.log(10))/0.88)))) - Fi_md_sod*(n_eps_dt*(0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log(C_al)/Math.log(10))/0.88))))*(n_eta_cd*(0.82 + 0.39/(1 + Math.exp((Fi_md_sod - Fi_md_sod*(n_eps_dt*(0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log(C_al)/Math.log(10))/0.88)))) - 1.6)/2)))*(-0.1*(7.427 - 6.554/(1 + Math.exp(0.2787*Math.exp(Fi_co*0.2281) - 3.762))) + 1.1199)));
    //        result[2] = +((x[1]/x[4] - 140 + eps_aum - (0.2*0.2787*Math.exp(Fi_co*0.2281) - 7.0E-4*x[7]))/3 - x[2])/T_adh;
    //        result[3] = +((5/(0.003525*x[1]/x[4]) - 9)*1*(0.4 + 2.4/(1 + Math.exp((2.82 - 1.5*Math.log10(20*x[0]))/0.8))) - x[3])/T_al;
    //        result[4] = +0.0081/(1 + 1.822*Math.pow((4*x[2]), (-1.607))) - 0.0053 - ((P_ma - P_ma/R_r*31.67*(1.5*(N_rsna*(0.5 + 1.1/(1 + Math.exp((P_ma - 100)/15)))*(1 - 0.0080*0.2787*Math.exp(Fi_co*0.2281)) - 1) + 1)*(0.3408 + 3.449/(3.88 + Math.exp((Fi_md_sod - 3.859)/(-0.9617)))) - P_B - P_go)*C_gcf - (0.025 - 0.0011/((0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log10(C_al))/0.88)))*(0.37 + 0.8/(1 + Math.exp(0.6 - 3.7*Math.log10((4*x[2])))))) + 0.8*(P_ma - P_ma/R_r*31.67*(1.5*(N_rsna*(0.5 + 1.1/(1 + Math.exp((P_ma - 100)/15)))*(1 - 0.0080*0.2787*Math.exp(Fi_co*0.2281)) - 1) + 1)*(0.3408 + 3.449/(3.88 + Math.exp((Fi_md_sod - 3.859)/(-0.9617)))) - P_B - P_go)*C_gcf));
    //        result[5] = -5.0025E-5*(x[5] - 1);
    //        result[6] = +11.312*Math.exp(-Fi_co*0.4799)/100000 - x[6]*K_vd;
    //        result[7] = +0.2*0.2787*Math.exp(Fi_co*0.2281) - 7.0E-4*x[7];
    //    }
    protected void calculateRates(double time, double[] x)
    {

        __internalVarInitFunc_0(time, x);
        //        __internalVarInitFunc_1(time, x);

    }

    /*
     * calculate dy/dt for 'Karaslaan sod intake' model
     */
    protected double[] calculateResult(double time, double[] x)
    {
        double[] result = new double[8];
        result[0] = + ( N_rs - x[0] ) / T_r;

        //
        //        double piecewise_3 = 0;
        //if (time < 3000) {
        //    piecewise_3 = 0.126;
        //}
        //
        //else if (time >= 3000 && time < 8200) {
        //    piecewise_3 = 0.26;
        //}
        //
        //else {
        //
        //    piecewise_3 = 0.02;
        //}


        result[1] = +Fi_sodin - Fi_u_sod;
        result[2] = + ( N_adhs - x[2] ) / T_adh;
        result[3] = + ( N_als - x[3] ) / T_al;
        result[4] = Fi_win - Fi_u;
        result[5] = -5.0025E-5 * ( x[5] - 1 );
        result[6] = vas_f - vas_d;
        result[7] = delta_ra;
        return result;
    }
    @Override
    public double[] dy_dt(double time, double[] x)
    {
        this.time = time;
        double[] algebraicResult = new double[6];
        AlgFuncBegin_0(algebraicResult);
        this.x = x;
        try
        {
            NewtonSolver.solve(algebraicResult, this);
        }
        catch( Throwable t )
        {
            t.printStackTrace();
        }
        AlgFuncEnd_0(algebraicResult);
        calculateRates(time, x);

        return calculateResult(time, x);
    }

} // class ...

package biouml.plugins.agentmodeling._test.models;
/*
 * This code is generated by BioUML FrameWork
 * for Karaaslan_testBoris2 diagram  at 2011.11.01 17:52:56
 */
import biouml.plugins.simulation.ae.NewtonSolver;
import biouml.plugins.simulation.java.JavaBaseModel;
public class Karaaslan_without_arteries extends JavaBaseModel
{
    protected double eta_dt_sodreab;
    protected double N_rsna;
    protected double N_als;
    protected double ksi_map;
    protected double R_ea;
    protected double R_aa;
    protected double alpha_map;
    protected double Fi_u_sod;
    protected double C_sod;
    protected double P_go;
    protected double Fi_sodin;
    protected double Fi_co;
    protected double Fi_dt_sodreab;
    protected double mu_al;
    protected double P_B;
    protected double Fi_gfilt;
    protected double gamma_at;
    protected double nu_rsna;
    protected double P_ma;
    protected double Fi_cd_sodreab;
    protected double Fi_rb;
    protected double Fi_t_wreab;
    protected double Fi_pt_sodreab;
    protected double psi_al;
    protected double eta_cd_sodreab;
    protected double sigma_tgf;
    protected double N_rs;
    protected double R_aass;
    protected double C_al;
    protected double alpha_auto;
    protected double P_gh;
    protected double rsna;
    protected double N_adhs;
    protected double n_eps_dt;
    protected double n_eta_cd;
    protected double C_K;
    protected double Fi_dt_sod;
    protected double time;
    protected double alpha_chemo;
    protected double T_al;
    protected double Fi_md_sod;
    protected double gamma_rsna;
    protected double beta_rsna;
    protected double C_adh;
    protected double ksi_at;
    protected double delta_ra;
    protected double C_gcf;
    protected double eps_aum;
    protected double nu_md_sod;
    protected double gamma_filsod;
    protected double R_r;
    protected double mu_adh;
    protected double P_ra;
    protected double C_anp;
    protected double n_eta_pt;
    protected double eta_pt_sodreab;
    protected double Fi_filsod;
    protected double T_r;
    protected double V_b;
    protected double P_f;
    protected double T_adh;
    protected double lambda_anp;
    protected double Fi_win;
    protected double ksi_k_sod;
    protected double lambda_dt;
    protected double C_at;
    protected double Fi_u;
    protected double V_large;
    protected double alpha_rap;
    protected double[] x_values;
    private void calculateScalar()
    {
        
        psi_al = 0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log(C_al)/Math.log(10))/0.88));
        eta_dt_sodreab = n_eps_dt*psi_al;
        Fi_dt_sodreab = Fi_md_sod*eta_dt_sodreab;
        C_at = 20*x_values[4];
        alpha_map = 0.5 + 1.1/(1 + Math.exp((P_ma - 100)/15));
        P_ra = 0.2787*Math.exp(0.2281*Fi_co);
        alpha_rap = 1 - 0.0080*P_ra;
        rsna = N_rsna*alpha_map*alpha_rap;
        beta_rsna = 1.5*(rsna - 1) + 1;
        R_ea = 51.66*(0.9432 + 0.1363/(0.2069 + Math.exp(3.108 - 1.785*Math.log(C_at)/Math.log(10))));
        sigma_tgf = 0.3408 + 3.449/(3.88 + Math.exp((Fi_md_sod - 3.859)/-0.9617));
        R_aa = R_aass*beta_rsna*sigma_tgf;
        double piecewise_11 = 0;
if (time < 3000) {
    piecewise_11 = 0.126;
}
else if (time >= 3000 && time < 8200) {
    piecewise_11 = 0.26;
}
else {
    piecewise_11 = 0.02;
}


        Fi_sodin = piecewise_11;
        Fi_dt_sod = Fi_md_sod - Fi_dt_sodreab;
        C_anp = 7.427 - 6.554/(1 + Math.exp(P_ra - 3.762));
        lambda_anp = -0.1*C_anp + 1.1199;
        lambda_dt = 0.82 + 0.39/(1 + Math.exp((Fi_dt_sod - 1.6)/2));
        eta_cd_sodreab = n_eta_cd*lambda_dt*lambda_anp;
        Fi_cd_sodreab = Fi_dt_sod*eta_cd_sodreab;
        Fi_u_sod = Fi_dt_sod - Fi_cd_sodreab;
        gamma_at = 0.95 + 0.12/(1 + Math.exp(2.6 - 1.8*Math.log(C_at)/Math.log(10)));
        P_f = P_gh - P_B - P_go;
        Fi_gfilt = P_f*C_gcf;
        C_sod = x_values[0]/x_values[3];
        Fi_filsod = Fi_gfilt*C_sod;
        gamma_filsod = (0.8 + 0.3/(1 + Math.exp(1 + (Fi_filsod - 14)/138)))/0.882;
        gamma_rsna = (0.5 + 0.7/(1 + Math.exp((1 - rsna)/2.18)))/0.853;
        eta_pt_sodreab = n_eta_pt*gamma_filsod*gamma_at*gamma_rsna;
        Fi_pt_sodreab = Fi_filsod*eta_pt_sodreab;
        C_adh = 4*x_values[6];
        delta_ra = 0.2*P_ra - 7.0E-4*x_values[2];
        N_adhs = (C_sod - 140 + eps_aum - delta_ra)/3;
        mu_adh = 0.37 + 0.8/(1 + Math.exp(0.6 - 3.7*Math.log(C_adh)/Math.log(10)));
        mu_al = 0.17 + 0.94/(1 + Math.exp((0.48 - 1.2*Math.log(C_al)/Math.log(10))/0.88));
        Fi_t_wreab = 0.025 - 0.0011/(mu_al*mu_adh) + 0.8*Fi_gfilt;
        Fi_u = Fi_gfilt - Fi_t_wreab;
        Fi_win = 0.0080/(1 + 1.822*Math.pow(C_adh, -1.607)) - 0.0053;
        alpha_auto = 3.079*Math.exp(-P_ma*0.011);
        alpha_chemo = 0.25*alpha_auto;
        V_b = 4.5602271 + 2.4312171/(1 + Math.exp(-(x_values[3] - 18.11278)*0.47437));
        ksi_map = 1;
        ksi_at = 0.4 + 2.4/(1 + Math.exp(2.82 - 1.5*Math.log(C_at)/Math.log(10)/0.8));
        ksi_k_sod = C_K/(0.003525*C_sod) - 9;
        N_als = ksi_k_sod*ksi_map*ksi_at;
        nu_md_sod = 0.2262 + 28.04/(11.56 + Math.exp((Fi_md_sod - 1.667)/0.6056));
        nu_rsna = 1.89 - 2.056/(1.358 + Math.exp(rsna - 0.8667));
        N_rs = nu_md_sod*nu_rsna;
        C_K = 5;
        V_large = (V_b - 1.5)*1000;
    }
    private void calculateAlgebraic()
    {
        final double [] algebraicResult = new double [7];
        
        algebraicResult[0] =  P_ma;
        algebraicResult[1] =  Fi_rb;
        algebraicResult[2] =  C_al;
        algebraicResult[3] =  P_gh;
        algebraicResult[4] =  Fi_md_sod;
        algebraicResult[5] =  eps_aum;
        algebraicResult[6] =  R_r;
        try
        {
            NewtonSolver.solve(algebraicResult, this);
        }
        catch (Throwable t)
        {
            t.printStackTrace();
        }
        
        P_ma = algebraicResult[0];
        Fi_rb = algebraicResult[1];
        C_al = algebraicResult[2];
        P_gh = algebraicResult[3];
        Fi_md_sod = algebraicResult[4];
        eps_aum = algebraicResult[5];
        R_r = algebraicResult[6];
    }
    @Override
    public double[] solveAlgebraic(double[] z)
    {
        
        P_ma = z[0];
        Fi_rb = z[1];
        C_al = z[2];
        P_gh = z[3];
        Fi_md_sod = z[4];
        eps_aum = z[5];
        R_r = z[6];
        final double [] result = new double [7];
        result[0] = (P_ma - Fi_rb*31.67*beta_rsna*(0.3408 + 3.449/(3.88 + Math.exp((Fi_md_sod - 3.859)/-0.9617))) - P_B - P_go)*C_gcf*C_sod*(1 - n_eta_pt*((0.8 + 0.3/(1 + Math.exp(1 + (Fi_filsod - 14)/138)))/0.882)*gamma_at*gamma_rsna) - Fi_md_sod;
        result[1] = R_aa + R_ea - R_r;
        result[2] = alpha_chemo + x_values[5] - eps_aum;
        result[3] = x_values[1]*85 - C_al;
        result[4] = P_ma - P_ma*R_aa/R_r - P_gh;
        return result;
    }
      @Override
    public double[] dy_dt(double time, double[] x_values)
    {
        this.time = time;
        this.x_values = x_values;
        final double[] dydt = new double[7];
        
calculateAlgebraic();
        calculateScalar();
        
        dydt[0] = +Fi_sodin - Fi_u_sod;
        dydt[1] = +(N_als - x_values[1])/T_al;
        dydt[2] = +delta_ra;
        dydt[3] = +Fi_win - Fi_u;
        dydt[4] = +(N_rs - x_values[4])/T_r;
        dydt[5] = -5.0025E-5*(x_values[5] - 1);
        dydt[6] = +(N_adhs - x_values[6])/T_adh;
        return dydt;
    }
    @Override
    public void init()
    {
        eta_dt_sodreab = 0.5; // initial value of eta_dt_sodreab
        N_rsna = 1.0; // initial value of N_rsna
        N_als = 1.0; // initial value of N_als
        ksi_map = 1.0; // initial value of ksi_map
        R_ea = 51.66; // initial value of R_ea
        R_aa = 31.67; // initial value of R_aa
        alpha_map = 1.0; // initial value of alpha_map
        Fi_u_sod = 0.126; // initial value of Fi_u_sod
        C_sod = 144.0; // initial value of C_sod
        P_go = 28.0; // initial value of P_go
        Fi_sodin = 0.126; // initial value of Fi_sodin
        Fi_co = 5.0; // initial value of Fi_co
        Fi_dt_sodreab = 1.8; // initial value of Fi_dt_sodreab
        mu_al = 1.0; // initial value of mu_al
        P_B = 18.0; // initial value of P_B
        Fi_gfilt = 0.125; // initial value of Fi_gfilt
        gamma_at = 1.0; // initial value of gamma_at
        nu_rsna = 1.0; // initial value of nu_rsna
        P_ma = 100.0; // initial value of P_ma
        Fi_cd_sodreab = 1.674; // initial value of Fi_cd_sodreab
        Fi_rb = 1.2; // initial value of Fi_rb
        Fi_t_wreab = 0.124; // initial value of Fi_t_wreab
        Fi_pt_sodreab = 14.4; // initial value of Fi_pt_sodreab
        psi_al = 1.0; // initial value of psi_al
        eta_cd_sodreab = 0.93; // initial value of eta_cd_sodreab
        sigma_tgf = 1.0; // initial value of sigma_tgf
        N_rs = 1.0; // initial value of N_rs
        R_aass = 31.67; // initial value of R_aass
        C_al = 85.0; // initial value of C_al
        alpha_auto = 1.0; // initial value of alpha_auto
        P_gh = 52.0; // initial value of P_gh
        rsna = 1.0; // initial value of rsna
        N_adhs = 1.0; // initial value of N_adhs
        n_eps_dt = 0.5; // initial value of n_eps_dt
        n_eta_cd = 0.93; // initial value of n_eta_cd
        C_K = 5.1; // initial value of C_K
        Fi_dt_sod = 1.8; // initial value of Fi_dt_sod
        time = 0.0; // initial value of time
        alpha_chemo = 0.25; // initial value of alpha_chemo
        T_al = 30.0; // initial value of T_al
        Fi_md_sod = 3.6; // initial value of Fi_md_sod
        gamma_rsna = 1.0; // initial value of gamma_rsna
        beta_rsna = 1.0; // initial value of beta_rsna
        C_adh = 4.0; // initial value of C_adh
        ksi_at = 1.0; // initial value of ksi_at
        delta_ra = 0.0; // initial value of delta_ra
        C_gcf = 0.00781; // initial value of C_gcf
        eps_aum = 1.0; // initial value of eps_aum
        nu_md_sod = 1.0; // initial value of nu_md_sod
        gamma_filsod = 1.0; // initial value of gamma_filsod
        R_r = 83.33; // initial value of R_r
        mu_adh = 1.0; // initial value of mu_adh
        P_ra = 0.0; // initial value of P_ra
        C_anp = 1.0; // initial value of C_anp
        n_eta_pt = 0.8; // initial value of n_eta_pt
        eta_pt_sodreab = 0.8; // initial value of eta_pt_sodreab
        Fi_filsod = 18.0; // initial value of Fi_filsod
        T_r = 15.0; // initial value of T_r
        V_b = 5.0; // initial value of V_b
        P_f = 16.0; // initial value of P_f
        T_adh = 6.0; // initial value of T_adh
        lambda_anp = 1.0; // initial value of lambda_anp
        Fi_win = 0.0010; // initial value of Fi_win
        ksi_k_sod = 1.0; // initial value of ksi_k_sod
        lambda_dt = 1.0; // initial value of lambda_dt
        C_at = 20.0; // initial value of C_at
        Fi_u = 0.0010; // initial value of Fi_u
        V_large = 0.0; // initial value of V_large
        alpha_rap = 1.0; // initial value of alpha_rap
        initialValues = getInitialValues();
        this.isInit = true;
    }
    @Override
    public double[] getInitialValues()
    {
       if (!this.isInit)
       {
            this.x_values = new double[7];
            this.time = 0.0;
            x_values[0] = 2160.0; //  initial value of M_sod
            x_values[1] = 1.0; //  initial value of N_al
            x_values[2] = 0.0; //  initial value of temp
            x_values[3] = 15.0; //  initial value of V_ecf
            x_values[4] = 1.0; //  initial value of C_r
            x_values[5] = 0.75; //  initial value of alpha_baro
            x_values[6] = 1.0; //  initial value of N_adh
            calculateScalar();
            
calculateAlgebraic();
            return x_values;
        }
        else return initialValues;
    }
    @Override
    public double[] extendResult(double time, double[] x_values)
    {
        this.time = time;
        this.x_values = x_values;
        
calculateAlgebraic();
        calculateScalar();
        double[] yv191 = new double[76];
        yv191[0] = eta_dt_sodreab;
        yv191[1] = N_rsna;
        yv191[2] = N_als;
        yv191[3] = ksi_map;
        yv191[4] = R_ea;
        yv191[5] = x_values[0];
        yv191[6] = R_aa;
        yv191[7] = alpha_map;
        yv191[8] = Fi_u_sod;
        yv191[9] = C_sod;
        yv191[10] = P_go;
        yv191[11] = Fi_sodin;
        yv191[12] = Fi_co;
        yv191[13] = x_values[1];
        yv191[14] = Fi_dt_sodreab;
        yv191[15] = mu_al;
        yv191[16] = P_B;
        yv191[17] = Fi_gfilt;
        yv191[18] = x_values[2];
        yv191[19] = gamma_at;
        yv191[20] = nu_rsna;
        yv191[21] = P_ma;
        yv191[22] = Fi_cd_sodreab;
        yv191[23] = Fi_rb;
        yv191[24] = Fi_t_wreab;
        yv191[25] = Fi_pt_sodreab;
        yv191[26] = x_values[3];
        yv191[27] = psi_al;
        yv191[28] = eta_cd_sodreab;
        yv191[29] = sigma_tgf;
        yv191[30] = N_rs;
        yv191[31] = R_aass;
        yv191[32] = C_al;
        yv191[33] = x_values[4];
        yv191[34] = alpha_auto;
        yv191[35] = P_gh;
        yv191[36] = rsna;
        yv191[37] = N_adhs;
        yv191[38] = n_eps_dt;
        yv191[39] = n_eta_cd;
        yv191[40] = C_K;
        yv191[41] = Fi_dt_sod;
        yv191[42] = x_values[5];
        yv191[43] = time;
        yv191[44] = alpha_chemo;
        yv191[45] = T_al;
        yv191[46] = Fi_md_sod;
        yv191[47] = gamma_rsna;
        yv191[48] = beta_rsna;
        yv191[49] = C_adh;
        yv191[50] = ksi_at;
        yv191[51] = delta_ra;
        yv191[52] = C_gcf;
        yv191[53] = eps_aum;
        yv191[54] = nu_md_sod;
        yv191[55] = gamma_filsod;
        yv191[56] = R_r;
        yv191[57] = mu_adh;
        yv191[58] = P_ra;
        yv191[59] = C_anp;
        yv191[60] = n_eta_pt;
        yv191[61] = eta_pt_sodreab;
        yv191[62] = Fi_filsod;
        yv191[63] = T_r;
        yv191[64] = V_b;
        yv191[65] = x_values[6];
        yv191[66] = P_f;
        yv191[67] = T_adh;
        yv191[68] = lambda_anp;
        yv191[69] = Fi_win;
        yv191[70] = ksi_k_sod;
        yv191[71] = lambda_dt;
        yv191[72] = C_at;
        yv191[73] = Fi_u;
        yv191[74] = V_large;
        yv191[75] = alpha_rap;
        return yv191;
    }
  }
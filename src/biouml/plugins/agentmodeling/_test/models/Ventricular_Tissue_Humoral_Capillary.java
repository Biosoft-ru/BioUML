package biouml.plugins.agentmodeling._test.models;
/*
 * This code is generated by BioUML FrameWork
 * for Ventricular_Tissue_Humoral_Capillary diagram  at 2010.09.30 17:44:39
 */
import biouml.plugins.simulation.java.JavaBaseModel;

public class Ventricular_Tissue_Humoral_Capillary extends JavaBaseModel
{
   protected double Pressure_Diastole;
   protected double Oxygen_UtilizationSpeed;
   protected double Reactivity_HeartCenter;
   protected double BloodFlow_VentricularToArterial;
   protected double BR_HeartCenter;
   protected double K_2;
   protected double Volume_Arterial;
   protected double Conductivity_Capillary_0;
   protected double time;
   protected double Debt_Capillary;
   protected double Stress_HeartCenter;
   protected double Duration_Sistole;
   protected double S_3;
   protected double Conductivity_Venous;
   protected double Humoral_Diastole;
   protected double Conductivity_Capillary;
   protected double S_1;
   protected double Oxygen_Need;
   protected double Humoral_Capillary;
   protected double Oxygen_Delivery;
   protected double A_24;
   protected double BloodFlow_Capillary;
   protected double Debt_Venous;
   protected double Pressure_0;
   protected double Elasticity_Myocard;
   protected double Volume_Ventricular_Diastole;
   protected double K_1;
   protected double Oxygen_Arterial;
   protected double BloodFlow_VenousToVentricular;
   protected double Volume_Ventricular_N;
   protected double A_29;
   protected double Conductivity_Arterial;
   protected double S_2;
   protected double Pressure_Sistole;
   protected double Pressure_Arterial;
   protected double Stage_Sistole;
   protected double Pressure_Venous;
   

 
   @Override
public double[] dy_dt(double time, double[] x)
   {
      this.time = time;
      final double[] dydt = new double[5];
      
      
Conductivity_Capillary = Conductivity_Capillary_0 + Debt_Capillary*x[2] + Humoral_Capillary*x[0];
BloodFlow_Capillary = Conductivity_Capillary*(Pressure_Arterial - Pressure_Venous);
Oxygen_Delivery = BloodFlow_Capillary*(Oxygen_Arterial - x[3]);
BloodFlow_VentricularToArterial = Stage_Sistole*(Conductivity_Arterial*(Pressure_Sistole - Pressure_Arterial));
Pressure_Diastole = A_29*((x[4] - Volume_Ventricular_N)*(A_24*(x[4] - Volume_Ventricular_N) + Elasticity_Myocard));
BloodFlow_VenousToVentricular = (1 - Stage_Sistole)*Conductivity_Venous*(Pressure_Venous - Pressure_Diastole);
      
      dydt[0] = +Reactivity_HeartCenter*(BR_HeartCenter*BloodFlow_Capillary/Volume_Arterial - Stress_HeartCenter*(Pressure_Arterial - Pressure_0) - x[0]);
      dydt[1] = +1;
      dydt[2] = -Oxygen_UtilizationSpeed*(Oxygen_Delivery - Oxygen_Need);
      dydt[3] = +Debt_Venous*(Oxygen_Delivery - Oxygen_Need);
      dydt[4] = +BloodFlow_VenousToVentricular - BloodFlow_VentricularToArterial;
      return dydt;
   }

   @Override
public void init()
   {
      Pressure_Diastole = 0.0; // initial value of Pressure_Diastole
      Oxygen_UtilizationSpeed = 0.5; // initial value of Oxygen_UtilizationSpeed
      Reactivity_HeartCenter = 2.0; // initial value of Reactivity_HeartCenter
      BloodFlow_VentricularToArterial = 0.0; // initial value of BloodFlow_VentricularToArterial
      BR_HeartCenter = 6.0; // initial value of BR_HeartCenter
      K_2 = 20.0; // initial value of K_2
      Volume_Arterial = 360.0; // initial value of Volume_Arterial
      Conductivity_Capillary_0 = 0.0733; // initial value of Conductivity_Capillary_0
      time = 0.0; // initial value of time
      Debt_Capillary = 0.00665; // initial value of Debt_Capillary
      Stress_HeartCenter = 0.0015; // initial value of Stress_HeartCenter
      Duration_Sistole = 0.0; // initial value of Duration_Sistole
      S_3 = 0.2; // initial value of S_3
      Conductivity_Venous = 0.0; // initial value of Conductivity_Venous
      Humoral_Diastole = 1.1; // initial value of Humoral_Diastole
      Conductivity_Capillary = 0.0; // initial value of Conductivity_Capillary
      S_1 = 22.0; // initial value of S_1
      Oxygen_Need = 4.0; // initial value of Oxygen_Need
      Humoral_Capillary = 0.626; // initial value of Humoral_Capillary
      Oxygen_Delivery = 0.0; // initial value of Oxygen_Delivery
      A_24 = 0.01; // initial value of A_24
      BloodFlow_Capillary = 0.0; // initial value of BloodFlow_Capillary
      Debt_Venous = 8.0E-4; // initial value of Debt_Venous
      Pressure_0 = 70.0; // initial value of Pressure_0
      Elasticity_Myocard = 0.023; // initial value of Elasticity_Myocard
      Volume_Ventricular_Diastole = 156.0; // initial value of Volume_Ventricular_Diastole
      K_1 = 0.6; // initial value of K_1
      Oxygen_Arterial = 0.17; // initial value of Oxygen_Arterial
      BloodFlow_VenousToVentricular = 0.0; // initial value of BloodFlow_VenousToVentricular
      Volume_Ventricular_N = 120.0; // initial value of Volume_Ventricular_N
      A_29 = 0.0070; // initial value of A_29
      Conductivity_Arterial = 11.7; // initial value of Conductivity_Arterial
      S_2 = 0.25; // initial value of S_2
      Pressure_Sistole = 125.0; // initial value of Pressure_Sistole
      Pressure_Arterial = 0.0; // initial value of Pressure_Arterial
      Stage_Sistole = 1.0; // initial value of Stage_Sistole
      Pressure_Venous = 0.0; // initial value of Pressure_Venous
      initialValues = getInitialValues();
      this.isInit = true;
   }

   @Override
public double[] getInitialValues()
   {
      double [] x = new double[5];
      this.time = 0.0;
      if (!this.isInit)
      {
             x[0] = 1.1; //  initial value of Humoral
            x[1] = 0.0; //  initial value of Duration_Current
          x[2] = 3.0E-4; //  initial value of Oxygen_Debt
                        x[3] = 0.14; //  initial value of Oxygen_Venous
                     x[4] = 156.0; //  initial value of Volume_Ventricular
             
Conductivity_Capillary = Conductivity_Capillary_0 + Debt_Capillary*x[2] + Humoral_Capillary*x[0];
BloodFlow_Capillary = Conductivity_Capillary*(Pressure_Arterial - Pressure_Venous);
Oxygen_Delivery = BloodFlow_Capillary*(Oxygen_Arterial - x[3]);
BloodFlow_VentricularToArterial = Stage_Sistole*(Conductivity_Arterial*(Pressure_Sistole - Pressure_Arterial));
Pressure_Diastole = A_29*((x[4] - Volume_Ventricular_N)*(A_24*(x[4] - Volume_Ventricular_N) + Elasticity_Myocard));
BloodFlow_VenousToVentricular = (1 - Stage_Sistole)*Conductivity_Venous*(Pressure_Venous - Pressure_Diastole);
      
      return x;
      }
      else return initialValues;
   }

   @Override
public double[] extendResult(double time, double[] x)
   {
      this.time = time;
      
      
Conductivity_Capillary = Conductivity_Capillary_0 + Debt_Capillary*x[2] + Humoral_Capillary*x[0];
BloodFlow_Capillary = Conductivity_Capillary*(Pressure_Arterial - Pressure_Venous);
Oxygen_Delivery = BloodFlow_Capillary*(Oxygen_Arterial - x[3]);
BloodFlow_VentricularToArterial = Stage_Sistole*(Conductivity_Arterial*(Pressure_Sistole - Pressure_Arterial));
Pressure_Diastole = A_29*((x[4] - Volume_Ventricular_N)*(A_24*(x[4] - Volume_Ventricular_N) + Elasticity_Myocard));
BloodFlow_VenousToVentricular = (1 - Stage_Sistole)*Conductivity_Venous*(Pressure_Venous - Pressure_Diastole);
      double[] yv3 = new double[42];
      yv3[0] = Pressure_Diastole;
      yv3[1] = Oxygen_UtilizationSpeed;
      yv3[2] = Reactivity_HeartCenter;
      yv3[3] = x[0];
      yv3[4] = BloodFlow_VentricularToArterial;
      yv3[5] = BR_HeartCenter;
      yv3[6] = x[1];
      yv3[7] = x[2];
      yv3[8] = K_2;
      yv3[9] = Volume_Arterial;
      yv3[10] = Conductivity_Capillary_0;
      yv3[11] = time;
      yv3[12] = Debt_Capillary;
      yv3[13] = Stress_HeartCenter;
      yv3[14] = Duration_Sistole;
      yv3[15] = S_3;
      yv3[16] = Conductivity_Venous;
      yv3[17] = Humoral_Diastole;
      yv3[18] = Conductivity_Capillary;
      yv3[19] = S_1;
      yv3[20] = Oxygen_Need;
      yv3[21] = Humoral_Capillary;
      yv3[22] = x[3];
      yv3[23] = Oxygen_Delivery;
      yv3[24] = A_24;
      yv3[25] = BloodFlow_Capillary;
      yv3[26] = Debt_Venous;
      yv3[27] = Pressure_0;
      yv3[28] = Elasticity_Myocard;
      yv3[29] = Volume_Ventricular_Diastole;
      yv3[30] = K_1;
      yv3[31] = Oxygen_Arterial;
      yv3[32] = BloodFlow_VenousToVentricular;
      yv3[33] = Volume_Ventricular_N;
      yv3[34] = x[4];
      yv3[35] = A_29;
      yv3[36] = Conductivity_Arterial;
      yv3[37] = S_2;
      yv3[38] = Pressure_Sistole;
      yv3[39] = Pressure_Arterial;
      yv3[40] = Stage_Sistole;
      yv3[41] = Pressure_Venous;
      return yv3;
   }

    private double eventTempVariablev1 = 0;
   private double eventTempVariablev2 = 0;

   @Override
public double[] checkEvent(double time, double[] x)
   {
      this.time = time;
      
      
Conductivity_Capillary = Conductivity_Capillary_0 + Debt_Capillary*x[2] + Humoral_Capillary*x[0];
BloodFlow_Capillary = Conductivity_Capillary*(Pressure_Arterial - Pressure_Venous);
Oxygen_Delivery = BloodFlow_Capillary*(Oxygen_Arterial - x[3]);
BloodFlow_VentricularToArterial = Stage_Sistole*(Conductivity_Arterial*(Pressure_Sistole - Pressure_Arterial));
Pressure_Diastole = A_29*((x[4] - Volume_Ventricular_N)*(A_24*(x[4] - Volume_Ventricular_N) + Elasticity_Myocard));
BloodFlow_VenousToVentricular = (1 - Stage_Sistole)*Conductivity_Venous*(Pressure_Venous - Pressure_Diastole);
      double [] flagsv4  = new double[2];
      flagsv4[0] = (x[4] < (1 - K_1)*Volume_Ventricular_Diastole + K_2) ? +1 : -1; // event: event0;
      flagsv4[1] = (x[1] > 1.0/x[0] - Duration_Sistole) ? +1 : -1; // event: event1;
      return flagsv4;
   }
   
   public void processEvent(int v5, double time, double[] x)
   {
      this.time = time;
      if (v5 == 0)
      {  // event0
         eventTempVariablev1 = x[1];
         Stage_Sistole = 0;
         Duration_Sistole = eventTempVariablev1;
         x[1] = 0;
      }
      else if (v5 == 1)
      {  // event1
         eventTempVariablev1 = Duration_Sistole;
         Pressure_Sistole = Pressure_Sistole + S_1*(eventTempVariablev1 - S_2/Humoral_Diastole - S_3*(1 - K_1));
         Volume_Ventricular_Diastole = x[4];
         Humoral_Diastole = x[0];
         Stage_Sistole = 1;
         Duration_Sistole = 0;
         x[1] = 0;
      }
   }
   }
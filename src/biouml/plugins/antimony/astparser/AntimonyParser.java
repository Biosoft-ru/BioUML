/* AntimonyParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AntimonyParser.java */
package biouml.plugins.antimony.astparser;

import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AntimonyParser/*@bgen(jjtree)*/ implements AntimonyParserTreeConstants, AntimonyParserConstants
{/*@bgen(jjtree)*/
    protected JJTAntimonyParserState jjtree = new JJTAntimonyParserState();
    protected Logger log = Logger.getLogger(AntimonyParser.class.getName());
    private int algEqCount = 0;
    /** Default constructor. */
    public AntimonyParser()
    {
        this(new StringReader("0"));
    }

    public AstStart parse(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstStart astStart = Start();
        //postprocess for case when declarations are kept in outside model
        postprocess(astStart);
        return astStart;
    }

    private void postprocess(AstStart astStart)
    {
        if( astStart.hasOutsideModel() )
            astStart.createOutsideModelNode();
    }

    public AstEquation parseFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstEquation equation = parseFormule();
        return equation;
    }

    public AstUnitFormula parseUnitFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstUnitFormula equation = parseUnitFormule();
        return equation;
    }

    private void error_skipto(int kind)
    {
        ParseException e = generateParseException();
        log.log(Level.WARNING, e.toString());
        Token t;

        do
        {
            t = getNextToken();
        }
        while( t.kind != kind );
    }

    /***************************************************************
                   GRAMMAR START
    ***************************************************************/
    final public AstStart Start() throws ParseException
    {/*@bgen(jjtree) Start */
        AstStart jjtn000 = new AstStart(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            label_1: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case EOL:
                    case IMPORT:
                    case MODEL:
                    case FUNCTION:
                    case GLOBAL:
                    case SYMBOL_TYPE:
                    case UNIT:
                    case AND:
                    case OR:
                    case DELETE:
                    case CONST:
                    case VAR:
                    case $:
                    case EQUAL_ZERO:
                    case AT:
                    case PLUS:
                    case MINUS:
                    case NOT:
                    case SEMICOLON:
                    case ARROW:
                    case SYMBOL:
                    case SUBSYMBOL:
                    case PROPERTY:
                    case FLOATING_POINT_LITERAL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                astElement();
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            algEqCount = 0;
            {
                if( "" != null )
                    return jjtn000;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void astElement() throws ParseException
    {
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case IMPORT:
                {
                    importModel();
                    break;
                }
                case UNIT:
                {
                    unit();
                    break;
                }
                case MODEL:
                {
                    model();
                    break;
                }
                case FUNCTION:
                {
                    function();
                    break;
                }
                case EOL:
                case SYMBOL_TYPE:
                case AND:
                case OR:
                case DELETE:
                case CONST:
                case VAR:
                case $:
                case EQUAL_ZERO:
                case AT:
                case PLUS:
                case MINUS:
                case NOT:
                case SEMICOLON:
                case ARROW:
                case SYMBOL:
                case SUBSYMBOL:
                case PROPERTY:
                case FLOATING_POINT_LITERAL:
                {
                    declaration();
                    break;
                }
                case GLOBAL:
                {
                    globalVariable();
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        catch( ParseException e )
        {
            error_skipto(EOL);
        }
    }

    final public void importModel() throws ParseException
    {/*@bgen(jjtree) Import */
        AstImport jjtn000 = new AstImport(JJTIMPORT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(IMPORT);
            text();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void text() throws ParseException
    {/*@bgen(jjtree) Text */
        AstText jjtn000 = new AstText(JJTTEXT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(TEXT_STRING);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setText(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void function() throws ParseException
    {/*@bgen(jjtree) Function */
        AstFunction jjtn000 = new AstFunction(JJTFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(FUNCTION);
            functionSignature();
            label_2: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case EOL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                AstEOL jjtn001 = new AstEOL(JJTEOL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(EOL);
                }
                finally
                {
                    if( jjtc001 )
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
            }
            equation();
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case SEMICOLON:
                {
                    AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(SEMICOLON);
                    }
                    finally
                    {
                        if( jjtc002 )
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            label_3: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case EOL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_3;
                }
                AstEOL jjtn003 = new AstEOL(JJTEOL);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(EOL);
                }
                finally
                {
                    if( jjtc003 )
                    {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
            }
            jj_consume_token(END);
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void functionSignature() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            jj_consume_token(BRAKET_L);
            AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
                jjtn001.setElement(token.image);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case SYMBOL:
                {
                    jj_consume_token(SYMBOL);
                    AstSymbol jjtn002 = new AstSymbol(JJTSYMBOL);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                        jjtn002.setName(token.image);
                    }
                    finally
                    {
                        if( jjtc002 )
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    label_4: while( true )
                    {
                        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                        {
                            case COMMA:
                            {
                                ;
                                break;
                            }
                            default:
                                jj_la1[5] = jj_gen;
                                break label_4;
                        }
                        AstComma jjtn003 = new AstComma(JJTCOMMA);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtn003.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(COMMA);
                        }
                        finally
                        {
                            if( jjtc003 )
                            {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtn003.jjtSetLastToken(getToken(0));
                            }
                        }
                        jj_consume_token(SYMBOL);
                        AstSymbol jjtn004 = new AstSymbol(JJTSYMBOL);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtc004 = false;
                            jjtn004.jjtSetLastToken(getToken(0));
                            jjtn004.setName(token.image);
                        }
                        finally
                        {
                            if( jjtc004 )
                            {
                                jjtree.closeNodeScope(jjtn004, true);
                                jjtn004.jjtSetLastToken(getToken(0));
                            }
                        }
                    }
                    break;
                }
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
            jj_consume_token(BRAKET_R);
            AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
            try
            {
                jjtree.closeNodeScope(jjtn005, true);
                jjtc005 = false;
                jjtn005.jjtSetLastToken(getToken(0));
                jjtn005.setElement(token.image);
            }
            finally
            {
                if( jjtc005 )
                {
                    jjtree.closeNodeScope(jjtn005, true);
                    jjtn005.jjtSetLastToken(getToken(0));
                }
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void modelSignature() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case BRAKET_L:
                {
                    modelParameters();
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void mainModelSignature() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(STAR);
            jj_consume_token(SYMBOL);
            jjtn000.setName("*" + token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case BRAKET_L:
                {
                    modelParameters();
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void subModelSignature() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            modelParameters();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void modelParameters() throws ParseException
    {
        jj_consume_token(BRAKET_L);
        AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try
        {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
            jjtn001.setElement(token.image);
        }
        finally
        {
            if( jjtc001 )
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
        {
            case SYMBOL:
            case TRIANGULAR_BRACKET_L:
            case TRIANGULAR_BRACKET_R:
            {
                parametr();
                label_5: while( true )
                {
                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case COMMA:
                        {
                            ;
                            break;
                        }
                        default:
                            jj_la1[9] = jj_gen;
                            break label_5;
                    }
                    AstComma jjtn002 = new AstComma(JJTCOMMA);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(COMMA);
                    }
                    finally
                    {
                        if( jjtc002 )
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    parametr();
                }
                break;
            }
            default:
                jj_la1[10] = jj_gen;
                ;
        }
        jj_consume_token(BRAKET_R);
        AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
        try
        {
            jjtree.closeNodeScope(jjtn003, true);
            jjtc003 = false;
            jjtn003.jjtSetLastToken(getToken(0));
            jjtn003.setElement(token.image);
        }
        finally
        {
            if( jjtc003 )
            {
                jjtree.closeNodeScope(jjtn003, true);
                jjtn003.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void parametr() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        String portType = "";
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case TRIANGULAR_BRACKET_L:
                case TRIANGULAR_BRACKET_R:
                {
                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case TRIANGULAR_BRACKET_L:
                        {
                            jj_consume_token(TRIANGULAR_BRACKET_L);
                            break;
                        }
                        case TRIANGULAR_BRACKET_R:
                        {
                            jj_consume_token(TRIANGULAR_BRACKET_R);
                            break;
                        }
                        default:
                            jj_la1[11] = jj_gen;
                            jj_consume_token( -1);
                            throw new ParseException();
                    }
                    portType = token.image;
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    ;
            }
            jj_consume_token(SYMBOL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setName(portType + token.image);
            portType = "";
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void model() throws ParseException
    {/*@bgen(jjtree) Model */
        AstModel jjtn000 = new AstModel(JJTMODEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            try
            {
                jj_consume_token(MODEL);
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case SYMBOL:
                    {
                        modelSignature();
                        break;
                    }
                    case STAR:
                    {
                        mainModelSignature();
                        jjtn000.setTypeModel(AstModel.ModelType.MainModel);
                        break;
                    }
                    default:
                        jj_la1[13] = jj_gen;
                        jj_consume_token( -1);
                        throw new ParseException();
                }
                label_6: while( true )
                {
                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case EOL:
                        case SYMBOL_TYPE:
                        case AND:
                        case OR:
                        case DELETE:
                        case CONST:
                        case VAR:
                        case $:
                        case EQUAL_ZERO:
                        case AT:
                        case PLUS:
                        case MINUS:
                        case NOT:
                        case SEMICOLON:
                        case ARROW:
                        case SYMBOL:
                        case SUBSYMBOL:
                        case PROPERTY:
                        case FLOATING_POINT_LITERAL:
                        {
                            ;
                            break;
                        }
                        default:
                            jj_la1[14] = jj_gen;
                            break label_6;
                    }
                    declaration();
                }
                jj_consume_token(END);
            }
            catch( ParseException e )
            {
                error_skipto(EOL);
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void globalVariable() throws ParseException
    {/*@bgen(jjtree) Global */
        AstGlobal jjtn000 = new AstGlobal(JJTGLOBAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(GLOBAL);
            jjtn000.setFormat(token.image);
            AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(SYMBOL);
                jjtn001.setName(token.image);
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case AS:
                    {
                        as();
                        break;
                    }
                    default:
                        jj_la1[15] = jj_gen;
                        ;
                }
            }
            catch( Throwable jjte001 )
            {
                if( jjtc001 )
                {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte001 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte001;
                    }
                }
                if( jjte001 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte001;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte001;
                }
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void as() throws ParseException
    {/*@bgen(jjtree) As */
        AstAs jjtn000 = new AstAs(JJTAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(AS);
            AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(SYMBOL);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
                jjtn001.setName(token.image);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void declaration() throws ParseException
    {
        try
        {
            if( jj_2_1(3) )
            {
                reactionDefinitionsNoName();
            }
            else
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case AT:
                    {
                        eventNoName();
                        break;
                    }
                    default:
                        jj_la1[16] = jj_gen;
                        if( jj_2_2(3) )
                        {
                            symbol();
                        }
                        else
                        {
                            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                            {
                                case EQUAL_ZERO:
                                {
                                    algebraicEquation();
                                    break;
                                }
                                case CONST:
                                case VAR:
                                {
                                    varOrConst();
                                    break;
                                }
                                case SYMBOL_TYPE:
                                {
                                    symbolType();
                                    break;
                                }
                                case EOL:
                                {
                                    AstEOL jjtn001 = new AstEOL(JJTEOL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                    jjtn001.jjtSetFirstToken(getToken(1));
                                    try
                                    {
                                        jj_consume_token(EOL);
                                    }
                                    finally
                                    {
                                        if( jjtc001 )
                                        {
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtn001.jjtSetLastToken(getToken(0));
                                        }
                                    }
                                    break;
                                }
                                case DELETE:
                                {
                                    delete();
                                    break;
                                }
                                case PROPERTY:
                                {
                                    property();
                                    break;
                                }
                                case SEMICOLON:
                                {
                                    AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
                                    jjtn002.jjtSetFirstToken(getToken(1));
                                    try
                                    {
                                        jj_consume_token(SEMICOLON);
                                    }
                                    finally
                                    {
                                        if( jjtc002 )
                                        {
                                            jjtree.closeNodeScope(jjtn002, true);
                                            jjtn002.jjtSetLastToken(getToken(0));
                                        }
                                    }
                                    break;
                                }
                                default:
                                    jj_la1[17] = jj_gen;
                                    jj_consume_token( -1);
                                    throw new ParseException();
                            }
                        }
                }
            }
        }
        catch( ParseException e )
        {
            error_skipto(EOL);
        }
    }

    final public void property() throws ParseException
    {/*@bgen(jjtree) Property */
        AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(PROPERTY);
            jjtn000.setProperty(token.image);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            text();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void unit() throws ParseException
    {/*@bgen(jjtree) Unit */
        AstUnit jjtn000 = new AstUnit(JJTUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(UNIT);
            symbolElement();
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case EQUAL:
                {
                    unitFormula();
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void unitFormula() throws ParseException
    {
        AstEqual jjtn001 = new AstEqual(JJTEQUAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(EQUAL);
        }
        finally
        {
            if( jjtc001 )
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        AstUnitFormula jjtn002 = new AstUnitFormula(JJTUNITFORMULA);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtn002.jjtSetFirstToken(getToken(1));
        try
        {
            algebraicExpression();
        }
        catch( Throwable jjte002 )
        {
            if( jjtc002 )
            {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte002 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte002;
                }
            }
            if( jjte002 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte002;
                }
            }
            {
                if( true )
                    throw (Error)jjte002;
            }
        }
        finally
        {
            if( jjtc002 )
            {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void delete() throws ParseException
    {/*@bgen(jjtree) Delete */
        AstDelete jjtn000 = new AstDelete(JJTDELETE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(DELETE);
            subSymbolElement();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolType() throws ParseException
    {/*@bgen(jjtree) SymbolType */
        AstSymbolType jjtn000 = new AstSymbolType(JJTSYMBOLTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL_TYPE);
            jjtn000.setType(token.image);
            listOfSymbols();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void varOrConst() throws ParseException
    {/*@bgen(jjtree) VarOrConst */
        AstVarOrConst jjtn000 = new AstVarOrConst(JJTVARORCONST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case VAR:
                {
                    jj_consume_token(VAR);
                    break;
                }
                case CONST:
                {
                    jj_consume_token(CONST);
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            jjtn000.setType(token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case SYMBOL_TYPE:
                {
                    symbolType();
                    break;
                }
                case $:
                case SYMBOL:
                {
                    listOfSymbols();
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void listOfSymbols() throws ParseException
    {
        symbolElementWithIn();
        label_7: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case COMMA:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    break label_7;
            }
            AstComma jjtn001 = new AstComma(JJTCOMMA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COMMA);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            symbolElementWithIn();
        }
    }

    final public void in() throws ParseException
    {/*@bgen(jjtree) In */
        AstIn jjtn000 = new AstIn(JJTIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(IN);
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void algebraicEquation() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        algEqCount++;
        jjtn000.setName("A" + algEqCount);
        try
        {
            AstEqualZero jjtn001 = new AstEqualZero(JJTEQUALZERO);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL_ZERO);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            AstEquation jjtn002 = new AstEquation(JJTEQUATION);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                algebraicExpression();
            }
            catch( Throwable jjte002 )
            {
                if( jjtc002 )
                {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte002 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte002;
                    }
                }
                if( jjte002 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte002;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte002;
                }
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            jjtn000.setTypeDeclaration(AstSymbol.ALGEBRAIC);
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void algebraicExpression() throws ParseException
    {
        label_8: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case AND:
                case OR:
                case BRAKET_L:
                case PLUS:
                case MINUS:
                case SYMBOL:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    break label_8;
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case AND:
                case OR:
                case PLUS:
                case MINUS:
                case SYMBOL:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    algebraicFormulaElement();
                    break;
                }
                case BRAKET_L:
                {
                    algebraicExpressionInBrackets();
                    break;
                }
                default:
                    jj_la1[23] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
    }

    final public void algebraicExpressionInBrackets() throws ParseException
    {
        AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(BRAKET_L);
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
            jjtn001.setElement(token.image);
        }
        finally
        {
            if( jjtc001 )
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        label_9: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case AND:
                case OR:
                case BRAKET_L:
                case PLUS:
                case MINUS:
                case SYMBOL:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    break label_9;
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case BRAKET_L:
                {
                    algebraicExpressionInBrackets();
                    break;
                }
                case AND:
                case OR:
                case PLUS:
                case MINUS:
                case SYMBOL:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    algebraicFormulaElement();
                    break;
                }
                default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtn002.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(BRAKET_R);
            jjtree.closeNodeScope(jjtn002, true);
            jjtc002 = false;
            jjtn002.jjtSetLastToken(getToken(0));
            jjtn002.setElement(token.image);
        }
        finally
        {
            if( jjtc002 )
            {
                jjtree.closeNodeScope(jjtn002, true);
                jjtn002.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void algebraicFormulaElement() throws ParseException
    {/*@bgen(jjtree) RegularFormulaElement */
        AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case SYMBOL:
                {
                    jj_consume_token(SYMBOL);
                    jjtn000.setString(true);
                    break;
                }
                case STAR:
                {
                    jj_consume_token(STAR);
                    break;
                }
                case OPERATOR:
                {
                    jj_consume_token(OPERATOR);
                    break;
                }
                case AND:
                {
                    jj_consume_token(AND);
                    break;
                }
                case OR:
                {
                    jj_consume_token(OR);
                    break;
                }
                case PLUS:
                {
                    jj_consume_token(PLUS);
                    break;
                }
                case MINUS:
                {
                    jj_consume_token(MINUS);
                    break;
                }
                case FLOATING_POINT_LITERAL:
                {
                    jj_consume_token(FLOATING_POINT_LITERAL);
                    jjtn000.setNumber(true);
                    break;
                }
                default:
                    jj_la1[26] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setElement(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbol() throws ParseException
    {
        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
        {
            case SUBSYMBOL:
            {
                subSymbolSynchronization();
                break;
            }
            default:
                jj_la1[27] = jj_gen;
                if( jj_2_3(2) )
                {
                    symbolWithoutConstantPrefix();
                }
                else
                {
                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case $:
                        case SYMBOL:
                        {
                            symbolWithConstantPrefix();
                            break;
                        }
                        default:
                            jj_la1[28] = jj_gen;
                            jj_consume_token( -1);
                            throw new ParseException();
                    }
                }
        }
    }

    final public void subSymbolSynchronization() throws ParseException
    {/*@bgen(jjtree) SubSymbol */
        AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SUBSYMBOL);
            jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);
            jjtn000.setName(token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case STAR:
                {
                    connectionConversionFactor();
                    break;
                }
                default:
                    jj_la1[29] = jj_gen;
                    ;
            }
            synchronizations();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void connectionConversionFactor() throws ParseException
    {/*@bgen(jjtree) ConnectionConversionFactor */
        AstConnectionConversionFactor jjtn000 = new AstConnectionConversionFactor(JJTCONNECTIONCONVERSIONFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(STAR);
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolWithoutConstantPrefix() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            if( jj_2_4(2) )
            {
                AstColon jjtn001 = new AstColon(JJTCOLON);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(COLON);
                }
                finally
                {
                    if( jjtc001 )
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                event();
                jjtn000.setTypeDeclaration(AstSymbol.EVENT);
            }
            else if( jj_2_5(2) )
            {
                AstColon jjtn002 = new AstColon(JJTCOLON);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(COLON);
                }
                finally
                {
                    if( jjtc002 )
                    {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                constraint();
                jjtn000.setTypeDeclaration(AstSymbol.CONSTRAINT);
            }
            else if( jj_2_6(3) )
            {
                AstColon jjtn003 = new AstColon(JJTCOLON);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(COLON);
                }
                finally
                {
                    if( jjtc003 )
                    {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
                reactionDefinitions((AstSymbol)jjtn000);
            }
            else if( jj_2_7(2) )
            {
                assignmentRules();
                jjtn000.setTypeDeclaration(AstSymbol.RULE);
            }
            else if( jj_2_8(2) )
            {
                AstColon jjtn004 = new AstColon(JJTCOLON);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtn004.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(COLON);
                }
                finally
                {
                    if( jjtc004 )
                    {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtn004.jjtSetLastToken(getToken(0));
                    }
                }
                subDiagram();
                jjtn000.setTypeDeclaration(AstSymbol.SUBDIAGRAM);
            }
            else
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case RATE_EQUAL:
                    {
                        assignmentRate();
                        jjtn000.setTypeDeclaration(AstSymbol.RATE);
                        break;
                    }
                    default:
                        jj_la1[31] = jj_gen;
                        if( jj_2_9(2) )
                        {
                            fullName();
                            jjtn000.setTypeDeclaration(AstSymbol.DISPLAY_NAME);
                        }
                        else
                        {
                            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                            {
                                case SUBTYPE:
                                {
                                    subType();
                                    jjtn000.setTypeDeclaration(AstSymbol.SUBTYPE);
                                    break;
                                }
                                case HAS:
                                {
                                    hasUnit();
                                    jjtn000.setTypeDeclaration(AstSymbol.SET_UNIT);
                                    break;
                                }
                                case RELATIONSHIP_TYPE:
                                {
                                    databaseReference();
                                    jjtn000.setTypeDeclaration(AstSymbol.DATABASE_REFERENCE);
                                    break;
                                }
                                case IS:
                                case STAR:
                                {
                                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                                    {
                                        case STAR:
                                        {
                                            connectionConversionFactor();
                                            break;
                                        }
                                        default:
                                            jj_la1[30] = jj_gen;
                                            ;
                                    }
                                    synchronizations();
                                    jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);
                                    break;
                                }
                                default:
                                    jj_la1[32] = jj_gen;
                                    jj_consume_token( -1);
                                    throw new ParseException();
                            }
                        }
                }
            }
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolWithConstantPrefix() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                {
                    jj_consume_token($);
                    jjtn000.setConstantPrefix(true);
                    break;
                }
                default:
                    jj_la1[33] = jj_gen;
                    ;
            }
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case IN:
                {
                    symbolDeclarations();
                    jjtn000.setTypeDeclaration(AstSymbol.PARENT_DECLARATION);
                    break;
                }
                case EQUAL:
                {
                    initializations();
                    jjtn000.setTypeDeclaration(AstSymbol.INIT);
                    break;
                }
                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolDeclarations() throws ParseException
    {
        in();
    }

    final public void reactionDefinitions(AstSymbol declaration) throws ParseException
    {
        reactionTitle(declaration);
        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
        {
            case SEMICOLON:
            {
                AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(SEMICOLON);
                }
                finally
                {
                    if( jjtc001 )
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                equation();
                break;
            }
            default:
                jj_la1[35] = jj_gen;
                ;
        }
    }

    final public void reactionDefinitionsNoName() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            reactionDefinitions((AstSymbol)jjtn000);
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void initializations() throws ParseException
    {
        AstEqual jjtn001 = new AstEqual(JJTEQUAL);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(EQUAL);
        }
        finally
        {
            if( jjtc001 )
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        equation();
    }

    final public void assignmentRules() throws ParseException
    {
        colonEqual();
        equation();
    }

    final public void colonEqual() throws ParseException
    {/*@bgen(jjtree) ColonEqual */
        AstColonEqual jjtn000 = new AstColonEqual(JJTCOLONEQUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(COLON);
            jj_consume_token(EQUAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setTokenEqual(token);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void assignmentRate() throws ParseException
    {
        rateEqual();
        equation();
    }

    final public void rateEqual() throws ParseException
    {/*@bgen(jjtree) RateEqual */
        AstRateEqual jjtn000 = new AstRateEqual(JJTRATEEQUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(RATE_EQUAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setView(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void event() throws ParseException
    {
        at();
        label_10: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case COMMA:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[36] = jj_gen;
                    break label_10;
            }
            AstComma jjtn001 = new AstComma(JJTCOMMA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COMMA);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case PRIORITY:
                {
                    priority();
                    break;
                }
                case FROM_TRIGGER:
                {
                    useValuesFromTriggerTime();
                    break;
                }
                case PERSISTENT:
                {
                    persistent();
                    break;
                }
                case TRIGGER_INITIAL_VALUE:
                {
                    triggerInitialValue();
                    break;
                }
                default:
                    jj_la1[37] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        label_11: while( true )
        {
            AstColon jjtn002 = new AstColon(JJTCOLON);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COLON);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            label_12: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case EOL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[38] = jj_gen;
                        break label_12;
                }
                AstEOL jjtn003 = new AstEOL(JJTEOL);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(EOL);
                }
                finally
                {
                    if( jjtc003 )
                    {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
            }
            eventAssignment();
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case COLON:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[39] = jj_gen;
                    break label_11;
            }
        }
    }

    final public void at() throws ParseException
    {/*@bgen(jjtree) At */
        AstAt jjtn000 = new AstAt(JJTAT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(AT);
            equation();
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case AFTER:
                {
                    AstAfter jjtn001 = new AstAfter(JJTAFTER);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(AFTER);
                    }
                    finally
                    {
                        if( jjtc001 )
                        {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                        }
                    }
                    equation();
                    break;
                }
                default:
                    jj_la1[40] = jj_gen;
                    ;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void constraint() throws ParseException
    {
        assert_();
        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
        {
            case ELSE:
            {
                AstElse jjtn001 = new AstElse(JJTELSE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(ELSE);
                }
                finally
                {
                    if( jjtc001 )
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                text();
                break;
            }
            default:
                jj_la1[41] = jj_gen;
                ;
        }
    }

    final public void assert_() throws ParseException
    {/*@bgen(jjtree) Assert */
        AstAssert jjtn000 = new AstAssert(JJTASSERT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(ASSERT);
            equation();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void priority() throws ParseException
    {/*@bgen(jjtree) Priority */
        AstPriority jjtn000 = new AstPriority(JJTPRIORITY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(PRIORITY);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            equation();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void useValuesFromTriggerTime() throws ParseException
    {/*@bgen(jjtree) UseValuesFromTriggerTime */
        AstUseValuesFromTriggerTime jjtn000 = new AstUseValuesFromTriggerTime(JJTUSEVALUESFROMTRIGGERTIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(FROM_TRIGGER);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            jj_consume_token(TRUE_OR_FALSE);
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtn002.jjtSetLastToken(getToken(0));
                jjtn002.setElement(token.image);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void persistent() throws ParseException
    {/*@bgen(jjtree) Persistent */
        AstPersistent jjtn000 = new AstPersistent(JJTPERSISTENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(PERSISTENT);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            jj_consume_token(TRUE_OR_FALSE);
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtn002.jjtSetLastToken(getToken(0));
                jjtn002.setElement(token.image);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void triggerInitialValue() throws ParseException
    {/*@bgen(jjtree) TriggerInitialValue */
        AstTriggerInitialValue jjtn000 = new AstTriggerInitialValue(JJTTRIGGERINITIALVALUE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(TRIGGER_INITIAL_VALUE);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            jj_consume_token(TRUE_OR_FALSE);
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtn002.jjtSetLastToken(getToken(0));
                jjtn002.setElement(token.image);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void eventNoName() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        jjtn000.setTypeDeclaration(AstSymbol.EVENT);
        try
        {
            event();
            end();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void eventAssignment() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setTypeDeclaration(AstSymbol.INIT);
            jjtn000.setName(token.image);
            initializations();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void fullName() throws ParseException
    {/*@bgen(jjtree) Is */
        AstIs jjtn000 = new AstIs(JJTIS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(IS);
            text();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void subType() throws ParseException
    {/*@bgen(jjtree) Subtype */
        AstSubtype jjtn000 = new AstSubtype(JJTSUBTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SUBTYPE);
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void hasUnit() throws ParseException
    {/*@bgen(jjtree) Has */
        AstHas jjtn000 = new AstHas(JJTHAS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(HAS);
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void databaseReference() throws ParseException
    {
        relationshipType();
        text();
        label_13: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case COMMA:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[42] = jj_gen;
                    break label_13;
            }
            AstComma jjtn001 = new AstComma(JJTCOMMA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COMMA);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            text();
        }
    }

    final public void relationshipType() throws ParseException
    {/*@bgen(jjtree) RelationshipType */
        AstRelationshipType jjtn000 = new AstRelationshipType(JJTRELATIONSHIPTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(RELATIONSHIP_TYPE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setName(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void synchronizations() throws ParseException
    {/*@bgen(jjtree) Is */
        AstIs jjtn000 = new AstIs(JJTIS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(IS);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                case SUBSYMBOL:
                {
                    subSymbolElement();
                    break;
                }
                case SYMBOL:
                {
                    symbolElement();
                    break;
                }
                default:
                    jj_la1[43] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void reactionTitle(AstSymbol declaration) throws ParseException
    {/*@bgen(jjtree) ReactionTitle */
        AstReactionTitle jjtn000 = new AstReactionTitle(JJTREACTIONTITLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                case SYMBOL:
                case FLOATING_POINT_LITERAL:
                {
                    reactionReactant();
                    break;
                }
                default:
                    jj_la1[44] = jj_gen;
                    ;
            }
            label_14: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case AND:
                    case OR:
                    case PLUS:
                    case NOT:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[45] = jj_gen;
                        break label_14;
                }
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case PLUS:
                    {
                        AstPlus jjtn001 = new AstPlus(JJTPLUS);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(PLUS);
                        }
                        finally
                        {
                            if( jjtc001 )
                            {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                            }
                        }
                        jjtn000.initType(AstReactionTitle.STANDARD_REACTION);
                        break;
                    }
                    case AND:
                    {
                        AstAnd jjtn002 = new AstAnd(JJTAND);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(AND);
                        }
                        finally
                        {
                            if( jjtc002 )
                            {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtn002.jjtSetLastToken(getToken(0));
                            }
                        }
                        jjtn000.initType(AstReactionTitle.MOD_AND_REACTION);
                        break;
                    }
                    case OR:
                    {
                        AstOr jjtn003 = new AstOr(JJTOR);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtn003.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(OR);
                        }
                        finally
                        {
                            if( jjtc003 )
                            {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtn003.jjtSetLastToken(getToken(0));
                            }
                        }
                        jjtn000.initType(AstReactionTitle.MOD_OR_REACTION);
                        break;
                    }
                    case NOT:
                    {
                        AstNot jjtn004 = new AstNot(JJTNOT);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(NOT);
                        }
                        finally
                        {
                            if( jjtc004 )
                            {
                                jjtree.closeNodeScope(jjtn004, true);
                                jjtn004.jjtSetLastToken(getToken(0));
                            }
                        }
                        jjtn000.initType(AstReactionTitle.MOD_NOT_REACTION);
                        break;
                    }
                    default:
                        jj_la1[46] = jj_gen;
                        jj_consume_token( -1);
                        throw new ParseException();
                }
                reactionReactant();
            }
            reactionType(declaration);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                case SYMBOL:
                case FLOATING_POINT_LITERAL:
                {
                    reactionProduct();
                    break;
                }
                default:
                    jj_la1[47] = jj_gen;
                    ;
            }
            label_15: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case PLUS:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[48] = jj_gen;
                        break label_15;
                }
                AstPlus jjtn005 = new AstPlus(JJTPLUS);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtn005.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(PLUS);
                }
                finally
                {
                    if( jjtc005 )
                    {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtn005.jjtSetLastToken(getToken(0));
                    }
                }
                reactionProduct();
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void reactionReactant() throws ParseException
    {/*@bgen(jjtree) Reactant */
        AstReactant jjtn000 = new AstReactant(JJTREACTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case FLOATING_POINT_LITERAL:
                {
                    stoichiometry();
                    break;
                }
                default:
                    jj_la1[49] = jj_gen;
                    ;
            }
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void reactionProduct() throws ParseException
    {/*@bgen(jjtree) Product */
        AstProduct jjtn000 = new AstProduct(JJTPRODUCT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case FLOATING_POINT_LITERAL:
                {
                    stoichiometry();
                    break;
                }
                default:
                    jj_la1[50] = jj_gen;
                    ;
            }
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void stoichiometry() throws ParseException
    {/*@bgen(jjtree) Stoichiometry */
        AstStoichiometry jjtn000 = new AstStoichiometry(JJTSTOICHIOMETRY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(FLOATING_POINT_LITERAL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setStoichiometry(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolElement() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                {
                    jj_consume_token($);
                    jjtn000.setConstantPrefix(true);
                    break;
                }
                default:
                    jj_la1[51] = jj_gen;
                    ;
            }
            jj_consume_token(SYMBOL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setName(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void subSymbolElement() throws ParseException
    {/*@bgen(jjtree) SubSymbol */
        AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                {
                    jj_consume_token($);
                    jjtn000.setConstantPrefix(true);
                    break;
                }
                default:
                    jj_la1[52] = jj_gen;
                    ;
            }
            jj_consume_token(SUBSYMBOL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setName(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void symbolElementWithIn() throws ParseException
    {/*@bgen(jjtree) Symbol */
        AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case $:
                {
                    jj_consume_token($);
                    jjtn000.setConstantPrefix(true);
                    break;
                }
                default:
                    jj_la1[53] = jj_gen;
                    ;
            }
            jj_consume_token(SYMBOL);
            jjtn000.setName(token.image);
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case IN:
                {
                    in();
                    break;
                }
                default:
                    jj_la1[54] = jj_gen;
                    ;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void reactionType(AstSymbol declaration) throws ParseException
    {/*@bgen(jjtree) ReactionType */
        AstReactionType jjtn000 = new AstReactionType(JJTREACTIONTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case ARROW:
                {
                    jj_consume_token(ARROW);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    jjtn000.setType(token.image);
                    declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);
                    break;
                }
                case MINUS:
                {
                    jj_consume_token(MINUS);
                    switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case TRIANGULAR_BRACKET_R:
                        {
                            jj_consume_token(TRIANGULAR_BRACKET_R);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setType(token);
                            declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);
                            break;
                        }
                        case BRAKET_L:
                        {
                            jj_consume_token(BRAKET_L);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setType(token);
                            declaration.setTypeDeclaration(AstSymbol.REACTION_UNKNOWN_MODIFIER);
                            break;
                        }
                        case OR:
                        {
                            jj_consume_token(OR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setType(token);
                            declaration.setTypeDeclaration(AstSymbol.REACTION_INHIBITOR);
                            break;
                        }
                        case SYMBOL:
                        {
                            jj_consume_token(SYMBOL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.jjtSetLastToken(getToken(0));
                            jjtn000.setType(token);
                            declaration.setTypeDeclaration(AstSymbol.REACTION_ACTIVATOR);
                            break;
                        }
                        default:
                            jj_la1[55] = jj_gen;
                            jj_consume_token( -1);
                            throw new ParseException();
                    }
                    break;
                }
                default:
                    jj_la1[56] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void subDiagram() throws ParseException
    {
        subModelSignature();
        label_16: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case COMMA:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[57] = jj_gen;
                    break label_16;
            }
            AstComma jjtn001 = new AstComma(JJTCOMMA);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COMMA);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            conversionFactor();
        }
    }

    final public void conversionFactor() throws ParseException
    {/*@bgen(jjtree) ConversionFactor */
        AstConversionFactor jjtn000 = new AstConversionFactor(JJTCONVERSIONFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(SYMBOL);
            jjtn000.setFactor(token.image);
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(EQUAL);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            symbolElement();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void equation() throws ParseException
    {/*@bgen(jjtree) Equation */
        AstEquation jjtn000 = new AstEquation(JJTEQUATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            formula();
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void formula() throws ParseException
    {
        label_17: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case STANDART_FUNCTION:
                case POWER:
                case GEQ:
                case LEQ:
                case AND_WORD:
                case OR_WORD:
                case AND:
                case OR:
                case PIECEWISE:
                case TRUE_OR_FALSE:
                case BRAKET_L:
                case EQUAL:
                case PLUS:
                case MINUS:
                case NOT:
                case SYMBOL:
                case TRIANGULAR_BRACKET_L:
                case TRIANGULAR_BRACKET_R:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[58] = jj_gen;
                    break label_17;
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case STANDART_FUNCTION:
                case AND:
                case OR:
                case TRUE_OR_FALSE:
                case EQUAL:
                case PLUS:
                case MINUS:
                case NOT:
                case SYMBOL:
                case TRIANGULAR_BRACKET_L:
                case TRIANGULAR_BRACKET_R:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    regularFormulaElement();
                    break;
                }
                case BRAKET_L:
                {
                    formulaInBrackets();
                    break;
                }
                case POWER:
                case GEQ:
                case LEQ:
                case AND_WORD:
                case OR_WORD:
                {
                    specialFunction();
                    break;
                }
                case PIECEWISE:
                {
                    piecewiseAntimonyFormat();
                    break;
                }
                default:
                    jj_la1[59] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
    }

    final public void regularFormulaElement() throws ParseException
    {/*@bgen(jjtree) RegularFormulaElement */
        AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case SYMBOL:
                {
                    jj_consume_token(SYMBOL);
                    jjtn000.setString(true);
                    break;
                }
                case TRUE_OR_FALSE:
                {
                    jj_consume_token(TRUE_OR_FALSE);
                    break;
                }
                case STAR:
                {
                    jj_consume_token(STAR);
                    break;
                }
                case OPERATOR:
                {
                    jj_consume_token(OPERATOR);
                    break;
                }
                case TRIANGULAR_BRACKET_L:
                {
                    jj_consume_token(TRIANGULAR_BRACKET_L);
                    break;
                }
                case TRIANGULAR_BRACKET_R:
                {
                    jj_consume_token(TRIANGULAR_BRACKET_R);
                    break;
                }
                case STANDART_FUNCTION:
                {
                    jj_consume_token(STANDART_FUNCTION);
                    break;
                }
                case NOT:
                {
                    jj_consume_token(NOT);
                    break;
                }
                case EQUAL:
                {
                    jj_consume_token(EQUAL);
                    break;
                }
                case PLUS:
                {
                    jj_consume_token(PLUS);
                    break;
                }
                case MINUS:
                {
                    jj_consume_token(MINUS);
                    break;
                }
                case AND:
                {
                    jj_consume_token(AND);
                    break;
                }
                case OR:
                {
                    jj_consume_token(OR);
                    break;
                }
                case FLOATING_POINT_LITERAL:
                {
                    jj_consume_token(FLOATING_POINT_LITERAL);
                    jjtn000.setNumber(true);
                    break;
                }
                default:
                    jj_la1[60] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.setElement(token.image);
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void formulaInBrackets() throws ParseException
    {
        AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(BRAKET_L);
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
            jjtn001.jjtSetLastToken(getToken(0));
            jjtn001.setElement(token.image);
        }
        finally
        {
            if( jjtc001 )
            {
                jjtree.closeNodeScope(jjtn001, true);
                jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        label_18: while( true )
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case STANDART_FUNCTION:
                case POWER:
                case GEQ:
                case LEQ:
                case AND_WORD:
                case OR_WORD:
                case AND:
                case OR:
                case PIECEWISE:
                case TRUE_OR_FALSE:
                case BRAKET_L:
                case EQUAL:
                case PLUS:
                case MINUS:
                case NOT:
                case COMMA:
                case SYMBOL:
                case TRIANGULAR_BRACKET_L:
                case TRIANGULAR_BRACKET_R:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[61] = jj_gen;
                    break label_18;
            }
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case BRAKET_L:
                {
                    formulaInBrackets();
                    break;
                }
                case STANDART_FUNCTION:
                case AND:
                case OR:
                case TRUE_OR_FALSE:
                case EQUAL:
                case PLUS:
                case MINUS:
                case NOT:
                case SYMBOL:
                case TRIANGULAR_BRACKET_L:
                case TRIANGULAR_BRACKET_R:
                case OPERATOR:
                case STAR:
                case FLOATING_POINT_LITERAL:
                {
                    regularFormulaElement();
                    break;
                }
                case POWER:
                case GEQ:
                case LEQ:
                case AND_WORD:
                case OR_WORD:
                {
                    specialFunction();
                    break;
                }
                case PIECEWISE:
                {
                    piecewiseAntimonyFormat();
                    break;
                }
                case COMMA:
                {
                    AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(COMMA);
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                        jjtn002.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc002 )
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                default:
                    jj_la1[62] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
        }
        AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
        try
        {
            jj_consume_token(BRAKET_R);
            jjtree.closeNodeScope(jjtn003, true);
            jjtc003 = false;
            jjtn003.jjtSetLastToken(getToken(0));
            jjtn003.setElement(token.image);
        }
        finally
        {
            if( jjtc003 )
            {
                jjtree.closeNodeScope(jjtn003, true);
                jjtn003.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void specialFunction() throws ParseException
    {/*@bgen(jjtree) SpecialFormula */
        AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
            {
                case POWER:
                {
                    AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(POWER);
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                        jjtn001.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc001 )
                        {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                        }
                    }
                    jjtn000.setType(AstSpecialFormula.POWER);
                    break;
                }
                case AND_WORD:
                {
                    AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(AND_WORD);
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                        jjtn002.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc002 )
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    jjtn000.setType(AstSpecialFormula.AND);
                    break;
                }
                case OR_WORD:
                {
                    AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(OR_WORD);
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                        jjtn003.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc003 )
                        {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtn003.jjtSetLastToken(getToken(0));
                        }
                    }
                    jjtn000.setType(AstSpecialFormula.OR);
                    break;
                }
                case GEQ:
                {
                    AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                    jjtn004.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(GEQ);
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                        jjtn004.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc004 )
                        {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtn004.jjtSetLastToken(getToken(0));
                        }
                    }
                    jjtn000.setType(AstSpecialFormula.GEQ);
                    break;
                }
                case LEQ:
                {
                    AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc005 = true;
                    jjtree.openNodeScope(jjtn005);
                    jjtn005.jjtSetFirstToken(getToken(1));
                    try
                    {
                        jj_consume_token(LEQ);
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
                        jjtn005.jjtSetLastToken(getToken(0));
                        jjtn005.setElement(token.image);
                    }
                    finally
                    {
                        if( jjtc005 )
                        {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtn005.jjtSetLastToken(getToken(0));
                        }
                    }
                    jjtn000.setType(AstSpecialFormula.LEQ);
                    break;
                }
                default:
                    jj_la1[63] = jj_gen;
                    jj_consume_token( -1);
                    throw new ParseException();
            }
            AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
            jjtn006.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_L);
                jjtree.closeNodeScope(jjtn006, true);
                jjtc006 = false;
                jjtn006.jjtSetLastToken(getToken(0));
                jjtn006.setElement(token.image);
            }
            finally
            {
                if( jjtc006 )
                {
                    jjtree.closeNodeScope(jjtn006, true);
                    jjtn006.jjtSetLastToken(getToken(0));
                }
            }
            AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
            boolean jjtc007 = true;
            jjtree.openNodeScope(jjtn007);
            jjtn007.jjtSetFirstToken(getToken(1));
            try
            {
                formula();
            }
            catch( Throwable jjte007 )
            {
                if( jjtc007 )
                {
                    jjtree.clearNodeScope(jjtn007);
                    jjtc007 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte007 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte007;
                    }
                }
                if( jjte007 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte007;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte007;
                }
            }
            finally
            {
                if( jjtc007 )
                {
                    jjtree.closeNodeScope(jjtn007, true);
                    jjtn007.jjtSetLastToken(getToken(0));
                }
            }
            AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc008 = true;
            jjtree.openNodeScope(jjtn008);
            jjtn008.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(COMMA);
                jjtree.closeNodeScope(jjtn008, true);
                jjtc008 = false;
                jjtn008.jjtSetLastToken(getToken(0));
                jjtn008.setElement(token.image);
            }
            finally
            {
                if( jjtc008 )
                {
                    jjtree.closeNodeScope(jjtn008, true);
                    jjtn008.jjtSetLastToken(getToken(0));
                }
            }
            AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
            jjtn009.jjtSetFirstToken(getToken(1));
            try
            {
                formula();
            }
            catch( Throwable jjte009 )
            {
                if( jjtc009 )
                {
                    jjtree.clearNodeScope(jjtn009);
                    jjtc009 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte009 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte009;
                    }
                }
                if( jjte009 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte009;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte009;
                }
            }
            finally
            {
                if( jjtc009 )
                {
                    jjtree.closeNodeScope(jjtn009, true);
                    jjtn009.jjtSetLastToken(getToken(0));
                }
            }
            AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
            jjtn010.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_R);
                jjtree.closeNodeScope(jjtn010, true);
                jjtc010 = false;
                jjtn010.jjtSetLastToken(getToken(0));
                jjtn010.setElement(token.image);
            }
            finally
            {
                if( jjtc010 )
                {
                    jjtree.closeNodeScope(jjtn010, true);
                    jjtn010.jjtSetLastToken(getToken(0));
                }
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void piecewiseAntimonyFormat() throws ParseException
    {/*@bgen(jjtree) SpecialFormula */
        AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(PIECEWISE);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
                jjtn001.setElement(token.image);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            jjtn000.setType(AstSpecialFormula.PIECEWISE);
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_L);
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtn002.jjtSetLastToken(getToken(0));
                jjtn002.setElement(token.image);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
            try
            {
                formula();
            }
            catch( Throwable jjte003 )
            {
                if( jjtc003 )
                {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte003 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte003;
                    }
                }
                if( jjte003 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte003;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte003;
                }
            }
            finally
            {
                if( jjtc003 )
                {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtn003.jjtSetLastToken(getToken(0));
                }
            }
            label_19: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case COMMA:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[64] = jj_gen;
                        break label_19;
                }
                AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtn004.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(COMMA);
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                    jjtn004.setElement(token.image);
                }
                finally
                {
                    if( jjtc004 )
                    {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtn004.jjtSetLastToken(getToken(0));
                    }
                }
                AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtn005.jjtSetFirstToken(getToken(1));
                try
                {
                    formula();
                }
                catch( Throwable jjte005 )
                {
                    if( jjtc005 )
                    {
                        jjtree.clearNodeScope(jjtn005);
                        jjtc005 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if( jjte005 instanceof RuntimeException )
                    {
                        {
                            if( true )
                                throw (RuntimeException)jjte005;
                        }
                    }
                    if( jjte005 instanceof ParseException )
                    {
                        {
                            if( true )
                                throw (ParseException)jjte005;
                        }
                    }
                    {
                        if( true )
                            throw (Error)jjte005;
                    }
                }
                finally
                {
                    if( jjtc005 )
                    {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtn005.jjtSetLastToken(getToken(0));
                    }
                }
            }
            AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
            jjtn006.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_R);
                jjtree.closeNodeScope(jjtn006, true);
                jjtc006 = false;
                jjtn006.jjtSetLastToken(getToken(0));
                jjtn006.setElement(token.image);
            }
            finally
            {
                if( jjtc006 )
                {
                    jjtree.closeNodeScope(jjtn006, true);
                    jjtn006.jjtSetLastToken(getToken(0));
                }
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void end() throws ParseException
    {
        switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
        {
            case SEMICOLON:
            {
                AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(SEMICOLON);
                }
                finally
                {
                    if( jjtc001 )
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case EOL:
            {
                AstEOL jjtn002 = new AstEOL(JJTEOL);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(EOL);
                }
                finally
                {
                    if( jjtc002 )
                    {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case 0:
            {
                jj_consume_token(0);
                break;
            }
            default:
                jj_la1[65] = jj_gen;
                jj_consume_token( -1);
                throw new ParseException();
        }
    }

    /******************************************************* PARSE FORMULE *************************************************/
    final public

            AstEquation parseFormule() throws ParseException
    {/*@bgen(jjtree) Equation */
        AstEquation jjtn000 = new AstEquation(JJTEQUATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            label_20: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case STANDART_FUNCTION:
                    case AND:
                    case OR:
                    case PIECEWISE:
                    case TRUE_OR_FALSE:
                    case BRAKET_L:
                    case EQUAL:
                    case PLUS:
                    case MINUS:
                    case NOT:
                    case SYMBOL:
                    case TRIANGULAR_BRACKET_L:
                    case TRIANGULAR_BRACKET_R:
                    case OPERATOR:
                    case STAR:
                    case FLOATING_POINT_LITERAL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[66] = jj_gen;
                        break label_20;
                }
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case STANDART_FUNCTION:
                    case AND:
                    case OR:
                    case TRUE_OR_FALSE:
                    case EQUAL:
                    case PLUS:
                    case MINUS:
                    case NOT:
                    case SYMBOL:
                    case TRIANGULAR_BRACKET_L:
                    case TRIANGULAR_BRACKET_R:
                    case OPERATOR:
                    case STAR:
                    case FLOATING_POINT_LITERAL:
                    {
                        regularFormulaElement();
                        break;
                    }
                    case BRAKET_L:
                    {
                        formulaInBrackets();
                        break;
                    }
                    case PIECEWISE:
                    {
                        piecewiseStandartFormat();
                        break;
                    }
                    default:
                        jj_la1[67] = jj_gen;
                        jj_consume_token( -1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            {
                if( "" != null )
                    return jjtn000;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public AstUnitFormula parseUnitFormule() throws ParseException
    {/*@bgen(jjtree) UnitFormula */
        AstUnitFormula jjtn000 = new AstUnitFormula(JJTUNITFORMULA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            label_21: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case AND:
                    case OR:
                    case BRAKET_L:
                    case PLUS:
                    case MINUS:
                    case SYMBOL:
                    case OPERATOR:
                    case STAR:
                    case FLOATING_POINT_LITERAL:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[68] = jj_gen;
                        break label_21;
                }
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case AND:
                    case OR:
                    case PLUS:
                    case MINUS:
                    case SYMBOL:
                    case OPERATOR:
                    case STAR:
                    case FLOATING_POINT_LITERAL:
                    {
                        algebraicFormulaElement();
                        break;
                    }
                    case BRAKET_L:
                    {
                        algebraicExpressionInBrackets();
                        break;
                    }
                    default:
                        jj_la1[69] = jj_gen;
                        jj_consume_token( -1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            {
                if( "" != null )
                    return jjtn000;
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void piecewiseStandartFormat() throws ParseException
    {/*@bgen(jjtree) SpecialFormula */
        AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try
        {
            AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(PIECEWISE);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
                jjtn001.setElement(token.image);
            }
            finally
            {
                if( jjtc001 )
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                }
            }
            jjtn000.setType(AstSpecialFormula.PIECEWISE);
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_L);
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtn002.jjtSetLastToken(getToken(0));
                jjtn002.setElement(token.image);
            }
            finally
            {
                if( jjtc002 )
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                }
            }
            AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
            try
            {
                formula();
            }
            catch( Throwable jjte003 )
            {
                if( jjtc003 )
                {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte003 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte003;
                    }
                }
                if( jjte003 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte003;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte003;
                }
            }
            finally
            {
                if( jjtc003 )
                {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtn003.jjtSetLastToken(getToken(0));
                }
            }
            AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(ARROW);
                jjtree.closeNodeScope(jjtn004, true);
                jjtc004 = false;
                jjtn004.jjtSetLastToken(getToken(0));
                jjtn004.setElement(AstSpecialFormula.PIECEWISE_ARROW);
            }
            finally
            {
                if( jjtc004 )
                {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtn004.jjtSetLastToken(getToken(0));
                }
            }
            AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
            try
            {
                formula();
            }
            catch( Throwable jjte005 )
            {
                if( jjtc005 )
                {
                    jjtree.clearNodeScope(jjtn005);
                    jjtc005 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if( jjte005 instanceof RuntimeException )
                {
                    {
                        if( true )
                            throw (RuntimeException)jjte005;
                    }
                }
                if( jjte005 instanceof ParseException )
                {
                    {
                        if( true )
                            throw (ParseException)jjte005;
                    }
                }
                {
                    if( true )
                        throw (Error)jjte005;
                }
            }
            finally
            {
                if( jjtc005 )
                {
                    jjtree.closeNodeScope(jjtn005, true);
                    jjtn005.jjtSetLastToken(getToken(0));
                }
            }
            label_22: while( true )
            {
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case SEMICOLON:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[70] = jj_gen;
                        break label_22;
                }
                AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
                jjtn006.jjtSetFirstToken(getToken(1));
                try
                {
                    jj_consume_token(SEMICOLON);
                    jjtree.closeNodeScope(jjtn006, true);
                    jjtc006 = false;
                    jjtn006.jjtSetLastToken(getToken(0));
                    jjtn006.setElement(",");
                }
                finally
                {
                    if( jjtc006 )
                    {
                        jjtree.closeNodeScope(jjtn006, true);
                        jjtn006.jjtSetLastToken(getToken(0));
                    }
                }
                AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
                jjtn007.jjtSetFirstToken(getToken(1));
                try
                {
                    formula();
                }
                catch( Throwable jjte007 )
                {
                    if( jjtc007 )
                    {
                        jjtree.clearNodeScope(jjtn007);
                        jjtc007 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if( jjte007 instanceof RuntimeException )
                    {
                        {
                            if( true )
                                throw (RuntimeException)jjte007;
                        }
                    }
                    if( jjte007 instanceof ParseException )
                    {
                        {
                            if( true )
                                throw (ParseException)jjte007;
                        }
                    }
                    {
                        if( true )
                            throw (Error)jjte007;
                    }
                }
                finally
                {
                    if( jjtc007 )
                    {
                        jjtree.closeNodeScope(jjtn007, true);
                        jjtn007.jjtSetLastToken(getToken(0));
                    }
                }
                switch( ( jj_ntk == -1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case ARROW:
                    {
                        AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc008 = true;
                        jjtree.openNodeScope(jjtn008);
                        jjtn008.jjtSetFirstToken(getToken(1));
                        try
                        {
                            jj_consume_token(ARROW);
                            jjtree.closeNodeScope(jjtn008, true);
                            jjtc008 = false;
                            jjtn008.jjtSetLastToken(getToken(0));
                            jjtn008.setElement(AstSpecialFormula.PIECEWISE_ARROW);
                        }
                        finally
                        {
                            if( jjtc008 )
                            {
                                jjtree.closeNodeScope(jjtn008, true);
                                jjtn008.jjtSetLastToken(getToken(0));
                            }
                        }
                        AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
                        boolean jjtc009 = true;
                        jjtree.openNodeScope(jjtn009);
                        jjtn009.jjtSetFirstToken(getToken(1));
                        try
                        {
                            formula();
                        }
                        catch( Throwable jjte009 )
                        {
                            if( jjtc009 )
                            {
                                jjtree.clearNodeScope(jjtn009);
                                jjtc009 = false;
                            }
                            else
                            {
                                jjtree.popNode();
                            }
                            if( jjte009 instanceof RuntimeException )
                            {
                                {
                                    if( true )
                                        throw (RuntimeException)jjte009;
                                }
                            }
                            if( jjte009 instanceof ParseException )
                            {
                                {
                                    if( true )
                                        throw (ParseException)jjte009;
                                }
                            }
                            {
                                if( true )
                                    throw (Error)jjte009;
                            }
                        }
                        finally
                        {
                            if( jjtc009 )
                            {
                                jjtree.closeNodeScope(jjtn009, true);
                                jjtn009.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[71] = jj_gen;
                        ;
                }
            }
            AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc010 = true;
            jjtree.openNodeScope(jjtn010);
            jjtn010.jjtSetFirstToken(getToken(1));
            try
            {
                jj_consume_token(BRAKET_R);
                jjtree.closeNodeScope(jjtn010, true);
                jjtc010 = false;
                jjtn010.jjtSetLastToken(getToken(0));
                jjtn010.setElement(token.image);
            }
            finally
            {
                if( jjtc010 )
                {
                    jjtree.closeNodeScope(jjtn010, true);
                    jjtn010.jjtSetLastToken(getToken(0));
                }
            }
        }
        catch( Throwable jjte000 )
        {
            if( jjtc000 )
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if( jjte000 instanceof RuntimeException )
            {
                {
                    if( true )
                        throw (RuntimeException)jjte000;
                }
            }
            if( jjte000 instanceof ParseException )
            {
                {
                    if( true )
                        throw (ParseException)jjte000;
                }
            }
            {
                if( true )
                    throw (Error)jjte000;
            }
        }
        finally
        {
            if( jjtc000 )
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_1() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_2() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_3() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_4() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_5() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_6() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_7() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_8() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ( !jj_3_9() );
        }
        catch( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save(8, xla);
        }
    }

    private boolean jj_3R_subDiagram_937_9_30()
    {
        if( jj_3R_subModelSignature_353_5_45() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_927_17_88()
    {
        if( jj_scan_token(SYMBOL) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_923_17_87()
    {
        if( jj_scan_token(OR) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_919_17_86()
    {
        if( jj_scan_token(BRAKET_L) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_915_21_85()
    {
        if( jj_scan_token(TRIANGULAR_BRACKET_R) )
            return true;
        return false;
    }

    private boolean jj_3R_assert__736_9_41()
    {
        if( jj_scan_token(ASSERT) )
            return true;
        return false;
    }

    private boolean jj_3R_subModelSignature_353_5_45()
    {
        if( jj_scan_token(SYMBOL) )
            return true;
        return false;
    }

    private boolean jj_3R_constraint_724_9_27()
    {
        if( jj_3R_assert__736_9_41() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_914_3_76()
    {
        if( jj_scan_token(MINUS) )
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionType_915_21_85() )
        {
            jj_scanpos = xsp;
            if( jj_3R_reactionType_919_17_86() )
            {
                jj_scanpos = xsp;
                if( jj_3R_reactionType_923_17_87() )
                {
                    jj_scanpos = xsp;
                    if( jj_3R_reactionType_927_17_88() )
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_in_522_9_92()
    {
        if( jj_scan_token(IN) )
            return true;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_910_3_75()
    {
        if( jj_scan_token(ARROW) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionType_909_3_59()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionType_910_3_75() )
        {
            jj_scanpos = xsp;
            if( jj_3R_reactionType_914_3_76() )
                return true;
        }
        return false;
    }

    private boolean jj_3R_at_712_5_40()
    {
        if( jj_scan_token(AT) )
            return true;
        return false;
    }

    private boolean jj_3R_subSymbolElement_888_10_99()
    {
        if( jj_scan_token($) )
            return true;
        return false;
    }

    private boolean jj_3R_subSymbolElement_888_9_91()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_subSymbolElement_888_10_99() )
            jj_scanpos = xsp;
        if( jj_scan_token(SUBSYMBOL) )
            return true;
        return false;
    }

    private boolean jj_3R_end_1051_33_48()
    {
        if( jj_scan_token(EOL) )
            return true;
        return false;
    }

    private boolean jj_3R_event_697_3_26()
    {
        if( jj_3R_at_712_5_40() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolElement_880_10_94()
    {
        if( jj_scan_token($) )
            return true;
        return false;
    }

    private boolean jj_3R_symbolElement_880_9_84()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_symbolElement_880_10_94() )
            jj_scanpos = xsp;
        if( jj_scan_token(SYMBOL) )
            return true;
        return false;
    }

    private boolean jj_3R_rateEqual_691_3_67()
    {
        if( jj_scan_token(RATE_EQUAL) )
            return true;
        return false;
    }

    private boolean jj_3R_assignmentRate_684_5_51()
    {
        if( jj_3R_rateEqual_691_3_67() )
            return true;
        if( jj_3R_equation_956_9_62() )
            return true;
        return false;
    }

    private boolean jj_3R_stoichiometry_873_3_93()
    {
        if( jj_scan_token(FLOATING_POINT_LITERAL) )
            return true;
        return false;
    }

    private boolean jj_3R_text_297_5_46()
    {
        if( jj_scan_token(TEXT_STRING) )
            return true;
        return false;
    }

    private boolean jj_3R_colonEqual_678_3_44()
    {
        if( jj_scan_token(COLON) )
            return true;
        if( jj_scan_token(EQUAL) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionProduct_865_6_89()
    {
        if( jj_3R_stoichiometry_873_3_93() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionProduct_865_5_77()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionProduct_865_6_89() )
            jj_scanpos = xsp;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_assignmentRules_670_5_29()
    {
        if( jj_3R_colonEqual_678_3_44() )
            return true;
        return false;
    }

    private boolean jj_3R_end_1051_6_47()
    {
        if( jj_scan_token(SEMICOLON) )
            return true;
        return false;
    }

    private boolean jj_3R_end_1050_5_32()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_end_1051_6_47() )
        {
            jj_scanpos = xsp;
            if( jj_3R_end_1051_33_48() )
            {
                jj_scanpos = xsp;
                if( jj_scan_token(0) )
                    return true;
            }
        }
        return false;
    }

    private boolean jj_3R_reactionReactant_857_6_83()
    {
        if( jj_3R_stoichiometry_873_3_93() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionReactant_857_5_70()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionReactant_857_6_83() )
            jj_scanpos = xsp;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_initializations_663_5_82()
    {
        if( jj_scan_token(EQUAL) )
            return true;
        if( jj_3R_equation_956_9_62() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_848_9_61()
    {
        if( jj_scan_token(PLUS) )
            return true;
        if( jj_3R_reactionProduct_865_5_77() )
            return true;
        return false;
    }

    private boolean jj_3R_synchronizations_828_27_80()
    {
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_842_11_74()
    {
        if( jj_scan_token(NOT) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionDefinitionsNoName_656_5_23()
    {
        if( jj_3R_reactionDefinitions_646_5_28() )
            return true;
        if( jj_3R_end_1050_5_32() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_846_6_60()
    {
        if( jj_3R_reactionProduct_865_5_77() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_841_11_73()
    {
        if( jj_scan_token(OR) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_840_11_72()
    {
        if( jj_scan_token(AND) )
            return true;
        return false;
    }

    private boolean jj_3R_piecewiseAntimonyFormat_1034_5_103()
    {
        if( jj_scan_token(PIECEWISE) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionDefinitions_648_9_43()
    {
        if( jj_scan_token(SEMICOLON) )
            return true;
        if( jj_3R_equation_956_9_62() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_838_9_71()
    {
        if( jj_scan_token(PLUS) )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_837_9_58()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionTitle_838_9_71() )
        {
            jj_scanpos = xsp;
            if( jj_3R_reactionTitle_840_11_72() )
            {
                jj_scanpos = xsp;
                if( jj_3R_reactionTitle_841_11_73() )
                {
                    jj_scanpos = xsp;
                    if( jj_3R_reactionTitle_842_11_74() )
                        return true;
                }
            }
        }
        if( jj_3R_reactionReactant_857_5_70() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionDefinitions_646_5_28()
    {
        if( jj_3R_reactionTitle_835_5_42() )
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionDefinitions_648_9_43() )
            jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_1()
    {
        if( jj_3R_reactionDefinitionsNoName_656_5_23() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_835_6_57()
    {
        if( jj_3R_reactionReactant_857_5_70() )
            return true;
        return false;
    }

    private boolean jj_3R_reactionTitle_835_5_42()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_reactionTitle_835_6_57() )
            jj_scanpos = xsp;
        while( true )
        {
            xsp = jj_scanpos;
            if( jj_3R_reactionTitle_837_9_58() )
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if( jj_3R_reactionType_909_3_59() )
            return true;
        xsp = jj_scanpos;
        if( jj_3R_reactionTitle_846_6_60() )
            jj_scanpos = xsp;
        while( true )
        {
            xsp = jj_scanpos;
            if( jj_3R_reactionTitle_848_9_61() )
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_specialFunction_1017_10_110()
    {
        if( jj_scan_token(LEQ) )
            return true;
        return false;
    }

    private boolean jj_3R_symbolDeclarations_640_5_81()
    {
        if( jj_3R_in_522_9_92() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithConstantPrefix_632_11_66()
    {
        if( jj_3R_initializations_663_5_82() )
            return true;
        return false;
    }

    private boolean jj_3R_specialFunction_1014_10_109()
    {
        if( jj_scan_token(GEQ) )
            return true;
        return false;
    }

    private boolean jj_3R_synchronizations_828_5_79()
    {
        if( jj_3R_subSymbolElement_888_9_91() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithConstantPrefix_631_9_65()
    {
        if( jj_3R_symbolDeclarations_640_5_81() )
            return true;
        return false;
    }

    private boolean jj_3R_relationshipType_822_9_68()
    {
        if( jj_scan_token(RELATIONSHIP_TYPE) )
            return true;
        return false;
    }

    private boolean jj_3R_specialFunction_1011_10_108()
    {
        if( jj_scan_token(OR_WORD) )
            return true;
        return false;
    }

    private boolean jj_3R_synchronizations_827_3_56()
    {
        if( jj_scan_token(IS) )
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_synchronizations_828_5_79() )
        {
            jj_scanpos = xsp;
            if( jj_3R_synchronizations_828_27_80() )
                return true;
        }
        return false;
    }

    private boolean jj_3_2()
    {
        if( jj_3R_symbol_573_3_24() )
            return true;
        return false;
    }

    private boolean jj_3R_specialFunction_1008_10_107()
    {
        if( jj_scan_token(AND_WORD) )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithConstantPrefix_627_6_64()
    {
        if( jj_scan_token($) )
            return true;
        return false;
    }

    private boolean jj_3R_specialFunction_1005_9_106()
    {
        if( jj_scan_token(POWER) )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithConstantPrefix_627_5_50()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_symbolWithConstantPrefix_627_6_64() )
            jj_scanpos = xsp;
        if( jj_scan_token(SYMBOL) )
            return true;
        xsp = jj_scanpos;
        if( jj_3R_symbolWithConstantPrefix_631_9_65() )
        {
            jj_scanpos = xsp;
            if( jj_3R_symbolWithConstantPrefix_632_11_66() )
                return true;
        }
        if( jj_3R_end_1050_5_32() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_617_12_55()
    {
        if( jj_3R_connectionConversionFactor_596_5_69() )
            return true;
        return false;
    }

    private boolean jj_3R_databaseReference_811_9_54()
    {
        if( jj_3R_relationshipType_822_9_68() )
            return true;
        if( jj_3R_text_297_5_46() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_617_11_39()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_symbolWithoutConstantPrefix_617_12_55() )
            jj_scanpos = xsp;
        if( jj_3R_synchronizations_827_3_56() )
            return true;
        return false;
    }

    private boolean jj_3R_specialFunction_1004_5_102()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_specialFunction_1005_9_106() )
        {
            jj_scanpos = xsp;
            if( jj_3R_specialFunction_1008_10_107() )
            {
                jj_scanpos = xsp;
                if( jj_3R_specialFunction_1011_10_108() )
                {
                    jj_scanpos = xsp;
                    if( jj_3R_specialFunction_1014_10_109() )
                    {
                        jj_scanpos = xsp;
                        if( jj_3R_specialFunction_1017_10_110() )
                            return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_616_11_38()
    {
        if( jj_3R_databaseReference_811_9_54() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_615_11_37()
    {
        if( jj_3R_hasUnit_804_9_53() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_614_11_36()
    {
        if( jj_3R_subType_797_3_52() )
            return true;
        return false;
    }

    private boolean jj_3_9()
    {
        if( jj_3R_fullName_790_3_31() )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_612_11_35()
    {
        if( jj_3R_assignmentRate_684_5_51() )
            return true;
        return false;
    }

    private boolean jj_3_8()
    {
        if( jj_scan_token(COLON) )
            return true;
        if( jj_3R_subDiagram_937_9_30() )
            return true;
        return false;
    }

    private boolean jj_3R_hasUnit_804_9_53()
    {
        if( jj_scan_token(HAS) )
            return true;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3_7()
    {
        if( jj_3R_assignmentRules_670_5_29() )
            return true;
        return false;
    }

    private boolean jj_3_6()
    {
        if( jj_scan_token(COLON) )
            return true;
        if( jj_3R_reactionDefinitions_646_5_28() )
            return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if( jj_scan_token(COLON) )
            return true;
        if( jj_3R_constraint_724_9_27() )
            return true;
        return false;
    }

    private boolean jj_3_4()
    {
        if( jj_scan_token(COLON) )
            return true;
        if( jj_3R_event_697_3_26() )
            return true;
        return false;
    }

    private boolean jj_3R_regularFormulaElement_980_15_105()
    {
        if( jj_scan_token(FLOATING_POINT_LITERAL) )
            return true;
        return false;
    }

    private boolean jj_3R_formulaInBrackets_988_5_101()
    {
        if( jj_scan_token(BRAKET_L) )
            return true;
        return false;
    }

    private boolean jj_3R_symbolWithoutConstantPrefix_604_5_25()
    {
        if( jj_scan_token(SYMBOL) )
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3_4() )
        {
            jj_scanpos = xsp;
            if( jj_3_5() )
            {
                jj_scanpos = xsp;
                if( jj_3_6() )
                {
                    jj_scanpos = xsp;
                    if( jj_3_7() )
                    {
                        jj_scanpos = xsp;
                        if( jj_3_8() )
                        {
                            jj_scanpos = xsp;
                            if( jj_3R_symbolWithoutConstantPrefix_612_11_35() )
                            {
                                jj_scanpos = xsp;
                                if( jj_3_9() )
                                {
                                    jj_scanpos = xsp;
                                    if( jj_3R_symbolWithoutConstantPrefix_614_11_36() )
                                    {
                                        jj_scanpos = xsp;
                                        if( jj_3R_symbolWithoutConstantPrefix_615_11_37() )
                                        {
                                            jj_scanpos = xsp;
                                            if( jj_3R_symbolWithoutConstantPrefix_616_11_38() )
                                            {
                                                jj_scanpos = xsp;
                                                if( jj_3R_symbolWithoutConstantPrefix_617_11_39() )
                                                    return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if( jj_3R_end_1050_5_32() )
            return true;
        return false;
    }

    private boolean jj_3R_subType_797_3_52()
    {
        if( jj_scan_token(SUBTYPE) )
            return true;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_regularFormulaElement_975_13_104()
    {
        if( jj_scan_token(SYMBOL) )
            return true;
        return false;
    }

    private boolean jj_3R_fullName_790_3_31()
    {
        if( jj_scan_token(IS) )
            return true;
        if( jj_3R_text_297_5_46() )
            return true;
        return false;
    }

    private boolean jj_3R_connectionConversionFactor_596_5_69()
    {
        if( jj_scan_token(STAR) )
            return true;
        if( jj_3R_symbolElement_880_9_84() )
            return true;
        return false;
    }

    private boolean jj_3R_regularFormulaElement_974_5_100()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_regularFormulaElement_975_13_104() )
        {
            jj_scanpos = xsp;
            if( jj_scan_token(27) )
            {
                jj_scanpos = xsp;
                if( jj_scan_token(64) )
                {
                    jj_scanpos = xsp;
                    if( jj_scan_token(63) )
                    {
                        jj_scanpos = xsp;
                        if( jj_scan_token(61) )
                        {
                            jj_scanpos = xsp;
                            if( jj_scan_token(62) )
                            {
                                jj_scanpos = xsp;
                                if( jj_scan_token(16) )
                                {
                                    jj_scanpos = xsp;
                                    if( jj_scan_token(51) )
                                    {
                                        jj_scanpos = xsp;
                                        if( jj_scan_token(40) )
                                        {
                                            jj_scanpos = xsp;
                                            if( jj_scan_token(49) )
                                            {
                                                jj_scanpos = xsp;
                                                if( jj_scan_token(50) )
                                                {
                                                    jj_scanpos = xsp;
                                                    if( jj_scan_token(23) )
                                                    {
                                                        jj_scanpos = xsp;
                                                        if( jj_scan_token(24) )
                                                        {
                                                            jj_scanpos = xsp;
                                                            if( jj_3R_regularFormulaElement_980_15_105() )
                                                                return true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_formula_966_11_98()
    {
        if( jj_3R_piecewiseAntimonyFormat_1034_5_103() )
            return true;
        return false;
    }

    private boolean jj_3R_formula_965_11_97()
    {
        if( jj_3R_specialFunction_1004_5_102() )
            return true;
        return false;
    }

    private boolean jj_3R_subSymbolSynchronization_588_6_63()
    {
        if( jj_3R_connectionConversionFactor_596_5_69() )
            return true;
        return false;
    }

    private boolean jj_3R_formula_964_11_96()
    {
        if( jj_3R_formulaInBrackets_988_5_101() )
            return true;
        return false;
    }

    private boolean jj_3R_formula_963_9_95()
    {
        if( jj_3R_regularFormulaElement_974_5_100() )
            return true;
        return false;
    }

    private boolean jj_3R_formula_963_9_90()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_formula_963_9_95() )
        {
            jj_scanpos = xsp;
            if( jj_3R_formula_964_11_96() )
            {
                jj_scanpos = xsp;
                if( jj_3R_formula_965_11_97() )
                {
                    jj_scanpos = xsp;
                    if( jj_3R_formula_966_11_98() )
                        return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_subSymbolSynchronization_583_5_49()
    {
        if( jj_scan_token(SUBSYMBOL) )
            return true;
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_subSymbolSynchronization_588_6_63() )
            jj_scanpos = xsp;
        if( jj_3R_synchronizations_827_3_56() )
            return true;
        return false;
    }

    private boolean jj_3R_symbol_576_11_34()
    {
        if( jj_3R_symbolWithConstantPrefix_627_5_50() )
            return true;
        return false;
    }

    private boolean jj_3_3()
    {
        if( jj_3R_symbolWithoutConstantPrefix_604_5_25() )
            return true;
        return false;
    }

    private boolean jj_3R_formula_962_5_78()
    {
        Token xsp;
        while( true )
        {
            xsp = jj_scanpos;
            if( jj_3R_formula_963_9_90() )
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_symbol_574_9_33()
    {
        if( jj_3R_subSymbolSynchronization_583_5_49() )
            return true;
        return false;
    }

    private boolean jj_3R_equation_956_9_62()
    {
        if( jj_3R_formula_962_5_78() )
            return true;
        return false;
    }

    private boolean jj_3R_symbol_573_3_24()
    {
        Token xsp;
        xsp = jj_scanpos;
        if( jj_3R_symbol_574_9_33() )
        {
            jj_scanpos = xsp;
            if( jj_3_3() )
            {
                jj_scanpos = xsp;
                if( jj_3R_symbol_576_11_34() )
                    return true;
            }
        }
        return false;
    }

    /** Generated Token Manager. */
    public AntimonyParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[72];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }
    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[] {0x65806f80, 0x65806f80, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65802080, 0x1000, 0x0,
                0x64002080, 0x0, 0x60000000, 0x2000, 0x0, 0x1800000, 0x1800000, 0x1800000, 0x1800000, 0x1800000, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x28000, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1800000, 0x1800000, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x80000000, 0x1000000, 0x0, 0x0, 0xbfd0000, 0xbfd0000, 0x9810000, 0xbfd0000, 0xbfd0000, 0x7c0000, 0x0, 0x81,
                0xb810000, 0xb810000, 0x1800000, 0x1800000, 0x0, 0x0,};
    }
    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[] {0x3de0c01, 0x3de0c01, 0x0, 0x100000, 0x0, 0x200000, 0x800000, 0x20, 0x20, 0x200000, 0x60800000, 0x60000000,
                0x60000000, 0x800000, 0x3de0c01, 0x0, 0x800, 0x2100400, 0x100, 0x0, 0x800001, 0x200000, 0x80860020, 0x80860020, 0x80860020,
                0x80860020, 0x80860000, 0x1000000, 0x800001, 0x0, 0x0, 0x200, 0x18, 0x1, 0x100, 0x100000, 0x200000, 0x1e000, 0x0, 0x80,
                0x1000, 0x4, 0x200000, 0x1800001, 0x800001, 0xa0000, 0xa0000, 0x800001, 0x20000, 0x0, 0x0, 0x1, 0x1, 0x1, 0x0, 0x40800020,
                0x440000, 0x200000, 0xe08e0120, 0xe08e0120, 0xe08e0100, 0xe0ae0120, 0xe0ae0120, 0x0, 0x200000, 0x100000, 0xe08e0120,
                0xe08e0120, 0x80860020, 0x80860020, 0x100000, 0x400000,};
    }
    private static void jj_la1_init_2()
    {
        jj_la1_2 = new int[] {0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x5, 0x5, 0x5, 0x5, 0x5, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0,
                0x4, 0x0, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x5, 0x5, 0x5, 0x5, 0x0, 0x0, 0x0, 0x5, 0x5, 0x5, 0x5, 0x0,
                0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[9];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public AntimonyParser(java.io.InputStream stream)
    {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public AntimonyParser(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        }
        catch( java.io.UnsupportedEncodingException e )
        {
            throw new RuntimeException(e);
        }
        token_source = new AntimonyParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream)
    {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        }
        catch( java.io.UnsupportedEncodingException e )
        {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public AntimonyParser(java.io.Reader stream)
    {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new AntimonyParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream)
    {
        if( jj_input_stream == null )
        {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        }
        else
        {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if( token_source == null )
        {
            token_source = new AntimonyParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public AntimonyParser(AntimonyParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(AntimonyParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for( int i = 0; i < 72; i++ )
            jj_la1[i] = -1;
        for( int i = 0; i < jj_2_rtns.length; i++ )
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException
    {
        Token oldToken;
        if( ( oldToken = token ).next != null )
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if( token.kind == kind )
        {
            jj_gen++;
            if( ++jj_gc > 100 )
            {
                jj_gc = 0;
                for( int i = 0; i < jj_2_rtns.length; i++ )
                {
                    JJCalls c = jj_2_rtns[i];
                    while( c != null )
                    {
                        if( c.gen < jj_gen )
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings ( "serial" )
    static private final class LookaheadSuccess extends java.lang.Error
    {
        @Override
        public Throwable fillInStackTrace()
        {
            return this;
        }
    }
    static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
    private boolean jj_scan_token(int kind)
    {
        if( jj_scanpos == jj_lastpos )
        {
            jj_la--;
            if( jj_scanpos.next == null )
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if( jj_rescan )
        {
            int i = 0;
            Token tok = token;
            while( tok != null && tok != jj_scanpos )
            {
                i++;
                tok = tok.next;
            }
            if( tok != null )
                jj_add_error_token(kind, i);
        }
        if( jj_scanpos.kind != kind )
            return true;
        if( jj_la == 0 && jj_scanpos == jj_lastpos )
            throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    final public Token getNextToken()
    {
        if( token.next != null )
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index)
    {
        Token t = token;
        for( int i = 0; i < index; i++ )
        {
            if( t.next != null )
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f()
    {
        if( ( jj_nt = token.next ) == null )
            return ( jj_ntk = ( token.next = token_source.getNextToken() ).kind );
        else
            return ( jj_ntk = jj_nt.kind );
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if( pos >= 100 )
        {
            return;
        }

        if( pos == jj_endpos + 1 )
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if( jj_endpos != 0 )
        {
            jj_expentry = new int[jj_endpos];

            for( int i = 0; i < jj_endpos; i++ )
            {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for( int[] oldentry : jj_expentries )
            {
                if( oldentry.length == jj_expentry.length )
                {
                    boolean isMatched = true;

                    for( int i = 0; i < jj_expentry.length; i++ )
                    {
                        if( oldentry[i] != jj_expentry[i] )
                        {
                            isMatched = false;
                            break;
                        }

                    }
                    if( isMatched )
                    {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if( pos != 0 )
            {
                jj_lasttokens[ ( jj_endpos = pos ) - 1] = kind;
            }
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException()
    {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[67];
        if( jj_kind >= 0 )
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for( int i = 0; i < 72; i++ )
        {
            if( jj_la1[i] == jj_gen )
            {
                for( int j = 0; j < 32; j++ )
                {
                    if( ( jj_la1_0[i] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[j] = true;
                    }
                    if( ( jj_la1_1[i] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[32 + j] = true;
                    }
                    if( ( jj_la1_2[i] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for( int i = 0; i < 67; i++ )
        {
            if( la1tokens[i] )
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for( int i = 0; i < jj_expentries.size(); i++ )
        {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private boolean trace_enabled;

    /** Trace enabled. */
    final public boolean trace_enabled()
    {
        return trace_enabled;
    }

    /** Enable tracing. */
    final public void enable_tracing()
    {
    }

    /** Disable tracing. */
    final public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for( int i = 0; i < 9; i++ )
        {
            try
            {
                JJCalls p = jj_2_rtns[i];

                do
                {
                    if( p.gen > jj_gen )
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch( i )
                        {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                        }
                    }
                    p = p.next;
                }
                while( p != null );

            }
            catch( LookaheadSuccess ls )
            {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while( p.gen > jj_gen )
        {
            if( p.next == null )
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}

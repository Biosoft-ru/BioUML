/* Generated By:JJTree&JavaCC: Do not edit this line. AntimonyParserConstants.java */
package biouml.plugins.antimony.astparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AntimonyParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 7;
  /** RegularExpression Id. */
  int IMPORT = 8;
  /** RegularExpression Id. */
  int MODEL = 9;
  /** RegularExpression Id. */
  int FUNCTION = 10;
  /** RegularExpression Id. */
  int GLOBAL = 11;
  /** RegularExpression Id. */
  int AS = 12;
  /** RegularExpression Id. */
  int SYMBOL_TYPE = 13;
  /** RegularExpression Id. */
  int UNIT = 14;
  /** RegularExpression Id. */
  int SUBTYPE = 15;
  /** RegularExpression Id. */
  int STANDART_FUNCTION = 16;
  /** RegularExpression Id. */
  int RELATIONSHIP_TYPE = 17;
  /** RegularExpression Id. */
  int POWER = 18;
  /** RegularExpression Id. */
  int GEQ = 19;
  /** RegularExpression Id. */
  int LEQ = 20;
  /** RegularExpression Id. */
  int AND_WORD = 21;
  /** RegularExpression Id. */
  int OR_WORD = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int PIECEWISE = 25;
  /** RegularExpression Id. */
  int DELETE = 26;
  /** RegularExpression Id. */
  int TRUE_OR_FALSE = 27;
  /** RegularExpression Id. */
  int END = 28;
  /** RegularExpression Id. */
  int CONST = 29;
  /** RegularExpression Id. */
  int VAR = 30;
  /** RegularExpression Id. */
  int IN = 31;
  /** RegularExpression Id. */
  int $ = 32;
  /** RegularExpression Id. */
  int ASSERT = 33;
  /** RegularExpression Id. */
  int ELSE = 34;
  /** RegularExpression Id. */
  int IS = 35;
  /** RegularExpression Id. */
  int HAS = 36;
  /** RegularExpression Id. */
  int BRAKET_L = 37;
  /** RegularExpression Id. */
  int BRAKET_R = 38;
  /** RegularExpression Id. */
  int COLON = 39;
  /** RegularExpression Id. */
  int EQUAL = 40;
  /** RegularExpression Id. */
  int RATE_EQUAL = 41;
  /** RegularExpression Id. */
  int EQUAL_ZERO = 42;
  /** RegularExpression Id. */
  int AT = 43;
  /** RegularExpression Id. */
  int AFTER = 44;
  /** RegularExpression Id. */
  int PRIORITY = 45;
  /** RegularExpression Id. */
  int FROM_TRIGGER = 46;
  /** RegularExpression Id. */
  int PERSISTENT = 47;
  /** RegularExpression Id. */
  int TRIGGER_INITIAL_VALUE = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUS = 50;
  /** RegularExpression Id. */
  int NOT = 51;
  /** RegularExpression Id. */
  int SEMICOLON = 52;
  /** RegularExpression Id. */
  int COMMA = 53;
  /** RegularExpression Id. */
  int ARROW = 54;
  /** RegularExpression Id. */
  int SYMBOL = 55;
  /** RegularExpression Id. */
  int SUBSYMBOL = 56;
  /** RegularExpression Id. */
  int PROPERTY = 57;
  /** RegularExpression Id. */
  int TEXT_STRING = 58;
  /** RegularExpression Id. */
  int LETTER = 59;
  /** RegularExpression Id. */
  int DIGIT = 60;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_L = 61;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_R = 62;
  /** RegularExpression Id. */
  int OPERATOR = 63;
  /** RegularExpression Id. */
  int STAR = 64;
  /** RegularExpression Id. */
  int EXPONENT = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 6>",
    "<EOL>",
    "\"import\"",
    "<MODEL>",
    "\"function\"",
    "<GLOBAL>",
    "\"as\"",
    "<SYMBOL_TYPE>",
    "\"unit\"",
    "\"subtype\"",
    "<STANDART_FUNCTION>",
    "<RELATIONSHIP_TYPE>",
    "<POWER>",
    "\"geq\"",
    "\"leq\"",
    "\"and\"",
    "\"or\"",
    "\"&\"",
    "\"|\"",
    "\"piecewise\"",
    "\"delete\"",
    "<TRUE_OR_FALSE>",
    "\"end\"",
    "\"const\"",
    "\"var\"",
    "\"in\"",
    "\"$\"",
    "\"assert\"",
    "\"else\"",
    "\"is\"",
    "\"has\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"=\"",
    "<RATE_EQUAL>",
    "<EQUAL_ZERO>",
    "<AT>",
    "\"after\"",
    "\"priority\"",
    "\"fromTrigger\"",
    "\"persistent\"",
    "\"t0\"",
    "\"+\"",
    "\"-\"",
    "\"not\"",
    "\";\"",
    "\",\"",
    "<ARROW>",
    "<SYMBOL>",
    "<SUBSYMBOL>",
    "<PROPERTY>",
    "<TEXT_STRING>",
    "<LETTER>",
    "<DIGIT>",
    "\"<\"",
    "\">\"",
    "<OPERATOR>",
    "\"*\"",
    "<EXPONENT>",
    "<FLOATING_POINT_LITERAL>",
  };

}

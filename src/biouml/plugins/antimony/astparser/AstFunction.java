/* Generated By:JJTree: Do not edit this line. AstFunction.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser;

import java.util.ArrayList;
import java.util.Collection;

public class AstFunction extends SimpleNode
{
    public AstFunction(int id)
    {
        super(id);
    }

    public AstFunction(AntimonyParser p, int id)
    {
        super(p, id);
    }

    public String getFunctionName()
    {
        AstSymbol symbol = getNameSymbol();
        if( symbol != null )
            return symbol.getName();
        else
            return null;
    }

    public AstSymbol getNameSymbol()
    {
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstSymbol )
                return (AstSymbol)this.jjtGetChild(i);
        }
        return null;
    }

    public void setFunctionName(String functionName)
    {
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstSymbol )
            {
                ( (AstSymbol)this.jjtGetChild(i) ).setName(functionName);
                break;
            }
        }
    }

    public String toString()
    {
        return "function";
    }

    public AstEquation getEquation()
    {
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstEquation )
                return (AstEquation)this.jjtGetChild(i);
        }
        return null;
    }

    public void cleanParametrs()
    {
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstSymbol )
            {
                Node symbol = this.jjtGetChild(i);
                Collection<SimpleNode> willRemoved = new ArrayList<SimpleNode>();
                for( int j = 0; j < symbol.jjtGetNumChildren(); j++ )
                {
                    Node node = this.jjtGetChild(i).jjtGetChild(j);
                    if( ! ( node instanceof AstRegularFormulaElement ) )
                        willRemoved.add((SimpleNode)node);
                }
                for( SimpleNode node : willRemoved )
                    node.remove();
            }
        }
    }

    public void addParameter(String name)
    {
        int index = -1;
        AstSymbol symbol = null;
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstSymbol )
            {
                symbol = (AstSymbol)this.jjtGetChild(i);
                index = this.jjtGetChild(i).jjtGetNumChildren() - 1;
                break;
            }
        }
        Node astNode;
        if( name.equals(",") )
            astNode = new AstComma(AntimonyParser.JJTCOMMA);
        else
        {
            astNode = new AstSymbol(AntimonyParser.JJTSYMBOL);
            ( (AstSymbol)astNode ).setName(name);
        }
        if( symbol != null )
            symbol.addWithDisplacement(astNode, index);
    }

    public Collection<AstSymbol> getParameters()
    {
        Collection<AstSymbol> parameters = new ArrayList<AstSymbol>();
        AstSymbol symbol = (AstSymbol)this.jjtGetChild(0);
        for( int i = 1; i < symbol.jjtGetNumChildren(); i++ )
            if( symbol.jjtGetChild(i) instanceof AstSymbol )
                parameters.add((AstSymbol)symbol.jjtGetChild(i));
        return parameters;
    }
}
/* JavaCC - OriginalChecksum=43bcef2be98b41f8b204afbc64806c9c (do not edit this line) */

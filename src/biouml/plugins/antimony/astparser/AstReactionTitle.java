/* Generated By:JJTree: Do not edit this line. AstReactionTitle.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser;

import java.util.ArrayList;
import java.util.Collection;

public class AstReactionTitle extends SimpleNode
{
    private String type;

    public final static String STANDARD_REACTION = "standard reaction";
    public final static String MOD_AND_REACTION = "And";
    public final static String MOD_OR_REACTION = "Or";
    public final static String MOD_NOT_REACTION = "Not";

    public AstReactionTitle(int id)
    {
        super(id);
    }

    public AstReactionTitle(AntimonyParser p, int id)
    {
        super(p, id);
    }

    @Override
    public String toAntimonyString()
    {
        return "";
    }

    public Collection<AstReactant> getReactants()
    {
        Collection<AstReactant> reactants = new ArrayList<AstReactant>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstReactant )
                reactants.add((AstReactant)this.jjtGetChild(i));
        return reactants;
    }

    public Collection<AstProduct> getProducts()
    {
        Collection<AstProduct> reactants = new ArrayList<AstProduct>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstProduct )
                reactants.add((AstProduct)this.jjtGetChild(i));
        return reactants;
    }

    public AstReactionType getReactionType()
    {
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstReactionType )
                return (AstReactionType)this.jjtGetChild(i);
        return null;
    }

    public Collection<String> getReactantNames()
    {
        Collection<String> symbolsName = new ArrayList<String>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstReactant )
                symbolsName.add( ( (AstReactant)this.jjtGetChild(i) ).getName());

        return symbolsName;
    }

    public Collection<String> getProductNames()
    {
        Collection<String> symbolsName = new ArrayList<String>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstProduct )
                symbolsName.add( ( (AstReactant)this.jjtGetChild(i) ).getName());

        return symbolsName;
    }

    public String getType()
    {
        if( this.type == null )
            this.type = STANDARD_REACTION;
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
            if( this.jjtGetChild(i) instanceof AstFormulaElement )
            {
                AstFormulaElement elem = (AstFormulaElement)this.jjtGetChild(i);
                switch( type )
                {
                    case MOD_AND_REACTION:
                        elem = new AstAnd(AntimonyParser.JJTAND);
                        break;
                    case MOD_OR_REACTION:
                        elem = new AstOr(AntimonyParser.JJTOR);
                        break;
                    case MOD_NOT_REACTION:
                        elem = new AstNot(AntimonyParser.JJTNOT);
                        break;
                }
                //AntimonyAstCreator.createSpace(elem);
                this.jjtAddChild(elem, i);
            }
    }


    protected void initType(String type) throws ParseException
    {
        if( this.type == null )
            this.type = type;
        else if( this.type == type )
            return;
        else
            throw new ParseException("All reactants have to be connected by the same operator.");

    }
}
/* JavaCC - OriginalChecksum=1401f801ba9840ac0275e9782a456bd1 (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. AstSymbol.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser;

public class AstSymbol extends SimpleNode
{
    public static final String PARENT_DECLARATION = "Symbol declaration";
    public static final String REACTION_DEFINITION = "Reaction definition";
    public static final String REACTION_UNKNOWN_MODIFIER = "Unknown modifier";
    public static final String REACTION_INHIBITOR = "Inhibitor";
    public static final String REACTION_ACTIVATOR = "Activator";
    public static final String INIT = "Initialization";
    public static final String RULE = "Assignment_rule";
    public static final String RATE = "Rate_rule";
    public static final String ALGEBRAIC = "Algebraic_equation";
    public static final String EVENT = "Event";
    public static final String CONSTRAINT = "Constraint";
    public static final String DISPLAY_NAME = "Display name";
    public static final String SET_UNIT = "Set unit";
    public static final String SUBDIAGRAM = "Subdiagram";
    public static final String SUBTYPE = "Subtype";
    public static final String SYNCHRONIZATIONS = "Synchronizations";
    public static final String DATABASE_REFERENCE = "Database Reference";

    public static final String CONSTANT_PREFIX = "$";
    public static final String INPUT_PORT_TYPE_PREFIX = ">";
    public static final String OUTPUT_PORT_TYPE_PREFIX = "<";

    public AstSymbol(int id)
    {
        super(id);
    }

    public AstSymbol(AntimonyParser p, int id)
    {
        super(p, id);
    }

    protected String name;
    protected String declarationType;

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        if( name.startsWith(INPUT_PORT_TYPE_PREFIX) )
        {
            portTypePrefix = INPUT_PORT_TYPE_PREFIX;
            name = name.substring(1);
        }
        else if( name.startsWith(OUTPUT_PORT_TYPE_PREFIX) )
        {
            portTypePrefix = OUTPUT_PORT_TYPE_PREFIX;
            name = name.substring(1);
        }
        this.name = name;
    }

    @Override
    public String toAntimonyString()
    {
        if( this.name == null || this.getDeclarationType() == AstSymbol.ALGEBRAIC )
            return "";

        String name = this.name;
        if( constantPrefix )
            name = CONSTANT_PREFIX + name;
        else
            name = portTypePrefix + name;
        return name;
    }

    @Override
    public String toString()
    {
        if( declarationType == null )
            return name;
        return declarationType + ": " + name;
    }

    public String getDeclarationType()
    {
        return declarationType;
    }

    public void setTypeDeclaration(String type)
    {
        this.declarationType = type;
    }

    public Node[] getAllChildren()
    {
        return children;
    }

    private boolean constantPrefix = false;
    private String portTypePrefix = "";

    public String getPortType()
    {
        if( portTypePrefix.equals(AstSymbol.INPUT_PORT_TYPE_PREFIX) )
            return "input";
        if( portTypePrefix.equals(AstSymbol.OUTPUT_PORT_TYPE_PREFIX) )
            return "output";
        return "contact";
    }

    public void setConstantPrefix(boolean isConst)
    {
        constantPrefix = isConst;
    }

    public boolean isConstantPrefix()
    {
        return constantPrefix;
    }

    /**
     * get full chain of names for element from subDiagram
     * @return
     */
    public String[] getChainNames()
    {
        String[] arrayNames = {name};
        return arrayNames;
    }

    /**
     *  get only last name from chain of names
     * @return
     */
    public String getNameInSubDiagram()
    {
        return name;
    }
}
/* JavaCC - OriginalChecksum=c235e09cf52cb6ac914dae7ff78b7a3d (do not edit this line) */

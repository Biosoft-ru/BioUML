/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser;

public class SimpleNode implements Node
{

    protected Node parent;
    protected Node[] children;
    protected int id;
    protected Object value;
    protected AntimonyParser parser;
    protected Token firstToken;
    protected Token lastToken;

    public SimpleNode(int i)
    {
        id = i;
    }

    public SimpleNode(AntimonyParser p, int i)
    {
        this(i);
        parser = p;
    }

    public void jjtOpen()
    {
    }

    public void jjtClose()
    {
    }

    public void jjtSetParent(Node n)
    {
        parent = n;
    }
    public Node jjtGetParent()
    {
        return parent;
    }

    public void jjtAddChild(Node n, int i)
    {
        if( children == null )
        {
            children = new Node[i + 1];
        }
        else if( i >= children.length )
        {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i)
    {
        if( i < 0 || i >= this.jjtGetNumChildren() )
            return null;
        return children[i];
    }

    public int jjtGetNumChildren()
    {
        return ( children == null ) ? 0 : children.length;
    }

    public void jjtSetValue(Object value)
    {
        this.value = value;
    }
    public Object jjtGetValue()
    {
        return value;
    }

    public Token jjtGetFirstToken()
    {
        return firstToken;
    }
    public void jjtSetFirstToken(Token token)
    {
        this.firstToken = token;
    }
    public Token jjtGetLastToken()
    {
        return lastToken;
    }
    public void jjtSetLastToken(Token token)
    {
        this.lastToken = token;
    }


    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */

    public String toString()
    {
        return AntimonyParserTreeConstants.jjtNodeName[id];
    }
    public String toString(String prefix)
    {
        return prefix + toString();
    }

    /* Override this method if you want to customize how the node dumps
       out its children. */

    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        if( children != null )
        {
            for( int i = 0; i < children.length; ++i )
            {
                SimpleNode n = (SimpleNode)children[i];
                if( n != null )
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    /** Stroes dump message in the specified string buffer. */
    public void dump(StringBuffer msg, String prefix)
    {
        if( jjtGetFirstToken() != null && jjtGetFirstToken().specialToken != null )
        {
            msg.append(prefix + "(" + jjtGetFirstToken().specialToken + ")");
            msg.append("\r\n");
        }
        msg.append(toString(prefix));
        msg.append("\r\n");
        if( children != null )
        {
            prefix += "  ";
            for( int i = 0; i < children.length; ++i )
            {
                SimpleNode n = (SimpleNode)children[i];
                if( n != null )
                    n.dump(msg, prefix);
            }
        }
    }

    public String toAntimonyString()
    {
        return toString();
    }

    public void removeChild(int i)
    {
        int n = children.length;
        if( i < 0 || i >= n )
            return;
        Node[] newChildren = new Node[n - 1];
        System.arraycopy(children, 0, newChildren, 0, i);
        System.arraycopy(children, i + 1, newChildren, i, n - 1 - i);
        children = newChildren;
    }

    public void addWithDisplacement(Node child, int i)
    {
        if( i < 0 )
            return;
        if( children == null || i >= children.length )
        {
            jjtAddChild(child, i);
            child.jjtSetParent(this);
            return;
        }
        int n = children.length;
        Node[] newChildren = new Node[n + 1];
        System.arraycopy(children, 0, newChildren, 0, i);
        System.arraycopy(children, i, newChildren, i + 1, n - i);
        newChildren[i] = child;
        children = newChildren;
        child.jjtSetParent(this);
    }

    public int remove()
    {
        biouml.plugins.antimony.astparser.Node parent = this.jjtGetParent();
        int index = parent.findIndex(this);
        parent.removeChild(index);
        return index;
    }


    public int findIndex(Node node)
    {
        for( int i = 0; i < children.length; i++ )
        {
            if( children[i] != null && children[i].equals(node) )
                return i;
        }
        return -1;
    }

    public void addAsLast(Node child)
    {
        this.jjtAddChild(child, this.jjtGetNumChildren());
        child.jjtSetParent(this);
    }

    public void setChildren(Node[] children)
    {
        this.children = children;
    }

    public Node[] getChildren()
    {
        return this.children;
    }

    protected boolean isHighlight = false;

    public boolean isHighlight()
    {
        return isHighlight;
    }

    public void setHighlight(boolean isHighlight)
    {
        this.isHighlight = isHighlight;
    }

}

/* JavaCC - OriginalChecksum=b17c9c5263b44a51b449cb921a3094b3 (do not edit this line) */

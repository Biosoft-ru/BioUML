/* AntimonyNotationParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. AntimonyNotationParser.java */
package biouml.plugins.antimony.astparser_v2;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import biouml.plugins.antimony.AntimonyAnnotationImporter;
import java.util.Stack;

public class AntimonyNotationParser extends Parser/*@bgen(jjtree)*/implements AntimonyNotationParserTreeConstants, AntimonyNotationParserConstants {/*@bgen(jjtree)*/
  protected JJTAntimonyNotationParserState jjtree = new JJTAntimonyNotationParserState();protected Logger log = Logger.getLogger(AntimonyNotationParser.class.getName());
    private int algEqCount = 0;
    /** Default constructor. */
    public AntimonyNotationParser()
    {
        this (new StringReader("0"));
    }

    public AstStart parse(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstStart astStart = Start();
        //postprocess for case when declarations are kept in outside model
        postprocess(astStart);
        return astStart;
    }

    private void postprocess(AstStart astStart)
    {
        if(astStart.hasOutsideModel())
            astStart.createOutsideModelNode();
    }

    public AstEquation parseFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstEquation equation = parseFormule();
        return equation;
    }

    public AstUnitFormula parseUnitFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstUnitFormula equation = parseUnitFormule();
        return equation;
    }

    private void parseAnnotation(AstImportAnnotation node)
    {
        try
        {
                AntimonyAnnotationImporter.addAnnotation(node);
        }
        catch (Exception e)
        {
                log.log(Level.SEVERE, e.getMessage());
        }
    }

    private void error_skipto(int kind) {
          ParseException e = generateParseException();
          log.log(Level.WARNING, e.toString());
          Token t;

          do {
            t = getNextToken();
          }
          while (t.kind != kind);
        }

/***************************************************************
                   GRAMMAR START
***************************************************************/
  final public AstStart Start() throws ParseException {/*@bgen(jjtree) Start */
  AstStart jjtn000 = new AstStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:
        case IMPORT:
        case MODEL:
        case FUNCTION:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case AND:
        case OR:
        case DELETE:
        case CONST:
        case VAR:
        case IN:
        case $:
        case SUBSTANCE_ONLY:
        case IS:
        case HAS:
        case EQUAL_ZERO:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case PLUS:
        case MINUS:
        case NOT:
        case SEMICOLON:
        case ARROW:
        case AT_SYM:
        case SUBSYMBOL:
        case SYMBOL:
        case FLOATING_POINT_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        astElement();
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
algEqCount = 0;
        {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void astElement() throws ParseException {AstImportAnnotation imp;
    try {
      if (jj_2_1(2)) {
        importModel();
      } else if (jj_2_2(2)) {
        imp = importAnnotation();
parseAnnotation(imp);
      } else if (jj_2_3(3)) {
        unit();
      } else if (jj_2_4(3)) {
        model();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:{
          function();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          if (jj_2_5(3)) {
            declaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case GLOBAL:{
              globalVariable();
              break;
              }
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
error_skipto(EOL);
    }
}

  final public void importModel() throws ParseException {/*@bgen(jjtree) Import */
  AstImport jjtn000 = new AstImport(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPORT);
      text();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void text() throws ParseException {/*@bgen(jjtree) Text */
  AstText jjtn000 = new AstText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TEXT_STRING);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(token.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void function() throws ParseException {/*@bgen(jjtree) Function */
  AstFunction jjtn000 = new AstFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FUNCTION);
      functionSignature();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
AstEOL jjtn001 = new AstEOL(JJTEOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
        }
      }
      equation();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(SEMICOLON);
        } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
AstEOL jjtn003 = new AstEOL(JJTEOL);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void functionSignature() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setName(token.image);
      jj_consume_token(BRAKET_L);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:{
        symbolName();
AstSymbol jjtn002 = new AstSymbol(JJTSYMBOL);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                         jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setName(token.image);
        } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
AstComma jjtn003 = new AstComma(JJTCOMMA);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(COMMA);
          } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
          }
          symbolName();
AstSymbol jjtn004 = new AstSymbol(JJTSYMBOL);
                                     boolean jjtc004 = true;
                                     jjtree.openNodeScope(jjtn004);
                                     jjtn004.jjtSetFirstToken(getToken(1));
          try {
jjtree.closeNodeScope(jjtn004, true);
                                     jjtc004 = false;
                                     jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setName(token.image);
          } finally {
if (jjtc004) {
                                       jjtree.closeNodeScope(jjtn004, true);
                                       jjtn004.jjtSetLastToken(getToken(0));
                                     }
          }
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(BRAKET_R);
AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                   jjtn005.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                   jjtn005.jjtSetLastToken(getToken(0));
jjtn005.setElement(token.image);
      } finally {
if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtn005.jjtSetLastToken(getToken(0));
                   }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void modelSignature() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKET_L:{
        modelParameters();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void mainModelSignature() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STAR);
      symbolName();
jjtn000.setName("*" + token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKET_L:{
        modelParameters();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void subModelSignature() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setName(token.image);
      modelParameters();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void modelParameters() throws ParseException {
    jj_consume_token(BRAKET_L);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
    try {
jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
    } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPORT:
    case MODEL:
    case GLOBAL:
    case AS:
    case SYMBOL_TYPE:
    case COMPARTMENT:
    case UNIT:
    case SUBTYPE:
    case RELATIONSHIP_TYPE:
    case CONST:
    case VAR:
    case IN:
    case IS:
    case HAS:
    case AT:
    case PRIORITY:
    case FROM_TRIGGER:
    case TRIGGER_INITIAL_VALUE:
    case SYMBOL:
    case TRIANGULAR_BRACKET_L:
    case TRIANGULAR_BRACKET_R:{
      parametr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
        }
        parametr();
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(BRAKET_R);
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
    try {
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
    } finally {
if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
    }
}

  final public void parametr() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String portType = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRIANGULAR_BRACKET_L:{
          jj_consume_token(TRIANGULAR_BRACKET_L);
          break;
          }
        case TRIANGULAR_BRACKET_R:{
          jj_consume_token(TRIANGULAR_BRACKET_R);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
portType = token.image;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      symbolName();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(portType + token.image);
    portType = "";
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void model() throws ParseException {/*@bgen(jjtree) Model */
  AstModel jjtn000 = new AstModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(MODEL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case SYMBOL:{
          modelSignature();
          break;
          }
        case STAR:{
          mainModelSignature();
jjtn000.setTypeModel(AstModel.ModelType.MainModel);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:
          case IMPORT:
          case MODEL:
          case GLOBAL:
          case AS:
          case SYMBOL_TYPE:
          case COMPARTMENT:
          case UNIT:
          case SUBTYPE:
          case RELATIONSHIP_TYPE:
          case AND:
          case OR:
          case DELETE:
          case CONST:
          case VAR:
          case IN:
          case $:
          case SUBSTANCE_ONLY:
          case IS:
          case HAS:
          case EQUAL_ZERO:
          case AT:
          case PRIORITY:
          case FROM_TRIGGER:
          case TRIGGER_INITIAL_VALUE:
          case PLUS:
          case MINUS:
          case NOT:
          case SEMICOLON:
          case ARROW:
          case AT_SYM:
          case SUBSYMBOL:
          case SYMBOL:
          case FLOATING_POINT_LITERAL:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
          declaration();
        }
        jj_consume_token(END);
      } catch (ParseException e) {
error_skipto(EOL);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void globalVariable() throws ParseException {/*@bgen(jjtree) Global */
  AstGlobal jjtn000 = new AstGlobal(JJTGLOBAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GLOBAL);
jjtn000.setFormat(token.image);
AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        symbolName();
jjtn001.setName(token.image);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          as();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void as() throws ParseException {/*@bgen(jjtree) As */
  AstAs jjtn000 = new AstAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AS);
AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        symbolName();
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setName(token.image);
      } catch (Throwable jjte001) {
if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void declaration() throws ParseException {
    try {
      if (jj_2_6(3)) {
        model();
      } else if (jj_2_7(3)) {
        reactionDefinitionsNoName();
      } else if (jj_2_8(3)) {
        eventNoName();
      } else if (jj_2_9(3)) {
        symbol();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL_ZERO:{
          algebraicEquation();
          break;
          }
        case CONST:
        case VAR:{
          varOrConst();
          break;
          }
        case SYMBOL_TYPE:{
          symbolType();
          break;
          }
        case SUBSTANCE_ONLY:{
          substanceOnly();
          break;
          }
        case COMPARTMENT:{
          compartment();
          break;
          }
        case EOL:{
AstEOL jjtn001 = new AstEOL(JJTEOL);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtn001.jjtSetLastToken(getToken(0));
             }
          }
          break;
          }
        case DELETE:{
          delete();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          if (jj_2_10(4)) {
            property();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case AT_SYM:{
              propertyWithDeclaration();
              break;
              }
            case SEMICOLON:{
AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
              try {
                jj_consume_token(SEMICOLON);
              } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
              }
              break;
              }
            default:
              jj_la1[18] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (ParseException e) {
error_skipto(EOL);
    }
}

  final public AstImportAnnotation importAnnotation() throws ParseException {/*@bgen(jjtree) ImportAnnotation */
  AstImportAnnotation jjtn000 = new AstImportAnnotation(JJTIMPORTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AT_SYM);
      jj_consume_token(ANNOTATION_IMPORT);
      jj_consume_token(SYMBOL);
jjtn000.setAnnotationType(token.image);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      text();
      propertyEnd();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
}

  final public void property() throws ParseException {/*@bgen(jjtree) Property */
        AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));String notationType = null;
    try {
      jj_consume_token(AT_SYM);
      jj_consume_token(PROPERTY_TYPE);
jjtn000.setNotationType(token.image);
                notationType = jjtn000.getNotationType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOCATE_FUNCTION:{
        locateFunction();
        break;
        }
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:{
        symbolName();
jjtn000.addChainName(token.image);
        label_7:
        while (true) {
          if (jj_2_11(2) && ((getToken(2).kind == SYMBOL || getToken(2).kind == SUBCOMPLEX ) &&
                                          !AntimonyAnnotationImporter.isPropertyImported(notationType, getToken(2).image))) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(DOT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SYMBOL:{
            jj_consume_token(SYMBOL);
            break;
            }
          case SUBCOMPLEX:{
            jj_consume_token(SUBCOMPLEX);
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
jjtn000.addChainName(token.image);
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:
      case DOT:{
        singleProperty(true, notationType, true);
        break;
        }
      case EQUAL:{
        multipleProperty(false, notationType, true);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      propertyEnd();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void propertyWithDeclaration() throws ParseException {/*@bgen(jjtree) Property */
  AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AT_SYM);
      jj_consume_token(PROPERTY_TYPE);
jjtn000.setNotationType(token.image);
                String notationType = jjtn000.getNotationType();

                if (!AntimonyAnnotationImporter.isAnnotationImported(notationType))
                        {if (true) throw new ParseException("Notation type " + notationType + " was not imported");}
      jj_consume_token(DECLARATION);
jjtn000.setDeclarationType(token.image);
      symbolName();
jjtn000.addChainName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:
      case DOT:{
        singleProperty(true, notationType, false);
        break;
        }
      case EQUAL:{
        multipleProperty(false, notationType, false);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      propertyEnd();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void singleProperty(boolean dotNeeded, String notationType, boolean checkNeeded) throws ParseException {/*@bgen(jjtree) SingleProperty */
  AstSingleProperty jjtn000 = new AstSingleProperty(JJTSINGLEPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
if (dotNeeded)
                        jjtn000.setDotNeeded(dotNeeded);
                else
                        {if (true) throw new ParseException("< DOT > was not expected");}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(SYMBOL);
jjtn000.setPropertyName(token.image);
                        if (checkNeeded)
                        {
                                try
                                {
                                        AntimonyAnnotationImporter.checkPropertyImport(notationType, token.image);
                                }
                                catch (Exception e) {
                                        log.log(Level.SEVERE, e.getMessage());
                                }
                        }
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT_STRING:{
        text();
        break;
        }
      case SQUARE_BRACKET_L:{
        listOfVals();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        if (jj_2_12(2)) {
          mapOfVals();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BRACE_L:{
            setOfVals();
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void multipleProperty(boolean dotNeeded, String notationType, boolean checkNeeded) throws ParseException {
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQUAL);
    } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
    }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
    } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
    }
    singleProperty(false, notationType, checkNeeded);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
AstComma jjtn003 = new AstComma(JJTCOMMA);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                     jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                       jjtn003.jjtSetLastToken(getToken(0));
                     }
      }
      singleProperty(false, notationType, checkNeeded);
    }
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
    } finally {
if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
             jjtn004.jjtSetLastToken(getToken(0));
           }
    }
}

  final public void listOfVals() throws ParseException {/*@bgen(jjtree) List */
  AstList jjtn000 = new AstList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_L);
jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUBSYMBOL:
      case SYMBOL:{
        propertyName();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_9;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        propertyName();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SQUARE_BRACKET_R);
jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void mapOfVals() throws ParseException {/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      keyVal();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
        }
        keyVal();
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void setOfVals() throws ParseException {/*@bgen(jjtree) Set */
  AstSet jjtn000 = new AstSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_L);
jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SQUARE_BRACKET_L:{
        listOfVals();
        break;
        }
      case BRACE_L:{
        mapOfVals();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
AstComma jjtn002 = new AstComma(JJTCOMMA);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SQUARE_BRACKET_L:{
          listOfVals();
          break;
          }
        case BRACE_L:{
          mapOfVals();
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRACE_R);
jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void keyVal() throws ParseException {/*@bgen(jjtree) SingleProperty */
  AstSingleProperty jjtn000 = new AstSingleProperty(JJTSINGLEPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL);
jjtn000.setPropertyName(token.image);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TEXT_STRING:{
        text();
        break;
        }
      case SQUARE_BRACKET_L:{
        listOfVals();
        break;
        }
      case SUBSYMBOL:
      case SYMBOL:{
        propertyName();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void propertyName() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        jj_consume_token(SYMBOL);
        break;
        }
      case SUBSYMBOL:{
        jj_consume_token(SUBSYMBOL);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void propertyEnd() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROP_SEMICOLON:{
AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PROP_SEMICOLON);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      break;
      }
    case PROP_EOL:{
AstEOL jjtn002 = new AstEOL(JJTEOL);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PROP_EOL);
      } finally {
if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002, true);
                                         jjtn002.jjtSetLastToken(getToken(0));
                                       }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void unit() throws ParseException {/*@bgen(jjtree) Unit */
  AstUnit jjtn000 = new AstUnit(JJTUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(UNIT);
      symbolElement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUAL:{
        unitFormula();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void unitFormula() throws ParseException {
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQUAL);
    } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
    }
AstUnitFormula jjtn002 = new AstUnitFormula(JJTUNITFORMULA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
    try {
      algebraicExpression();
    } catch (Throwable jjte002) {
if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte002;}
       }
       if (jjte002 instanceof ParseException) {
         {if (true) throw (ParseException)jjte002;}
       }
       {if (true) throw (Error)jjte002;}
    } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
    }
}

  final public void delete() throws ParseException {/*@bgen(jjtree) Delete */
  AstDelete jjtn000 = new AstDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      subSymbolElement();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void symbolType() throws ParseException {/*@bgen(jjtree) SymbolType */
  AstSymbolType jjtn000 = new AstSymbolType(JJTSYMBOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYMBOL_TYPE);
jjtn000.setType(token.image);
      listOfSymbols();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void compartment() throws ParseException {/*@bgen(jjtree) SymbolType */
  AstSymbolType jjtn000 = new AstSymbolType(JJTSYMBOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMPARTMENT);
jjtn000.setType(token.image);
      listOfSymbols();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void substanceOnly() throws ParseException {/*@bgen(jjtree) SubstanceOnly */
  AstSubstanceOnly jjtn000 = new AstSubstanceOnly(JJTSUBSTANCEONLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SUBSTANCE_ONLY);
      symbolType();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void varOrConst() throws ParseException {/*@bgen(jjtree) VarOrConst */
  AstVarOrConst jjtn000 = new AstVarOrConst(JJTVARORCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        jj_consume_token(VAR);
        break;
        }
      case CONST:{
        jj_consume_token(CONST);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.setType(token.image);
      if (jj_2_13(2)) {
        symbolType();
      } else if (jj_2_14(3)) {
        compartment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case CONST:
        case VAR:
        case IN:
        case $:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case SYMBOL:{
          listOfSymbols();
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void listOfSymbols() throws ParseException {
    symbolElementWithIn();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      symbolElementWithIn();
    }
}

  final public void in() throws ParseException {/*@bgen(jjtree) In */
  AstIn jjtn000 = new AstIn(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IN);
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void algebraicEquation() throws ParseException {/*@bgen(jjtree) Symbol */
 AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));algEqCount++;
 jjtn000.setName("A" + algEqCount);
    try {
AstEqualZero jjtn001 = new AstEqualZero(JJTEQUALZERO);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL_ZERO);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
AstEquation jjtn002 = new AstEquation(JJTEQUATION);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
      try {
        algebraicExpression();
      } catch (Throwable jjte002) {
if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
      }
jjtn000.setTypeDeclaration(AstSymbol.ALGEBRAIC);
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void algebraicExpression() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case BRAKET_L:
      case SYMBOL:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case SYMBOL:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        algebraicFormulaElement();
        break;
        }
      case BRAKET_L:{
        algebraicExpressionInBrackets();
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void algebraicExpressionInBrackets() throws ParseException {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
    } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case BRAKET_L:
      case SYMBOL:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKET_L:{
        algebraicExpressionInBrackets();
        break;
        }
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case SYMBOL:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        algebraicFormulaElement();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
    } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
    }
}

  final public void algebraicFormulaElement() throws ParseException {/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:{
        symbolName();
jjtn000.setString(true);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case OPERATOR:{
        jj_consume_token(OPERATOR);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        jj_consume_token(FLOATING_POINT_LITERAL);
jjtn000.setNumber(true);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setElement(token.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
}

  final public void symbol() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUBSYMBOL:{
      subSymbolSynchronization();
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      if (jj_2_15(3)) {
        symbolWithoutConstantPrefix();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case CONST:
        case VAR:
        case IN:
        case $:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case SYMBOL:{
          symbolWithConstantPrefix();
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void subSymbolSynchronization() throws ParseException {/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SUBSYMBOL);
jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);
        jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        connectionConversionFactor();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      synchronizations();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void connectionConversionFactor() throws ParseException {/*@bgen(jjtree) ConnectionConversionFactor */
  AstConnectionConversionFactor jjtn000 = new AstConnectionConversionFactor(JJTCONNECTIONCONVERSIONFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STAR);
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void symbolWithoutConstantPrefix() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setName(token.image);
      if (jj_2_16(2)) {
AstColon jjtn001 = new AstColon(JJTCOLON);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
        }
        event();
jjtn000.setTypeDeclaration(AstSymbol.EVENT);
      } else if (jj_2_17(2)) {
AstColon jjtn002 = new AstColon(JJTCOLON);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
        }
        constraint();
jjtn000.setTypeDeclaration(AstSymbol.CONSTRAINT);
      } else if (jj_2_18(3)) {
AstColon jjtn003 = new AstColon(JJTCOLON);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
        }
        reactionDefinitions((AstSymbol)jjtn000);
      } else if (jj_2_19(2)) {
        assignmentRules();
jjtn000.setTypeDeclaration(AstSymbol.RULE);
      } else if (jj_2_20(2)) {
        locateAssignment();
jjtn000.setTypeDeclaration(AstSymbol.FUNCTION_RETURN_ASSIGNMENT);
      } else if (jj_2_21(2)) {
AstColon jjtn004 = new AstColon(JJTCOLON);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                         jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COLON);
        } finally {
if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtn004.jjtSetLastToken(getToken(0));
                         }
        }
        subDiagram();
jjtn000.setTypeDeclaration(AstSymbol.SUBDIAGRAM);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RATE_EQUAL:{
          assignmentRate();
jjtn000.setTypeDeclaration(AstSymbol.RATE);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          if (jj_2_22(2)) {
            fullName();
jjtn000.setTypeDeclaration(AstSymbol.DISPLAY_NAME);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUBTYPE:{
              subType();
jjtn000.setTypeDeclaration(AstSymbol.SUBTYPE);
              break;
              }
            case HAS:{
              hasUnit();
jjtn000.setTypeDeclaration(AstSymbol.SET_UNIT);
              break;
              }
            case RELATIONSHIP_TYPE:{
              databaseReference();
jjtn000.setTypeDeclaration(AstSymbol.DATABASE_REFERENCE);
              break;
              }
            case IS:
            case STAR:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case STAR:{
                connectionConversionFactor();
                break;
                }
              default:
                jj_la1[48] = jj_gen;
                ;
              }
              synchronizations();
jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);
              break;
              }
            default:
              jj_la1[50] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void locateAssignment() throws ParseException {
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQUAL);
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
    locateFunction();
}

  final public void symbolWithConstantPrefix() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case $:{
        jj_consume_token($);
jjtn000.setConstantPrefix(true);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      symbolName();
jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:{
        symbolDeclarations();
jjtn000.setTypeDeclaration(AstSymbol.PARENT_DECLARATION);
        break;
        }
      case EQUAL:{
        initializations();
jjtn000.setTypeDeclaration(AstSymbol.INIT);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void symbolDeclarations() throws ParseException {
    in();
}

  final public void reactionDefinitions(AstSymbol declaration) throws ParseException {
    reactionTitle(declaration);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SEMICOLON);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      equation();
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      ;
    }
}

  final public void reactionDefinitionsNoName() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      reactionDefinitions((AstSymbol)jjtn000);
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void initializations() throws ParseException {
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EQUAL);
    } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
    equation();
}

  final public void assignmentRules() throws ParseException {
    colonEqual();
    equation();
}

  final public void colonEqual() throws ParseException {/*@bgen(jjtree) ColonEqual */
  AstColonEqual jjtn000 = new AstColonEqual(JJTCOLONEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      jj_consume_token(EQUAL);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setTokenEqual(token);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void assignmentRate() throws ParseException {
    rateEqual();
    equation();
}

  final public void rateEqual() throws ParseException {/*@bgen(jjtree) RateEqual */
  AstRateEqual jjtn000 = new AstRateEqual(JJTRATEEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RATE_EQUAL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setView(token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void event() throws ParseException {
    at();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        break label_15;
      }
AstComma jjtn001 = new AstComma(JJTCOMMA);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIORITY:{
        priority();
        break;
        }
      case FROM_TRIGGER:{
        useValuesFromTriggerTime();
        break;
        }
      case PERSISTENT:{
        persistent();
        break;
        }
      case TRIGGER_INITIAL_VALUE:{
        triggerInitialValue();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_16:
    while (true) {
AstColon jjtn002 = new AstColon(JJTCOLON);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COLON);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          break label_17;
        }
AstEOL jjtn003 = new AstEOL(JJTEOL);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
        }
      }
      eventAssignment();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_16;
      }
    }
}

  final public void at() throws ParseException {/*@bgen(jjtree) At */
  AstAt jjtn000 = new AstAt(JJTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AT);
      equation();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AFTER:{
AstAfter jjtn001 = new AstAfter(JJTAFTER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(AFTER);
        } finally {
if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
        }
        equation();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void constraint() throws ParseException {
    assert_();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
AstElse jjtn001 = new AstElse(JJTELSE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ELSE);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      text();
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
}

  final public void assert_() throws ParseException {/*@bgen(jjtree) Assert */
  AstAssert jjtn000 = new AstAssert(JJTASSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ASSERT);
      equation();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void priority() throws ParseException {/*@bgen(jjtree) Priority */
  AstPriority jjtn000 = new AstPriority(JJTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PRIORITY);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      equation();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void useValuesFromTriggerTime() throws ParseException {/*@bgen(jjtree) UseValuesFromTriggerTime */
  AstUseValuesFromTriggerTime jjtn000 = new AstUseValuesFromTriggerTime(JJTUSEVALUESFROMTRIGGERTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FROM_TRIGGER);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      jj_consume_token(TRUE_OR_FALSE);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void persistent() throws ParseException {/*@bgen(jjtree) Persistent */
  AstPersistent jjtn000 = new AstPersistent(JJTPERSISTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PERSISTENT);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      jj_consume_token(TRUE_OR_FALSE);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void triggerInitialValue() throws ParseException {/*@bgen(jjtree) TriggerInitialValue */
  AstTriggerInitialValue jjtn000 = new AstTriggerInitialValue(JJTTRIGGERINITIALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRIGGER_INITIAL_VALUE);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      jj_consume_token(TRUE_OR_FALSE);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
      try {
jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void eventNoName() throws ParseException {/*@bgen(jjtree) Symbol */
 AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));jjtn000.setTypeDeclaration(AstSymbol.EVENT);
    try {
      event();
      end();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void eventAssignment() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setTypeDeclaration(AstSymbol.INIT);
  jjtn000.setName(token.image);
      initializations();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void fullName() throws ParseException {/*@bgen(jjtree) Is */
  AstIs jjtn000 = new AstIs(JJTIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IS);
      text();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void subType() throws ParseException {/*@bgen(jjtree) Subtype */
  AstSubtype jjtn000 = new AstSubtype(JJTSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SUBTYPE);
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void hasUnit() throws ParseException {/*@bgen(jjtree) Has */
  AstHas jjtn000 = new AstHas(JJTHAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HAS);
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void databaseReference() throws ParseException {
    relationshipType();
    text();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        break label_18;
      }
AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      text();
    }
}

  final public void relationshipType() throws ParseException {/*@bgen(jjtree) RelationshipType */
  AstRelationshipType jjtn000 = new AstRelationshipType(JJTRELATIONSHIPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RELATIONSHIP_TYPE);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void synchronizations() throws ParseException {/*@bgen(jjtree) Is */
  AstIs jjtn000 = new AstIs(JJTIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IS);
      if (jj_2_23(2)) {
        subSymbolElement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case CONST:
        case VAR:
        case IN:
        case $:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case SYMBOL:{
          symbolElement();
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void reactionTitle(AstSymbol declaration) throws ParseException {/*@bgen(jjtree) ReactionTitle */
  AstReactionTitle jjtn000 = new AstReactionTitle(JJTREACTIONTITLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case $:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:
      case FLOATING_POINT_LITERAL:{
        reactionReactant();
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case OR:
        case PLUS:
        case NOT:{
          ;
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
AstPlus jjtn001 = new AstPlus(JJTPLUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(PLUS);
          } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
          }
jjtn000.initType(AstReactionTitle.STANDARD_REACTION);
          break;
          }
        case AND:{
AstAnd jjtn002 = new AstAnd(JJTAND);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(AND);
          } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
jjtn000.initType(AstReactionTitle.MOD_AND_REACTION);
          break;
          }
        case OR:{
AstOr jjtn003 = new AstOr(JJTOR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(OR);
          } finally {
if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
jjtn000.initType(AstReactionTitle.MOD_OR_REACTION);
          break;
          }
        case NOT:{
AstNot jjtn004 = new AstNot(JJTNOT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(NOT);
          } finally {
if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
          }
jjtn000.initType(AstReactionTitle.MOD_NOT_REACTION);
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        reactionReactant();
      }
      reactionType(declaration);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case $:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:
      case FLOATING_POINT_LITERAL:{
        reactionProduct();
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          ;
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          break label_20;
        }
AstPlus jjtn005 = new AstPlus(JJTPLUS);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtn005.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(PLUS);
        } finally {
if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtn005.jjtSetLastToken(getToken(0));
          }
        }
        reactionProduct();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void reactionReactant() throws ParseException {/*@bgen(jjtree) Reactant */
  AstReactant jjtn000 = new AstReactant(JJTREACTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLOATING_POINT_LITERAL:{
        stoichiometry();
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void reactionProduct() throws ParseException {/*@bgen(jjtree) Product */
  AstProduct jjtn000 = new AstProduct(JJTPRODUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FLOATING_POINT_LITERAL:{
        stoichiometry();
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void stoichiometry() throws ParseException {/*@bgen(jjtree) Stoichiometry */
  AstStoichiometry jjtn000 = new AstStoichiometry(JJTSTOICHIOMETRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FLOATING_POINT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStoichiometry(token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void symbolElement() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case $:{
        jj_consume_token($);
jjtn000.setConstantPrefix(true);
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      symbolName();
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void subSymbolElement() throws ParseException {/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case $:{
        jj_consume_token($);
jjtn000.setConstantPrefix(true);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      jj_consume_token(SUBSYMBOL);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(token.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void symbolElementWithIn() throws ParseException {/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case $:{
        jj_consume_token($);
jjtn000.setConstantPrefix(true);
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      symbolName();
jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:{
        in();
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void reactionType(AstSymbol declaration) throws ParseException {/*@bgen(jjtree) ReactionType */
  AstReactionType jjtn000 = new AstReactionType(JJTREACTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARROW:{
        jj_consume_token(ARROW);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setType(token.image);
  declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRIANGULAR_BRACKET_R:{
          jj_consume_token(TRIANGULAR_BRACKET_R);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);
          break;
          }
        case BRAKET_L:{
          jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_UNKNOWN_MODIFIER);
          break;
          }
        case OR:{
          jj_consume_token(OR);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_INHIBITOR);
          break;
          }
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case SYMBOL:{
          symbolName();
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_ACTIVATOR);
          break;
          }
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
}

  final public void subDiagram() throws ParseException {
    subModelSignature();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_21;
      }
AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      conversionFactor();
    }
}

  final public void conversionFactor() throws ParseException {/*@bgen(jjtree) ConversionFactor */
  AstConversionFactor jjtn000 = new AstConversionFactor(JJTCONVERSIONFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      symbolName();
jjtn000.setFactor(token.image);
AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EQUAL);
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
      }
      symbolElement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void equation() throws ParseException {/*@bgen(jjtree) Equation */
  AstEquation jjtn000 = new AstEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      formula();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void formula() throws ParseException {
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case STANDART_FUNCTION:
      case RELATIONSHIP_TYPE:
      case POWER:
      case GEQ:
      case LEQ:
      case AND_WORD:
      case OR_WORD:
      case AND:
      case OR:
      case PIECEWISE:
      case TRUE_OR_FALSE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case NOT_EQUAL:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case NOT:
      case BRAKET_L:
      case EQUAL:
      case SYMBOL:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case STANDART_FUNCTION:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case TRUE_OR_FALSE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case NOT_EQUAL:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case NOT:
      case EQUAL:
      case SYMBOL:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        regularFormulaElement();
        break;
        }
      case BRAKET_L:{
        formulaInBrackets();
        break;
        }
      case POWER:
      case GEQ:
      case LEQ:
      case AND_WORD:
      case OR_WORD:{
        specialFunction();
        break;
        }
      case PIECEWISE:{
        piecewiseAntimonyFormat();
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void regularFormulaElement() throws ParseException {/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:{
        symbolName();
jjtn000.setString(true);
        break;
        }
      case TRUE_OR_FALSE:{
        jj_consume_token(TRUE_OR_FALSE);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case OPERATOR:{
        jj_consume_token(OPERATOR);
        break;
        }
      case TRIANGULAR_BRACKET_L:{
        jj_consume_token(TRIANGULAR_BRACKET_L);
        break;
        }
      case TRIANGULAR_BRACKET_R:{
        jj_consume_token(TRIANGULAR_BRACKET_R);
        break;
        }
      case STANDART_FUNCTION:{
        jj_consume_token(STANDART_FUNCTION);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      case EQUAL:{
        jj_consume_token(EQUAL);
        break;
        }
      case NOT_EQUAL:{
        jj_consume_token(NOT_EQUAL);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        jj_consume_token(FLOATING_POINT_LITERAL);
jjtn000.setNumber(true);
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setElement(token.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void formulaInBrackets() throws ParseException {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
    } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case STANDART_FUNCTION:
      case RELATIONSHIP_TYPE:
      case POWER:
      case GEQ:
      case LEQ:
      case AND_WORD:
      case OR_WORD:
      case AND:
      case OR:
      case PIECEWISE:
      case TRUE_OR_FALSE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case NOT_EQUAL:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case NOT:
      case BRAKET_L:
      case EQUAL:
      case COMMA:
      case SYMBOL:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRAKET_L:{
        formulaInBrackets();
        break;
        }
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case STANDART_FUNCTION:
      case RELATIONSHIP_TYPE:
      case AND:
      case OR:
      case TRUE_OR_FALSE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case NOT_EQUAL:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case PLUS:
      case MINUS:
      case NOT:
      case EQUAL:
      case SYMBOL:
      case TRIANGULAR_BRACKET_L:
      case TRIANGULAR_BRACKET_R:
      case OPERATOR:
      case STAR:
      case FLOATING_POINT_LITERAL:{
        regularFormulaElement();
        break;
        }
      case POWER:
      case GEQ:
      case LEQ:
      case AND_WORD:
      case OR_WORD:{
        specialFunction();
        break;
        }
      case PIECEWISE:{
        piecewiseAntimonyFormat();
        break;
        }
      case COMMA:{
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
        } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtn002.jjtSetLastToken(getToken(0));
             }
        }
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                     jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
    } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
    }
}

  final public void specialFunction() throws ParseException {/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POWER:{
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(POWER);
jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
        } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
        }
jjtn000.setType(AstSpecialFormula.POWER);
        break;
        }
      case AND_WORD:{
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(AND_WORD);
jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
        } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
        }
jjtn000.setType(AstSpecialFormula.AND);
        break;
        }
      case OR_WORD:{
AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(OR_WORD);
jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
jjtn003.setElement(token.image);
        } finally {
if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
        }
jjtn000.setType(AstSpecialFormula.OR);
        break;
        }
      case GEQ:{
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(GEQ);
jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                     jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
        } finally {
if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
        }
jjtn000.setType(AstSpecialFormula.GEQ);
        break;
        }
      case LEQ:{
AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(LEQ);
jjtree.closeNodeScope(jjtn005, true);
                     jjtc005 = false;
                     jjtn005.jjtSetLastToken(getToken(0));
jjtn005.setElement(token.image);
        } finally {
if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
              jjtn005.jjtSetLastToken(getToken(0));
            }
        }
jjtn000.setType(AstSpecialFormula.LEQ);
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn006, true);
                     jjtc006 = false;
                     jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(token.image);
      } finally {
if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
      }
AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc007 = true;
       jjtree.openNodeScope(jjtn007);
       jjtn007.jjtSetFirstToken(getToken(1));
      try {
        formula();
      } catch (Throwable jjte007) {
if (jjtc007) {
         jjtree.clearNodeScope(jjtn007);
         jjtc007 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte007 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte007;}
       }
       if (jjte007 instanceof ParseException) {
         {if (true) throw (ParseException)jjte007;}
       }
       {if (true) throw (Error)jjte007;}
      } finally {
if (jjtc007) {
         jjtree.closeNodeScope(jjtn007, true);
         jjtn007.jjtSetLastToken(getToken(0));
       }
      }
AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc008 = true;
       jjtree.openNodeScope(jjtn008);
       jjtn008.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
jjtree.closeNodeScope(jjtn008, true);
                  jjtc008 = false;
                  jjtn008.jjtSetLastToken(getToken(0));
jjtn008.setElement(token.image);
      } finally {
if (jjtc008) {
         jjtree.closeNodeScope(jjtn008, true);
         jjtn008.jjtSetLastToken(getToken(0));
       }
      }
AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc009 = true;
       jjtree.openNodeScope(jjtn009);
       jjtn009.jjtSetFirstToken(getToken(1));
      try {
        formula();
      } catch (Throwable jjte009) {
if (jjtc009) {
         jjtree.clearNodeScope(jjtn009);
         jjtc009 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte009 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte009;}
       }
       if (jjte009 instanceof ParseException) {
         {if (true) throw (ParseException)jjte009;}
       }
       {if (true) throw (Error)jjte009;}
      } finally {
if (jjtc009) {
         jjtree.closeNodeScope(jjtn009, true);
         jjtn009.jjtSetLastToken(getToken(0));
       }
      }
AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc010 = true;
       jjtree.openNodeScope(jjtn010);
       jjtn010.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn010, true);
                     jjtc010 = false;
                     jjtn010.jjtSetLastToken(getToken(0));
jjtn010.setElement(token.image);
      } finally {
if (jjtc010) {
         jjtree.closeNodeScope(jjtn010, true);
         jjtn010.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void piecewiseAntimonyFormat() throws ParseException {/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PIECEWISE);
jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
jjtn000.setType(AstSpecialFormula.PIECEWISE);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        formula();
      } catch (Throwable jjte003) {
if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          break label_24;
        }
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(token.image);
        } finally {
if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
             jjtn004.jjtSetLastToken(getToken(0));
           }
        }
AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
           jjtn005.jjtSetFirstToken(getToken(1));
        try {
          formula();
        } catch (Throwable jjte005) {
if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte005;}
           }
           if (jjte005 instanceof ParseException) {
             {if (true) throw (ParseException)jjte005;}
           }
           {if (true) throw (Error)jjte005;}
        } finally {
if (jjtc005) {
             jjtree.closeNodeScope(jjtn005, true);
             jjtn005.jjtSetLastToken(getToken(0));
           }
        }
      }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn006, true);
                     jjtc006 = false;
                     jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(token.image);
      } finally {
if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void end() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SEMICOLON);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      break;
      }
    case EOL:{
AstEOL jjtn002 = new AstEOL(JJTEOL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                  jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                    jjtn002.jjtSetLastToken(getToken(0));
                                  }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/******************************************************* PARSE FORMULE *************************************************/
  final public 

AstEquation parseFormule() throws ParseException {/*@bgen(jjtree) Equation */
  AstEquation jjtn000 = new AstEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case STANDART_FUNCTION:
        case RELATIONSHIP_TYPE:
        case AND:
        case OR:
        case PIECEWISE:
        case TRUE_OR_FALSE:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case NOT_EQUAL:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case PLUS:
        case MINUS:
        case NOT:
        case BRAKET_L:
        case EQUAL:
        case SYMBOL:
        case TRIANGULAR_BRACKET_L:
        case TRIANGULAR_BRACKET_R:
        case OPERATOR:
        case STAR:
        case FLOATING_POINT_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          break label_25;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case STANDART_FUNCTION:
        case RELATIONSHIP_TYPE:
        case AND:
        case OR:
        case TRUE_OR_FALSE:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case NOT_EQUAL:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case PLUS:
        case MINUS:
        case NOT:
        case EQUAL:
        case SYMBOL:
        case TRIANGULAR_BRACKET_L:
        case TRIANGULAR_BRACKET_R:
        case OPERATOR:
        case STAR:
        case FLOATING_POINT_LITERAL:{
          regularFormulaElement();
          break;
          }
        case BRAKET_L:{
          formulaInBrackets();
          break;
          }
        case PIECEWISE:{
          piecewiseStandartFormat();
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  final public AstUnitFormula parseUnitFormule() throws ParseException {/*@bgen(jjtree) UnitFormula */
  AstUnitFormula jjtn000 = new AstUnitFormula(JJTUNITFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case AND:
        case OR:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case PLUS:
        case MINUS:
        case BRAKET_L:
        case SYMBOL:
        case OPERATOR:
        case STAR:
        case FLOATING_POINT_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_26;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:
        case MODEL:
        case GLOBAL:
        case AS:
        case SYMBOL_TYPE:
        case COMPARTMENT:
        case UNIT:
        case SUBTYPE:
        case RELATIONSHIP_TYPE:
        case AND:
        case OR:
        case CONST:
        case VAR:
        case IN:
        case IS:
        case HAS:
        case AT:
        case PRIORITY:
        case FROM_TRIGGER:
        case TRIGGER_INITIAL_VALUE:
        case PLUS:
        case MINUS:
        case SYMBOL:
        case OPERATOR:
        case STAR:
        case FLOATING_POINT_LITERAL:{
          algebraicFormulaElement();
          break;
          }
        case BRAKET_L:{
          algebraicExpressionInBrackets();
          break;
          }
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void piecewiseStandartFormat() throws ParseException {/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PIECEWISE);
jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
jjtn000.setType(AstSpecialFormula.PIECEWISE);
AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_L);
jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setElement(token.image);
      } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
      try {
        formula();
      } catch (Throwable jjte003) {
if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte003;}
       }
       if (jjte003 instanceof ParseException) {
         {if (true) throw (ParseException)jjte003;}
       }
       {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
      }
AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ARROW);
jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                  jjtn004.jjtSetLastToken(getToken(0));
jjtn004.setElement(AstSpecialFormula.PIECEWISE_ARROW);
      } finally {
if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        formula();
      } catch (Throwable jjte005) {
if (jjtc005) {
         jjtree.clearNodeScope(jjtn005);
         jjtc005 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte005 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte005;}
       }
       if (jjte005 instanceof ParseException) {
         {if (true) throw (ParseException)jjte005;}
       }
       {if (true) throw (Error)jjte005;}
      } finally {
if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON:{
          ;
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          break label_27;
        }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
           jjtn006.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                          jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(",");
        } finally {
if (jjtc006) {
             jjtree.closeNodeScope(jjtn006, true);
             jjtn006.jjtSetLastToken(getToken(0));
           }
        }
AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
           boolean jjtc007 = true;
           jjtree.openNodeScope(jjtn007);
           jjtn007.jjtSetFirstToken(getToken(1));
        try {
          formula();
        } catch (Throwable jjte007) {
if (jjtc007) {
             jjtree.clearNodeScope(jjtn007);
             jjtc007 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte007 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte007;}
           }
           if (jjte007 instanceof ParseException) {
             {if (true) throw (ParseException)jjte007;}
           }
           {if (true) throw (Error)jjte007;}
        } finally {
if (jjtc007) {
             jjtree.closeNodeScope(jjtn007, true);
             jjtn007.jjtSetLastToken(getToken(0));
           }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARROW:{
AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
               jjtn008.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(ARROW);
jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                          jjtn008.jjtSetLastToken(getToken(0));
jjtn008.setElement(AstSpecialFormula.PIECEWISE_ARROW);
          } finally {
if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtn008.jjtSetLastToken(getToken(0));
               }
          }
AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
               boolean jjtc009 = true;
               jjtree.openNodeScope(jjtn009);
               jjtn009.jjtSetFirstToken(getToken(1));
          try {
            formula();
          } catch (Throwable jjte009) {
if (jjtc009) {
                 jjtree.clearNodeScope(jjtn009);
                 jjtc009 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte009 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte009;}
               }
               if (jjte009 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte009;}
               }
               {if (true) throw (Error)jjte009;}
          } finally {
if (jjtc009) {
                 jjtree.closeNodeScope(jjtn009, true);
                 jjtn009.jjtSetLastToken(getToken(0));
               }
          }
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          ;
        }
      }
AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc010 = true;
       jjtree.openNodeScope(jjtn010);
       jjtn010.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(BRAKET_R);
jjtree.closeNodeScope(jjtn010, true);
                     jjtc010 = false;
                     jjtn010.jjtSetLastToken(getToken(0));
jjtn010.setElement(token.image);
      } finally {
if (jjtc010) {
         jjtree.closeNodeScope(jjtn010, true);
         jjtn010.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  final public void locateFunction() throws ParseException {/*@bgen(jjtree) LocateFunction */
  AstLocateFunction jjtn000 = new AstLocateFunction(JJTLOCATEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LOCATE_FUNCTION);
AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LOCATE_BRAKET_L);
jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                                jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setElement(token.image);
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case MODEL:
      case GLOBAL:
      case AS:
      case SYMBOL_TYPE:
      case COMPARTMENT:
      case UNIT:
      case SUBTYPE:
      case RELATIONSHIP_TYPE:
      case CONST:
      case VAR:
      case IN:
      case IS:
      case HAS:
      case AT:
      case PRIORITY:
      case FROM_TRIGGER:
      case TRIGGER_INITIAL_VALUE:
      case SYMBOL:{
        symbolName();
AstSymbol jjtn002 = new AstSymbol(JJTSYMBOL);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                          jjtn002.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setName(token.image);
        } finally {
if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                          }
        }
        break;
        }
      case $:
      case SUBSYMBOL:{
        subSymbolElement();
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.addProperty("name", token.image);
AstComma jjtn003 = new AstComma(JJTCOMMA);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(COMMA);
      } finally {
if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
      }
      text();
jjtn000.addProperty("type", token.image.replaceAll("\"", ""));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
AstComma jjtn004 = new AstComma(JJTCOMMA);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMA);
        } finally {
if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
        }
        symbolName();
AstSymbol jjtn005 = new AstSymbol(JJTSYMBOL);
                                            boolean jjtc005 = true;
                                            jjtree.openNodeScope(jjtn005);
                                            jjtn005.jjtSetFirstToken(getToken(1));
        try {
jjtree.closeNodeScope(jjtn005, true);
                                            jjtc005 = false;
                                            jjtn005.jjtSetLastToken(getToken(0));
jjtn005.setName(token.image);
        } finally {
if (jjtc005) {
                                              jjtree.closeNodeScope(jjtn005, true);
                                              jjtn005.jjtSetLastToken(getToken(0));
                                            }
        }
jjtn000.addProperty("parent", token.image);
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        ;
      }
AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
           jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LOCATE_BRAKET_R);
jjtree.closeNodeScope(jjtn006, true);
                                jjtc006 = false;
                                jjtn006.jjtSetLastToken(getToken(0));
jjtn006.setElement(token.image);
      } finally {
if (jjtc006) {
             jjtree.closeNodeScope(jjtn006, true);
             jjtn006.jjtSetLastToken(getToken(0));
           }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public Token symbolName() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      t = jj_consume_token(SYMBOL);
      break;
      }
    case SYMBOL_TYPE:{
      t = jj_consume_token(SYMBOL_TYPE);
      break;
      }
    case COMPARTMENT:{
      t = jj_consume_token(COMPARTMENT);
      break;
      }
    case VAR:{
      t = jj_consume_token(VAR);
      break;
      }
    case CONST:{
      t = jj_consume_token(CONST);
      break;
      }
    case MODEL:{
      t = jj_consume_token(MODEL);
      break;
      }
    case AS:{
      t = jj_consume_token(AS);
      break;
      }
    case IMPORT:{
      t = jj_consume_token(IMPORT);
      break;
      }
    case AT:{
      t = jj_consume_token(AT);
      break;
      }
    case IN:{
      t = jj_consume_token(IN);
      break;
      }
    case GLOBAL:{
      t = jj_consume_token(GLOBAL);
      break;
      }
    case SUBTYPE:{
      t = jj_consume_token(SUBTYPE);
      break;
      }
    case PRIORITY:{
      t = jj_consume_token(PRIORITY);
      break;
      }
    case FROM_TRIGGER:{
      t = jj_consume_token(FROM_TRIGGER);
      break;
      }
    case IS:{
      t = jj_consume_token(IS);
      break;
      }
    case HAS:{
      t = jj_consume_token(HAS);
      break;
      }
    case UNIT:{
      t = jj_consume_token(UNIT);
      break;
      }
    case RELATIONSHIP_TYPE:{
      t = jj_consume_token(RELATIONSHIP_TYPE);
      break;
      }
    case TRIGGER_INITIAL_VALUE:{
      t = jj_consume_token(TRIGGER_INITIAL_VALUE);
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t ;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_reactionTitle_1137_9_116()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_reactionProduct_1154_5_146()) return true;
    return false;
  }

  private boolean jj_3R_text_373_5_49()
 {
    if (jj_scan_token(TEXT_STRING)) return true;
    return false;
  }

  private boolean jj_3R_symbolType_754_5_38()
 {
    if (jj_scan_token(SYMBOL_TYPE)) return true;
    if (jj_3R_listOfSymbols_792_5_72()) return true;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1131_11_143()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1135_6_115()
 {
    if (jj_3R_reactionProduct_1154_5_146()) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1130_11_142()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1129_11_141()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1127_9_140()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_importModel_364_5_28()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_text_373_5_49()) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1126_9_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionTitle_1127_9_140()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionTitle_1129_11_141()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionTitle_1130_11_142()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionTitle_1131_11_143()) return true;
    }
    }
    }
    if (jj_3R_reactionReactant_1146_5_139()) return true;
    return false;
  }

  private boolean jj_3R_delete_745_5_96()
 {
    if (jj_scan_token(DELETE)) return true;
    if (jj_3R_subSymbolElement_1177_9_48()) return true;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_declaration_509_17_32()) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1124_6_112()
 {
    if (jj_3R_reactionReactant_1146_5_139()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_model_468_9_31()) return true;
    return false;
  }

  private boolean jj_3R_reactionTitle_1124_5_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionTitle_1124_6_112()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_reactionTitle_1126_9_113()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_reactionType_1198_3_114()) return true;
    xsp = jj_scanpos;
    if (jj_3R_reactionTitle_1135_6_115()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_reactionTitle_1137_9_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_unit_725_5_30()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_importAnnotation_529_9_29()) return true;
    return false;
  }

  private boolean jj_3R_unitFormula_735_9_88()
 {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_importModel_364_5_28()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_subSymbolElement_1177_9_48()) return true;
    return false;
  }

  private boolean jj_3R_relationshipType_1111_9_136()
 {
    if (jj_scan_token(RELATIONSHIP_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_synchronizations_1116_3_111()
 {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_synchronizations_1117_40_138()) return true;
    }
    return false;
  }

  private boolean jj_3R_unit_727_6_51()
 {
    if (jj_3R_unitFormula_735_9_88()) return true;
    return false;
  }

  private boolean jj_3R_unit_725_5_30()
 {
    if (jj_scan_token(UNIT)) return true;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unit_727_6_51()) jj_scanpos = xsp;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_databaseReference_1100_9_109()
 {
    if (jj_3R_relationshipType_1111_9_136()) return true;
    if (jj_3R_text_373_5_49()) return true;
    return false;
  }

  private boolean jj_3R_hasUnit_1093_9_108()
 {
    if (jj_scan_token(HAS)) return true;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_keyVal_699_9_71()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_subType_1086_3_107()
 {
    if (jj_scan_token(SUBTYPE)) return true;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_fullName_1079_3_47()
 {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_text_373_5_49()) return true;
    return false;
  }

  private boolean jj_3R_eventAssignment_1071_3_127()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_eventNoName_1064_9_34()
 {
    if (jj_3R_event_986_3_41()) return true;
    return false;
  }

  private boolean jj_3R_mapOfVals_673_9_37()
 {
    if (jj_scan_token(BRACE_L)) return true;
    if (jj_3R_keyVal_699_9_71()) return true;
    return false;
  }

  private boolean jj_3R_triggerInitialValue_1056_5_153()
 {
    if (jj_scan_token(TRIGGER_INITIAL_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_persistent_1048_5_152()
 {
    if (jj_scan_token(PERSISTENT)) return true;
    return false;
  }

  private boolean jj_3R_event_989_64_125()
 {
    if (jj_3R_triggerInitialValue_1056_5_153()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_mapOfVals_673_9_37()) return true;
    return false;
  }

  private boolean jj_3R_useValuesFromTriggerTime_1040_5_151()
 {
    if (jj_scan_token(FROM_TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_multipleProperty_646_9_103()
 {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_event_989_49_124()
 {
    if (jj_3R_persistent_1048_5_152()) return true;
    return false;
  }

  private boolean jj_3R_priority_1032_5_150()
 {
    if (jj_scan_token(PRIORITY)) return true;
    return false;
  }

  private boolean jj_3R_symbolName_1415_5_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_assert__1025_9_80()
 {
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  private boolean jj_3R_locateFunction_1398_9_84()
 {
    if (jj_scan_token(LOCATE_FUNCTION)) return true;
    if (jj_scan_token(LOCATE_BRAKET_L)) return true;
    return false;
  }

  private boolean jj_3R_constraint_1013_9_42()
 {
    if (jj_3R_assert__1025_9_80()) return true;
    return false;
  }

  private boolean jj_3R_at_1004_7_121()
 {
    if (jj_scan_token(AFTER)) return true;
    if (jj_3R_equation_1245_9_120()) return true;
    return false;
  }

  private boolean jj_3R_singleProperty_616_10_132()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_event_989_20_123()
 {
    if (jj_3R_useValuesFromTriggerTime_1040_5_151()) return true;
    return false;
  }

  private boolean jj_3R_singleProperty_616_9_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_singleProperty_616_10_132()) jj_scanpos = xsp;
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_at_1001_5_79()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_equation_1245_9_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_at_1004_7_121()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_declaration_513_105_60()
 {
    if (jj_3R_compartment_763_5_39()) return true;
    return false;
  }

  private boolean jj_3R_event_994_6_126()
 {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_event_992_5_99()
 {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_event_994_6_126()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_eventAssignment_1071_3_127()) return true;
    return false;
  }

  private boolean jj_3R_event_989_7_122()
 {
    if (jj_3R_priority_1032_5_150()) return true;
    return false;
  }

  private boolean jj_3R_event_988_5_98()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_event_989_7_122()) {
    jj_scanpos = xsp;
    if (jj_3R_event_989_20_123()) {
    jj_scanpos = xsp;
    if (jj_3R_event_989_49_124()) {
    jj_scanpos = xsp;
    if (jj_3R_event_989_64_125()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_end_1340_33_90()
 {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_event_986_3_41()
 {
    if (jj_3R_at_1001_5_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_event_988_5_98()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_event_992_5_99()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_event_992_5_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_declaration_513_87_59()
 {
    if (jj_3R_substanceOnly_772_9_95()) return true;
    return false;
  }

  private boolean jj_3R_rateEqual_980_3_135()
 {
    if (jj_scan_token(RATE_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_propertyWithDeclaration_586_9_97()
 {
    if (jj_scan_token(AT_SYM)) return true;
    if (jj_scan_token(PROPERTY_TYPE)) return true;
    if (jj_scan_token(DECLARATION)) return true;
    return false;
  }

  private boolean jj_3R_assignmentRate_973_5_106()
 {
    if (jj_3R_rateEqual_980_3_135()) return true;
    if (jj_3R_equation_1245_9_120()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_colonEqual_967_3_83()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_property_577_9_70()
 {
    if (jj_3R_multipleProperty_646_9_103()) return true;
    return false;
  }

  private boolean jj_3R_declaration_513_72_58()
 {
    if (jj_3R_symbolType_754_5_38()) return true;
    return false;
  }

  private boolean jj_3R_property_575_9_69()
 {
    if (jj_3R_singleProperty_616_9_102()) return true;
    return false;
  }

  private boolean jj_3R_assignmentRules_959_5_44()
 {
    if (jj_3R_colonEqual_967_3_83()) return true;
    return false;
  }

  private boolean jj_3R_end_1340_6_89()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_end_1339_5_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_end_1340_6_89()) {
    jj_scanpos = xsp;
    if (jj_3R_end_1340_33_90()) {
    jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_initializations_952_5_155()
 {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_equation_1245_9_120()) return true;
    return false;
  }

  private boolean jj_3R_declaration_513_57_57()
 {
    if (jj_3R_varOrConst_780_5_94()) return true;
    return false;
  }

  private boolean jj_3R_property_560_9_68()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_property_558_9_67()
 {
    if (jj_3R_locateFunction_1398_9_84()) return true;
    return false;
  }

  private boolean jj_3R_reactionDefinitionsNoName_945_5_33()
 {
    if (jj_3R_reactionDefinitions_935_5_43()) return true;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_reactionDefinitions_937_9_82()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_equation_1245_9_120()) return true;
    return false;
  }

  private boolean jj_3R_piecewiseAntimonyFormat_1323_5_179()
 {
    if (jj_scan_token(PIECEWISE)) return true;
    if (jj_scan_token(BRAKET_L)) return true;
    return false;
  }

  private boolean jj_3R_property_548_9_36()
 {
    if (jj_scan_token(AT_SYM)) return true;
    if (jj_scan_token(PROPERTY_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_property_558_9_67()) {
    jj_scanpos = xsp;
    if (jj_3R_property_560_9_68()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_property_575_9_69()) {
    jj_scanpos = xsp;
    if (jj_3R_property_577_9_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_reactionDefinitions_935_5_43()
 {
    if (jj_3R_reactionTitle_1124_5_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionDefinitions_937_9_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_symbolDeclarations_929_5_154()
 {
    if (jj_3R_in_803_9_156()) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1306_10_188()
 {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3R_symbolWithConstantPrefix_921_11_131()
 {
    if (jj_3R_initializations_952_5_155()) return true;
    return false;
  }

  private boolean jj_3R_declaration_513_35_56()
 {
    if (jj_3R_algebraicEquation_813_5_93()) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1303_10_187()
 {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3R_symbolWithConstantPrefix_920_9_130()
 {
    if (jj_3R_symbolDeclarations_929_5_154()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1280_31_191()
 {
    if (jj_3R_regularFormulaElement_1263_5_176()) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1300_10_186()
 {
    if (jj_scan_token(OR_WORD)) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1297_10_185()
 {
    if (jj_scan_token(AND_WORD)) return true;
    return false;
  }

  private boolean jj_3R_symbolWithConstantPrefix_916_6_129()
 {
    if (jj_scan_token($)) return true;
    return false;
  }

  private boolean jj_3R_importAnnotation_529_9_29()
 {
    if (jj_scan_token(AT_SYM)) return true;
    if (jj_scan_token(ANNOTATION_IMPORT)) return true;
    return false;
  }

  private boolean jj_3R_symbolWithConstantPrefix_916_5_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_symbolWithConstantPrefix_916_6_129()) jj_scanpos = xsp;
    if (jj_3R_symbolName_1415_5_73()) return true;
    xsp = jj_scanpos;
    if (jj_3R_symbolWithConstantPrefix_920_9_130()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithConstantPrefix_921_11_131()) return true;
    }
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1294_9_184()
 {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  private boolean jj_3R_specialFunction_1293_5_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_specialFunction_1294_9_184()) {
    jj_scanpos = xsp;
    if (jj_3R_specialFunction_1297_10_185()) {
    jj_scanpos = xsp;
    if (jj_3R_specialFunction_1300_10_186()) {
    jj_scanpos = xsp;
    if (jj_3R_specialFunction_1303_10_187()) {
    jj_scanpos = xsp;
    if (jj_3R_specialFunction_1306_10_188()) return true;
    }
    }
    }
    }
    if (jj_scan_token(BRAKET_L)) return true;
    return false;
  }

  private boolean jj_3R_declaration_519_11_64()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_reactionDefinitionsNoName_945_5_33()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_model_468_9_31()) return true;
    return false;
  }

  private boolean jj_3R_locateAssignment_907_5_45()
 {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_locateFunction_1398_9_84()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1283_11_194()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_declaration_517_11_63()
 {
    if (jj_3R_propertyWithDeclaration_586_9_97()) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_899_12_110()
 {
    if (jj_3R_connectionConversionFactor_877_5_137()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1282_11_193()
 {
    if (jj_3R_piecewiseAntimonyFormat_1323_5_179()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_property_548_9_36()) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_899_11_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_symbolWithoutConstantPrefix_899_12_110()) jj_scanpos = xsp;
    if (jj_3R_synchronizations_1116_3_111()) return true;
    return false;
  }

  private boolean jj_3R_declaration_515_11_62()
 {
    if (jj_3R_delete_745_5_96()) return true;
    return false;
  }

  private boolean jj_3R_declaration_509_17_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_513_35_56()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_513_57_57()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_513_72_58()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_513_87_59()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_513_105_60()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_514_11_61()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_515_11_62()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_517_11_63()) {
    jj_scanpos = xsp;
    if (jj_3R_declaration_519_11_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_898_11_77()
 {
    if (jj_3R_databaseReference_1100_9_109()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1281_10_192()
 {
    if (jj_3R_specialFunction_1293_5_178()) return true;
    return false;
  }

  private boolean jj_3R_declaration_514_11_61()
 {
    if (jj_scan_token(EOL)) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_897_11_76()
 {
    if (jj_3R_hasUnit_1093_9_108()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_symbol_854_3_35()) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_896_11_75()
 {
    if (jj_3R_subType_1086_3_107()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1280_9_190()
 {
    if (jj_3R_formulaInBrackets_1277_5_177()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1280_9_189()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_formulaInBrackets_1280_9_190()) {
    jj_scanpos = xsp;
    if (jj_3R_formulaInBrackets_1280_31_191()) {
    jj_scanpos = xsp;
    if (jj_3R_formulaInBrackets_1281_10_192()) {
    jj_scanpos = xsp;
    if (jj_3R_formulaInBrackets_1282_11_193()) {
    jj_scanpos = xsp;
    if (jj_3R_formulaInBrackets_1283_11_194()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_eventNoName_1064_9_34()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_fullName_1079_3_47()) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_894_11_74()
 {
    if (jj_3R_assignmentRate_973_5_106()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_subDiagram_1226_9_46()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_locateAssignment_907_5_45()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_assignmentRules_959_5_44()) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_1269_15_183()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_constraint_1013_9_42()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_reactionDefinitions_935_5_43()) return true;
    return false;
  }

  private boolean jj_3R_formulaInBrackets_1277_5_177()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_formulaInBrackets_1280_9_189()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRAKET_R)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_event_986_3_41()) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_1264_13_182()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_symbolWithoutConstantPrefix_885_5_40()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithoutConstantPrefix_894_11_74()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithoutConstantPrefix_896_11_75()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithoutConstantPrefix_897_11_76()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithoutConstantPrefix_898_11_77()) {
    jj_scanpos = xsp;
    if (jj_3R_symbolWithoutConstantPrefix_899_11_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_regularFormulaElement_1263_5_176()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_regularFormulaElement_1264_13_182()) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_regularFormulaElement_1269_15_183()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_formula_1255_11_172()
 {
    if (jj_3R_piecewiseAntimonyFormat_1323_5_179()) return true;
    return false;
  }

  private boolean jj_3R_formula_1254_11_171()
 {
    if (jj_3R_specialFunction_1293_5_178()) return true;
    return false;
  }

  private boolean jj_3R_connectionConversionFactor_877_5_137()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_formula_1253_11_170()
 {
    if (jj_3R_formulaInBrackets_1277_5_177()) return true;
    return false;
  }

  private boolean jj_3R_formula_1252_9_169()
 {
    if (jj_3R_regularFormulaElement_1263_5_176()) return true;
    return false;
  }

  private boolean jj_3R_formula_1252_9_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_formula_1252_9_169()) {
    jj_scanpos = xsp;
    if (jj_3R_formula_1253_11_170()) {
    jj_scanpos = xsp;
    if (jj_3R_formula_1254_11_171()) {
    jj_scanpos = xsp;
    if (jj_3R_formula_1255_11_172()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_model_475_18_55()
 {
    if (jj_3R_declaration_509_17_32()) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpressionInBrackets_832_43_181()
 {
    if (jj_3R_algebraicFormulaElement_841_4_167()) return true;
    return false;
  }

  private boolean jj_3R_model_473_19_54()
 {
    if (jj_3R_mainModelSignature_418_5_92()) return true;
    return false;
  }

  private boolean jj_3R_subSymbolSynchronization_869_6_128()
 {
    if (jj_3R_connectionConversionFactor_877_5_137()) return true;
    return false;
  }

  private boolean jj_3R_formula_1251_5_149()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_formula_1252_9_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_model_472_17_53()
 {
    if (jj_3R_modelSignature_407_5_91()) return true;
    return false;
  }

  private boolean jj_3R_equation_1245_9_120()
 {
    if (jj_3R_formula_1251_5_149()) return true;
    return false;
  }

  private boolean jj_3R_subSymbolSynchronization_864_5_100()
 {
    if (jj_scan_token(SUBSYMBOL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subSymbolSynchronization_869_6_128()) jj_scanpos = xsp;
    if (jj_3R_synchronizations_1116_3_111()) return true;
    return false;
  }

  private boolean jj_3R_symbol_857_11_66()
 {
    if (jj_3R_symbolWithConstantPrefix_916_5_101()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_symbolWithoutConstantPrefix_885_5_40()) return true;
    return false;
  }

  private boolean jj_3R_symbol_855_9_65()
 {
    if (jj_3R_subSymbolSynchronization_864_5_100()) return true;
    return false;
  }

  private boolean jj_3R_algebraicFormulaElement_845_18_174()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_model_468_9_31()
 {
    if (jj_scan_token(MODEL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_model_472_17_53()) {
    jj_scanpos = xsp;
    if (jj_3R_model_473_19_54()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_model_475_18_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_algebraicFormulaElement_842_16_173()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpression_822_35_164()
 {
    if (jj_3R_algebraicExpressionInBrackets_829_5_168()) return true;
    return false;
  }

  private boolean jj_3R_symbol_854_3_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_symbol_855_9_65()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_symbol_857_11_66()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_subDiagram_1226_9_46()
 {
    if (jj_3R_subModelSignature_430_5_85()) return true;
    return false;
  }

  private boolean jj_3R_reactionType_1216_17_161()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_reactionType_1212_17_160()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_algebraicFormulaElement_841_4_167()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_algebraicFormulaElement_842_16_173()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3R_algebraicFormulaElement_845_18_174()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_reactionType_1208_17_159()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    return false;
  }

  private boolean jj_3R_reactionType_1204_21_158()
 {
    if (jj_scan_token(TRIANGULAR_BRACKET_R)) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpressionInBrackets_832_9_180()
 {
    if (jj_3R_algebraicExpressionInBrackets_829_5_168()) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpressionInBrackets_832_9_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_algebraicExpressionInBrackets_832_9_180()) {
    jj_scanpos = xsp;
    if (jj_3R_algebraicExpressionInBrackets_832_43_181()) return true;
    }
    return false;
  }

  private boolean jj_3R_algebraicExpressionInBrackets_829_5_168()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_algebraicExpressionInBrackets_832_9_175()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BRAKET_R)) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpression_822_7_163()
 {
    if (jj_3R_algebraicFormulaElement_841_4_167()) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpression_822_7_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_algebraicExpression_822_7_163()) {
    jj_scanpos = xsp;
    if (jj_3R_algebraicExpression_822_35_164()) return true;
    }
    return false;
  }

  private boolean jj_3R_modelParameters_440_5_147()
 {
    if (jj_scan_token(BRAKET_L)) return true;
    return false;
  }

  private boolean jj_3R_algebraicExpression_822_5_118()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_algebraicExpression_822_7_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_reactionType_1203_3_145()
 {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionType_1204_21_158()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionType_1208_17_159()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionType_1212_17_160()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionType_1216_17_161()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_reactionType_1199_3_144()
 {
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_subModelSignature_430_5_85()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_algebraicEquation_813_5_93()
 {
    if (jj_scan_token(EQUAL_ZERO)) return true;
    if (jj_3R_algebraicExpression_822_5_118()) return true;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_reactionType_1198_3_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionType_1199_3_144()) {
    jj_scanpos = xsp;
    if (jj_3R_reactionType_1203_3_145()) return true;
    }
    return false;
  }

  private boolean jj_3R_symbolElementWithIn_1188_9_134()
 {
    if (jj_3R_in_803_9_156()) return true;
    return false;
  }

  private boolean jj_3R_in_803_9_156()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_symbolElementWithIn_1185_6_133()
 {
    if (jj_scan_token($)) return true;
    return false;
  }

  private boolean jj_3R_symbolElementWithIn_1185_5_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_symbolElementWithIn_1185_6_133()) jj_scanpos = xsp;
    if (jj_3R_symbolName_1415_5_73()) return true;
    xsp = jj_scanpos;
    if (jj_3R_symbolElementWithIn_1188_9_134()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_mainModelSignature_418_5_92()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_subSymbolElement_1177_10_86()
 {
    if (jj_scan_token($)) return true;
    return false;
  }

  private boolean jj_3R_listOfSymbols_794_9_105()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_subSymbolElement_1177_9_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subSymbolElement_1177_10_86()) jj_scanpos = xsp;
    if (jj_scan_token(SUBSYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_modelSignature_411_7_117()
 {
    if (jj_3R_modelParameters_440_5_147()) return true;
    return false;
  }

  private boolean jj_3R_listOfSymbols_792_5_72()
 {
    if (jj_3R_symbolElementWithIn_1185_5_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_listOfSymbols_794_9_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_symbolElement_1169_10_87()
 {
    if (jj_scan_token($)) return true;
    return false;
  }

  private boolean jj_3R_modelSignature_407_5_91()
 {
    if (jj_3R_symbolName_1415_5_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_modelSignature_411_7_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_symbolElement_1169_9_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_symbolElement_1169_10_87()) jj_scanpos = xsp;
    if (jj_3R_symbolName_1415_5_73()) return true;
    return false;
  }

  private boolean jj_3R_varOrConst_784_7_119()
 {
    if (jj_3R_listOfSymbols_792_5_72()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_compartment_763_5_39()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_symbolType_754_5_38()) return true;
    return false;
  }

  private boolean jj_3R_varOrConst_780_5_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_varOrConst_784_7_119()) return true;
    }
    }
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_stoichiometry_1162_3_166()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_substanceOnly_772_9_95()
 {
    if (jj_scan_token(SUBSTANCE_ONLY)) return true;
    if (jj_3R_symbolType_754_5_38()) return true;
    return false;
  }

  private boolean jj_3R_reactionProduct_1154_6_162()
 {
    if (jj_3R_stoichiometry_1162_3_166()) return true;
    return false;
  }

  private boolean jj_3R_reactionProduct_1154_5_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionProduct_1154_6_162()) jj_scanpos = xsp;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_synchronizations_1117_40_138()
 {
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  private boolean jj_3R_reactionReactant_1146_6_157()
 {
    if (jj_3R_stoichiometry_1162_3_166()) return true;
    return false;
  }

  private boolean jj_3R_compartment_763_5_39()
 {
    if (jj_scan_token(COMPARTMENT)) return true;
    if (jj_3R_listOfSymbols_792_5_72()) return true;
    if (jj_3R_end_1339_5_52()) return true;
    return false;
  }

  private boolean jj_3R_reactionReactant_1146_5_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_reactionReactant_1146_6_157()) jj_scanpos = xsp;
    if (jj_3R_symbolElement_1169_9_50()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AntimonyNotationParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[93];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xcb05ff80,0x400,0x800,0x80,0x0,0x80,0x0,0xc005fb00,0x0,0x0,0x0,0xc005fb00,0x0,0x0,0xc005fb00,0xcb05fb80,0x1000,0xc8006080,0x0,0x0,0xc005fb00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0xc0000000,0xc005fb00,0x0,0xc305fb00,0xc305fb00,0xc305fb00,0xc305fb00,0xc305fb00,0x0,0xc005fb00,0x0,0x0,0x0,0x50000,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0xc005fb00,0xc005fb00,0x3000000,0x3000000,0xc005fb00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc205fb00,0x0,0x0,0xd7fffb00,0xd7fffb00,0xd307fb00,0xd7fffb00,0xd7fffb00,0xf80000,0x0,0x81,0xd707fb00,0xd707fb00,0xc305fb00,0xc305fb00,0x0,0x0,0xc005fb00,0x0,0xc005fb00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x13f6c6b,0x0,0x0,0x0,0x100000,0x0,0x0,0x16861,0x800000,0x800000,0x0,0x16861,0x0,0x0,0x16861,0x13f6c6b,0x0,0x408,0x1100000,0x0,0x16861,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x0,0x16863,0x0,0x876861,0x876861,0x876861,0x876861,0x76861,0x0,0x16863,0x0,0x0,0x100,0x60,0x2,0x1,0x100000,0x0,0x1e000,0x0,0x80,0x1000,0x10,0x0,0x16863,0x16863,0xa0000,0xa0000,0x16863,0x20000,0x0,0x0,0x2,0x2,0x2,0x1,0x816861,0x240000,0x0,0x8f6a61,0x8f6a61,0xf6a61,0x8f6a61,0x8f6a61,0x0,0x0,0x100000,0x8f6a61,0x8f6a61,0x876861,0x876861,0x100000,0x200000,0x16863,0x0,0x16861,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x200440,0x0,0x0,0x0,0x0,0x0,0x200,0x400,0x0,0x0,0x200,0x30400,0x30000,0x30000,0x80400,0x200440,0x0,0x0,0x0,0x2400,0x420,0xc10,0xc10,0x800,0x1002,0x4,0x200,0x440,0x200,0x200,0x6,0x200,0x6,0x1442,0x440,0x0,0x10,0x0,0x400,0x200,0x2c0400,0x2c0400,0x2c0400,0x2c0400,0x2c0400,0x40,0x400,0x80000,0x80000,0x0,0x80000,0x0,0x10,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x400,0x200400,0x0,0x0,0x200400,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x20400,0x0,0x200,0x2f0410,0x2f0410,0x2f0410,0x2f0610,0x2f0610,0x0,0x200,0x0,0x2f0410,0x2f0410,0x2c0400,0x2c0400,0x0,0x0,0x440,0x200,0x400,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AntimonyNotationParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AntimonyNotationParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AntimonyNotationParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AntimonyNotationParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AntimonyNotationParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AntimonyNotationParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AntimonyNotationParser(AntimonyNotationParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AntimonyNotationParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 93; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[86];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 93; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 86; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 23; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}

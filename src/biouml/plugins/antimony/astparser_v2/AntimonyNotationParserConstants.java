/* Generated By:JJTree&JavaCC: Do not edit this line. AntimonyNotationParserConstants.java */
package biouml.plugins.antimony.astparser_v2;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AntimonyNotationParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 7;
  /** RegularExpression Id. */
  int IMPORT = 8;
  /** RegularExpression Id. */
  int MODEL = 9;
  /** RegularExpression Id. */
  int FUNCTION = 10;
  /** RegularExpression Id. */
  int GLOBAL = 11;
  /** RegularExpression Id. */
  int AS = 12;
  /** RegularExpression Id. */
  int SYMBOL_TYPE = 13;
  /** RegularExpression Id. */
  int COMPARTMENT = 14;
  /** RegularExpression Id. */
  int UNIT = 15;
  /** RegularExpression Id. */
  int SUBTYPE = 16;
  /** RegularExpression Id. */
  int STANDART_FUNCTION = 17;
  /** RegularExpression Id. */
  int RELATIONSHIP_TYPE = 18;
  /** RegularExpression Id. */
  int POWER = 19;
  /** RegularExpression Id. */
  int GEQ = 20;
  /** RegularExpression Id. */
  int LEQ = 21;
  /** RegularExpression Id. */
  int AND_WORD = 22;
  /** RegularExpression Id. */
  int OR_WORD = 23;
  /** RegularExpression Id. */
  int AND = 24;
  /** RegularExpression Id. */
  int OR = 25;
  /** RegularExpression Id. */
  int PIECEWISE = 26;
  /** RegularExpression Id. */
  int DELETE = 27;
  /** RegularExpression Id. */
  int TRUE_OR_FALSE = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int CONST = 30;
  /** RegularExpression Id. */
  int VAR = 31;
  /** RegularExpression Id. */
  int IN = 32;
  /** RegularExpression Id. */
  int $ = 33;
  /** RegularExpression Id. */
  int ASSERT = 34;
  /** RegularExpression Id. */
  int SUBSTANCE_ONLY = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int IS = 37;
  /** RegularExpression Id. */
  int HAS = 38;
  /** RegularExpression Id. */
  int COLON = 39;
  /** RegularExpression Id. */
  int RATE_EQUAL = 40;
  /** RegularExpression Id. */
  int NOT_EQUAL = 41;
  /** RegularExpression Id. */
  int EQUAL_ZERO = 42;
  /** RegularExpression Id. */
  int AT = 43;
  /** RegularExpression Id. */
  int AFTER = 44;
  /** RegularExpression Id. */
  int PRIORITY = 45;
  /** RegularExpression Id. */
  int FROM_TRIGGER = 46;
  /** RegularExpression Id. */
  int PERSISTENT = 47;
  /** RegularExpression Id. */
  int TRIGGER_INITIAL_VALUE = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUS = 50;
  /** RegularExpression Id. */
  int NOT = 51;
  /** RegularExpression Id. */
  int SEMICOLON = 52;
  /** RegularExpression Id. */
  int ARROW = 53;
  /** RegularExpression Id. */
  int BRAKET_R = 54;
  /** RegularExpression Id. */
  int BRAKET_L = 55;
  /** RegularExpression Id. */
  int AT_SYM = 56;
  /** RegularExpression Id. */
  int PROPERTY_TYPE = 57;
  /** RegularExpression Id. */
  int ANNOTATION_IMPORT = 58;
  /** RegularExpression Id. */
  int DECLARATION = 60;
  /** RegularExpression Id. */
  int PROP_EOL = 61;
  /** RegularExpression Id. */
  int PROP_SEMICOLON = 62;
  /** RegularExpression Id. */
  int BRACE_R = 63;
  /** RegularExpression Id. */
  int SQUARE_BRACKET_L = 65;
  /** RegularExpression Id. */
  int BRACE_L = 66;
  /** RegularExpression Id. */
  int SQUARE_BRACKET_R = 67;
  /** RegularExpression Id. */
  int EQUAL = 68;
  /** RegularExpression Id. */
  int LOCATE_FUNCTION = 69;
  /** RegularExpression Id. */
  int SUBSYMBOL = 70;
  /** RegularExpression Id. */
  int LOCATE_BRAKET_L = 71;
  /** RegularExpression Id. */
  int LOCATE_BRAKET_R = 72;
  /** RegularExpression Id. */
  int COMMA = 73;
  /** RegularExpression Id. */
  int SYMBOL = 74;
  /** RegularExpression Id. */
  int DOT = 75;
  /** RegularExpression Id. */
  int TEXT_STRING = 76;
  /** RegularExpression Id. */
  int SUBCOMPLEX = 77;
  /** RegularExpression Id. */
  int LETTER = 78;
  /** RegularExpression Id. */
  int DIGIT = 79;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_L = 80;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_R = 81;
  /** RegularExpression Id. */
  int OPERATOR = 82;
  /** RegularExpression Id. */
  int STAR = 83;
  /** RegularExpression Id. */
  int EXPONENT = 84;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 85;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT = 1;
  /** Lexical state. */
  int ANNOTATION = 2;
  /** Lexical state. */
  int PROPERTY = 3;
  /** Lexical state. */
  int LOCATE = 4;
  /** Lexical state. */
  int LIST = 5;
  /** Lexical state. */
  int CONTAINER = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 6>",
    "<EOL>",
    "\"import\"",
    "<MODEL>",
    "\"function\"",
    "<GLOBAL>",
    "\"as\"",
    "<SYMBOL_TYPE>",
    "\"compartment\"",
    "\"unit\"",
    "\"subtype\"",
    "<STANDART_FUNCTION>",
    "<RELATIONSHIP_TYPE>",
    "<POWER>",
    "\"geq\"",
    "\"leq\"",
    "\"and\"",
    "\"or\"",
    "\"&\"",
    "\"|\"",
    "\"piecewise\"",
    "\"delete\"",
    "<TRUE_OR_FALSE>",
    "\"end\"",
    "\"const\"",
    "\"var\"",
    "\"in\"",
    "\"$\"",
    "\"assert\"",
    "\"substanceOnly\"",
    "\"else\"",
    "\"is\"",
    "\"has\"",
    "\":\"",
    "<RATE_EQUAL>",
    "<NOT_EQUAL>",
    "<EQUAL_ZERO>",
    "\"at\"",
    "\"after\"",
    "\"priority\"",
    "\"fromTrigger\"",
    "\"persistent\"",
    "\"t0\"",
    "\"+\"",
    "\"-\"",
    "\"not\"",
    "\";\"",
    "<ARROW>",
    "\")\"",
    "\"(\"",
    "\"@\"",
    "<PROPERTY_TYPE>",
    "<ANNOTATION_IMPORT>",
    "<token of kind 59>",
    "<DECLARATION>",
    "<PROP_EOL>",
    "<PROP_SEMICOLON>",
    "\"}\"",
    "<token of kind 64>",
    "\"[\"",
    "\"{\"",
    "\"]\"",
    "\"=\"",
    "\"locate\"",
    "<SUBSYMBOL>",
    "<LOCATE_BRAKET_L>",
    "<LOCATE_BRAKET_R>",
    "\",\"",
    "<SYMBOL>",
    "\".\"",
    "<TEXT_STRING>",
    "<SUBCOMPLEX>",
    "<LETTER>",
    "<DIGIT>",
    "\"<\"",
    "\">\"",
    "<OPERATOR>",
    "\"*\"",
    "<EXPONENT>",
    "<FLOATING_POINT_LITERAL>",
  };

}

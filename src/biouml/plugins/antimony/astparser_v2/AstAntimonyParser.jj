/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AstAntimonyParser.jj */
/*@egen*//***************************************************************
                   OPTIONS
***************************************************************/
options
{
               
                           
  STATIC = false;
                      
  DEBUG_PARSER = false;
                    
}

/***************************************************************
                   PARSER BEGIN
***************************************************************/
PARSER_BEGIN(AntimonyNotationParser)
package biouml.plugins.antimony.astparser_v2;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import biouml.plugins.antimony.AntimonyAnnotationImporter;
import java.util.Stack;

public class AntimonyNotationParser extends Parser/*@bgen(jjtree)*/implements AntimonyNotationParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTAntimonyNotationParserState jjtree = new JJTAntimonyNotationParserState();

/*@egen*/
	protected Logger log = Logger.getLogger(AntimonyNotationParser.class.getName());
    private int algEqCount = 0;
    /** Default constructor. */
    public AntimonyNotationParser()
    {
        this (new StringReader("0"));
    }

    public AstStart parse(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstStart astStart = Start();
        //postprocess for case when declarations are kept in outside model
        postprocess(astStart);
        return astStart;
    }

    private void postprocess(AstStart astStart)
    {
        if(astStart.hasOutsideModel())
            astStart.createOutsideModelNode();
    }

    public AstEquation parseFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstEquation equation = parseFormule();
        return equation;
    }

    public AstUnitFormula parseUnitFormule(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstUnitFormula equation = parseUnitFormule();
        return equation;
    }
    
    private void parseAnnotation(AstImportAnnotation node) 
    {
    	try
    	{
        	AntimonyAnnotationImporter.addAnnotation(node);
        }
        catch (Exception e)
        {
        	log.log(Level.SEVERE, e.getMessage());
        }
    }
    
    private void error_skipto(int kind) {
	  ParseException e = generateParseException();  
	  log.log(Level.WARNING, e.toString());
	  Token t;
	  
	  do {
	    t = getNextToken();
	  }
	  while (t.kind != kind);
	}
	
}


PARSER_END(AntimonyNotationParser)

/***************************************************************
                       SKIP & TOKENS
***************************************************************/

TOKEN_MGR_DECLS : {
Stack lexicalStateStack = new Stack();
}

SPECIAL_TOKEN : /* instead of SKIP */
{
  <([" ", "\t"])+>
| <"///" (~["\n","\r"])* >
| <("//" | "#") (~["\n","\r"])* >
| <"/*"> : ML_COMMENT
}
<ML_COMMENT> SPECIAL_TOKEN :
{
  <"*/"> : DEFAULT
| <~[]>
}

< DEFAULT >TOKEN :
{
  < EOL :   ("\n" | "\r"  | "\r\n" ) >
}

TOKEN : /* RESERVED WORDS */
{
  < IMPORT : "import" >
  
| < MODEL : ( "model" | "module" ) >

| < FUNCTION : "function" >

| < GLOBAL : ("Global" | "GLOBAL" | "global") >

| < AS : "as" >

| < SYMBOL_TYPE : ( "species" | "gene")>

| < COMPARTMENT : "compartment" >

| < UNIT : "unit" >

| < SUBTYPE : "subtype" >

| < STANDART_FUNCTION :("abs" | "annotation" | "annotation-xml" | "apply"
                | "arccos" | "arccosh" | "arccot" | "arccoth" | "arccsc"
                | "arccsch" | "arcsec" | "arcsech" | "arcsin" | "arcsinh"
                | "arctan" | "arctanh" | "bvar" | "ceiling" | "ci" | "cn"
                | "cos" | "cosh" | "cot" | "coth" | "csc" | "csch" | "csymbol"
                | "degree" | "divide" | "eq" | "exp" | "exponentiale"
                | "factorial" | "floor" | "gt" | "infinity"
                | "lambda" | "ln" | "log" | "logbase" | "lt" | "math"
                | "minus" | "neq" | "notanumber" | "otherwise"
                | "pi" | "piece" | "plus" | "root" | "sec"
                | "sech" | "semantics" | "sep" | "sin" | "sinh" | "tan" | "tanh"
                | "times" | "xor" | "acos" | "asin" | "atan" | "ceil"
                | "delay" | "log10" | "sqr" | "sqrt") >
                
| <RELATIONSHIP_TYPE : ("identity" | "biological_entity_is" | "hasPart" | "part"
				| "isPartOf" | "parthood" | "isVersionOf" | "hypernym" | "hasVersion" 
				| "version" | "isHomologTo" | "homolog" | "isDescribedBy" 
				| "description" | "isEncodedBy" | "encoder" | "encodes" 
				| "encodement" | "occursIn" | "container" | "hasProperty" 
				| "property" | "isPropertyOf" | "propertyBearer" | "hasTaxon" 
				| "taxon") >			

| < POWER : "power"|"pow" >

| < GEQ : "geq" >

| < LEQ : "leq" >

| < AND_WORD : "and" >

| < OR_WORD  : "or" >

| < AND: "&">

| < OR : "|">

| < PIECEWISE : "piecewise" >

| < DELETE : "delete" >

| < TRUE_OR_FALSE : ("true"|"false") >

| < END : "end">

| < CONST : "const" >

| < VAR : "var" >

| < IN : "in" >

| < $ : "$" >

| < ASSERT : "assert">

| < SUBSTANCE_ONLY : "substanceOnly">

| < ELSE : "else">

| < IS : "is" >

| < HAS : "has" >

| < COLON : ":">

| < RATE_EQUAL : "'" (" ")* "=" >

| < NOT_EQUAL : "!" (" ")* "=" >

| < EQUAL_ZERO : "0" (" ")* "=" >

| < AT : "at" >

| < AFTER : "after">

| < PRIORITY : "priority">

| < FROM_TRIGGER : "fromTrigger">

| < PERSISTENT : "persistent">

| < TRIGGER_INITIAL_VALUE : "t0">

| < PLUS : "+">

| < MINUS : "-">

| < NOT : "not">

| < SEMICOLON : ";">

| < ARROW : ("=" (" ")* ">")>

| < BRAKET_R : ")">

| < BRAKET_L : "(">

}

/* PROPERTY */
< DEFAULT > TOKEN: {
<AT_SYM:"@">:ANNOTATION
}

< ANNOTATION > TOKEN: {
< PROPERTY_TYPE : ("sbgn" | "glycan" | "smiles" | "rdf" | "layout" | "biouml" ) > : PROPERTY
| < ANNOTATION_IMPORT : < IMPORT > > : PROPERTY}

< PROPERTY, LOCATE, LIST > SPECIAL_TOKEN: {
  <([" ", "\t"])+> }
  
< PROPERTY> TOKEN: {
< DECLARATION : ("Annotation" | "Table")  >
| < PROP_EOL : < EOL >> : DEFAULT 
| < PROP_SEMICOLON : < SEMICOLON >> : DEFAULT }


< CONTAINER > TOKEN: {
< BRACE_R: "}" > {SwitchTo((int)lexicalStateStack.pop());}
}

< CONTAINER > SPECIAL_TOKEN: {
  <([" ", "\t", "\n", "\r"])+>
}
  
< PROPERTY, CONTAINER > TOKEN: {
< SQUARE_BRACKET_L : "[" > { lexicalStateStack.push(curLexState); } : LIST
| < BRACE_L: "{" > { lexicalStateStack.push(curLexState); } : CONTAINER 
}


< LIST > TOKEN: 
{
< SQUARE_BRACKET_R : "]" > {SwitchTo((int)lexicalStateStack.pop());}
}

< DEFAULT, PROPERTY, CONTAINER > TOKEN: 
{
  < EQUAL : "=" >
| < LOCATE_FUNCTION : "locate" >  { lexicalStateStack.push(curLexState); }: LOCATE
}

< DEFAULT, LOCATE, LIST > TOKEN: 
{
  < SUBSYMBOL : < SYMBOL > ("." < SYMBOL >)+ > 
}

< LOCATE > TOKEN: 
{
  < LOCATE_BRAKET_L: < BRAKET_L > > 
  |
  < LOCATE_BRAKET_R: < BRAKET_R > > {SwitchTo((int)lexicalStateStack.pop());}
}

< DEFAULT, PROPERTY, LOCATE, LIST, CONTAINER > TOKEN: 
{
  < COMMA : "," > 

| < SYMBOL : ( < LETTER > | "_" ) ( < LETTER > | < DIGIT > | "_" )* >
}

< DEFAULT, PROPERTY, LOCATE, CONTAINER > TOKEN: 
{
  < DOT : "." >
| < TEXT_STRING : "\""  ( ~[ "\"", "\n", "\r" ] )* "\"" >
}

< PROPERTY > TOKEN: 
{
  < SUBCOMPLEX : ("__sub" ("_" )* (< DIGIT >)+ "__") >
}

TOKEN : /* IDENTIFIERS */
{
  < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < TRIANGULAR_BRACKET_L : "<" >
| < TRIANGULAR_BRACKET_R : ">" >
| < OPERATOR : [ "/", "^"] >
| < STAR : "*" >
| < #EXPONENT: ["e","E"] (< PLUS > | < MINUS >)? (["0"-"9"])+ >
| < FLOATING_POINT_LITERAL:
            (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
            | "." (["0"-"9"])+ (<EXPONENT>)?
            | (["0"-"9"])+ (<EXPONENT>)?
    >
}


/***************************************************************
                   GRAMMAR START
***************************************************************/
AstStart Start()       :
{/*@bgen(jjtree) Start */
  AstStart jjtn000 = new AstStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    ( astElement() )*

    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ 
    {
        algEqCount = 0;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void astElement(): 
{AstImportAnnotation imp;}
{
	try {	
	    ( 
	    LOOKAHEAD(2) importModel() | 
	    LOOKAHEAD(2) imp = importAnnotation() {parseAnnotation(imp);} | 
	    LOOKAHEAD(3) unit()| 
	    LOOKAHEAD(3) model() | 
	    function()  | 
	    LOOKAHEAD(3) declaration() | 
	    globalVariable() )
    } catch (ParseException e) {
    	error_skipto(EOL);
    }

}

void importModel()        :
{/*@bgen(jjtree) Import */
  AstImport jjtn000 = new AstImport(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Import */
    try {
/*@egen*/
    < IMPORT >
    text()
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void text()      :
{/*@bgen(jjtree) Text */
  AstText jjtn000 = new AstText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Text */
    try {
/*@egen*/
    < TEXT_STRING >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {jjtn000.setText(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void function()          :
{/*@bgen(jjtree) Function */
  AstFunction jjtn000 = new AstFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    < FUNCTION >

    functionSignature()

    (/*@bgen(jjtree) EOL */
     {
       AstEOL jjtn001 = new AstEOL(JJTEOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< EOL >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/      )*
    equation()
    (/*@bgen(jjtree) Semicolon */
     {
       AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< SEMICOLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/           )?
    (/*@bgen(jjtree) EOL */
     {
       AstEOL jjtn003 = new AstEOL(JJTEOL);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< EOL >/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/      )*
    < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void functionSignature()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    symbolName(){jjtn000.setName(token.image); }
    (< BRAKET_L >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )
    (
        ( symbolName()/*@bgen(jjtree) Symbol */
                       {
                         AstSymbol jjtn002 = new AstSymbol(JJTSYMBOL);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                         jjtn002.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn002.setName(token.image);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/        )
        (/*@bgen(jjtree) Comma */
         {
           AstComma jjtn003 = new AstComma(JJTCOMMA);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/","/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/          symbolName()/*@bgen(jjtree) Symbol */
                                   {
                                     AstSymbol jjtn004 = new AstSymbol(JJTSYMBOL);
                                     boolean jjtc004 = true;
                                     jjtree.openNodeScope(jjtn004);
                                     jjtn004.jjtSetFirstToken(getToken(1));
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn004, true);
                                     jjtc004 = false;
                                     jjtn004.jjtSetLastToken(getToken(0));
                                   }
/*@egen*/ {jjtn004.setName(token.image);}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc004) {
                                       jjtree.closeNodeScope(jjtn004, true);
                                       jjtn004.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/        )*
    )?
    < BRAKET_R >/*@bgen(jjtree) RegularFormulaElement */
                 {
                   AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                   jjtn005.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                   jjtn005.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn005.setElement(token.image);}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtn005.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                       /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void modelSignature()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    symbolName()
    {
        jjtn000.setName(token.image);
    }
    ( modelParameters() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void mainModelSignature()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    < STAR >
    symbolName()
    {
            jjtn000.setName("*" + token.image);
    }
    ( modelParameters() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void subModelSignature()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    symbolName()
    {
        jjtn000.setName(token.image);
    }
    modelParameters()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void modelParameters():
{}
{
    (< BRAKET_L >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )

    (
        parametr()
        (/*@bgen(jjtree) Comma */
          {
            AstComma jjtn002 = new AstComma(JJTCOMMA);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ ","/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/        parametr() )*
    )?

    (< BRAKET_R >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn003.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )

}

void parametr()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String portType = "";
}
{/*@bgen(jjtree) Symbol */
  try {
/*@egen*/
  ( ( < TRIANGULAR_BRACKET_L > | < TRIANGULAR_BRACKET_R > ) {portType = token.image;})?
  symbolName()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    jjtn000.setName(portType + token.image);
    portType = "";
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void model()       :
{/*@bgen(jjtree) Model */
  AstModel jjtn000 = new AstModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Model */
        try {
/*@egen*/	
	try {	
		< MODEL >

	    (
	        modelSignature()
	        | mainModelSignature(){jjtn000.setTypeModel(AstModel.ModelType.MainModel);}
	    )
		(declaration())*
    	< END >
    	
    } catch (ParseException e) {
    	error_skipto(EOL);
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}   


void globalVariable()        :
{/*@bgen(jjtree) Global */
  AstGlobal jjtn000 = new AstGlobal(JJTGLOBAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Global */
    try {
/*@egen*/
    < GLOBAL >
    {jjtn000.setFormat(token.image);}
    (/*@bgen(jjtree) Symbol */
        {
          AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        (
            symbolName() {jjtn001.setName(token.image);}
            (as())?
        )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/        
    )

    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void as()    :
{/*@bgen(jjtree) As */
  AstAs jjtn000 = new AstAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) As */
    try {
/*@egen*/
    < AS >
    (/*@bgen(jjtree) Symbol */
     {
       AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(symbolName()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/        )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void declaration():
{}
{
		try {
		( LOOKAHEAD(3) model()
		| LOOKAHEAD(3) reactionDefinitionsNoName() 
        | LOOKAHEAD(3) eventNoName()  
        | LOOKAHEAD(3) symbol() | algebraicEquation() | varOrConst() | symbolType() | substanceOnly() | compartment()
        | (/*@bgen(jjtree) EOL */
           {
             AstEOL jjtn001 = new AstEOL(JJTEOL);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/< EOL >/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/     )
        | delete()
        | LOOKAHEAD(4) property()
        | propertyWithDeclaration()
        |/*@bgen(jjtree) Semicolon */
          {
            AstSemicolon jjtn002 = new AstSemicolon(JJTSEMICOLON);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ < SEMICOLON >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           )
    		
    	} catch (ParseException e) {
    		error_skipto(EOL);
    	}
        
}

AstImportAnnotation importAnnotation()                  :
{/*@bgen(jjtree) ImportAnnotation */
  AstImportAnnotation jjtn000 = new AstImportAnnotation(JJTIMPORTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ImportAnnotation */
        try {
/*@egen*/
	< AT_SYM >
	< ANNOTATION_IMPORT >
	< SYMBOL > 
	{jjtn000.setAnnotationType(token.image);}
	
	(/*@bgen(jjtree) Equal */
         {
           AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< EQUAL>/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
	text()
	propertyEnd()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void property()          :
{/*@bgen(jjtree) Property */
        AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	String notationType = null;
}
{/*@bgen(jjtree) Property */
        try {
/*@egen*/
	(
	< AT_SYM >
	< PROPERTY_TYPE > 
	{
		jjtn000.setNotationType(token.image);
		notationType = jjtn000.getNotationType();	
	} 
	)
	
	(
	locateFunction()
	|
	(symbolName() {jjtn000.addChainName(token.image);} 
		(
			LOOKAHEAD(2, 
			{	
				(getToken(2).kind == SYMBOL || getToken(2).kind == SUBCOMPLEX ) &&
				!AntimonyAnnotationImporter.isPropertyImported(notationType, getToken(2).image)
				
			})
			< DOT > (<SYMBOL> | < SUBCOMPLEX >) {jjtn000.addChainName(token.image);}
		)*
	)

	)
	
	(
	singleProperty(true, notationType, true)		
	|
	multipleProperty(false, notationType, true)
	)
	
    propertyEnd()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void propertyWithDeclaration()          :
{/*@bgen(jjtree) Property */
  AstProperty jjtn000 = new AstProperty(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Property */
        try {
/*@egen*/
	(
	< AT_SYM >
	< PROPERTY_TYPE > 
	{
		jjtn000.setNotationType(token.image);
		String notationType = jjtn000.getNotationType();
		
		if (!AntimonyAnnotationImporter.isAnnotationImported(notationType))	
			throw new ParseException("Notation type " + notationType + " was not imported");
	} 
	)
	(< DECLARATION > 
	{
		jjtn000.setDeclarationType(token.image);
	})
	
	(symbolName() {jjtn000.addChainName(token.image);} )

    (
	singleProperty(true, notationType, false)		
	|
	multipleProperty(false, notationType, false)
	)
	
    propertyEnd()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void singleProperty(boolean dotNeeded, String notationType, boolean checkNeeded)                :
{/*@bgen(jjtree) SingleProperty */
  AstSingleProperty jjtn000 = new AstSingleProperty(JJTSINGLEPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SingleProperty */
        try {
/*@egen*/
	(< DOT > 
	{
		if (dotNeeded) 
			jjtn000.setDotNeeded(dotNeeded);
		else 
			throw new ParseException("< DOT > was not expected");
	})? 
	(
		< SYMBOL > 
		{ 
			jjtn000.setPropertyName(token.image); 
			if (checkNeeded)
			{
				try
				{
					AntimonyAnnotationImporter.checkPropertyImport(notationType, token.image);
				}
				catch (Exception e) {
					log.log(Level.SEVERE, e.getMessage());
				}
			}
	})
	(/*@bgen(jjtree) Equal */
         {
           AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< EQUAL>/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
    (text() | listOfVals() | LOOKAHEAD(2) mapOfVals() | setOfVals())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void multipleProperty(boolean dotNeeded, String notationType, boolean checkNeeded):
{}
{
	(/*@bgen(jjtree) Equal */
         {
           AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< EQUAL >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(
		singleProperty(false, notationType, checkNeeded)
		( (/*@bgen(jjtree) Comma */
                   {
                     AstComma jjtn003 = new AstComma(JJTCOMMA);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                     jjtn003.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                       jjtn003.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/       ) singleProperty(false, notationType, checkNeeded) )*
	)
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        jjtn004.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
             jjtn004.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
}

void listOfVals()      :
{/*@bgen(jjtree) List */
  AstList jjtn000 = new AstList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) List */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(propertyName())?    
    (/*@bgen(jjtree) Comma */
        {
          AstComma jjtn002 = new AstComma(JJTCOMMA);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        < COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/       
        propertyName()
    )*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	
}

void mapOfVals()     :
{/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Map */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(
		keyVal() 
		( (/*@bgen(jjtree) Comma */
                   {
                     AstComma jjtn002 = new AstComma(JJTCOMMA);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/       ) keyVal() )*
	)
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	
}

void setOfVals()     :
{/*@bgen(jjtree) Set */
  AstSet jjtn000 = new AstSet(JJTSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Set */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(
		( listOfVals() | mapOfVals() )
		( (/*@bgen(jjtree) Comma */
                   {
                     AstComma jjtn002 = new AstComma(JJTCOMMA);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/       ) ( listOfVals() | mapOfVals() ) )*
	)
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
	
}

void keyVal()                :
{/*@bgen(jjtree) SingleProperty */
  AstSingleProperty jjtn000 = new AstSingleProperty(JJTSINGLEPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SingleProperty */
        try {
/*@egen*/ 
	(
		< SYMBOL > 
		{ jjtn000.setPropertyName(token.image); 
		
	})
	(/*@bgen(jjtree) Equal */
         {
           AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< EQUAL>/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
    (text() | listOfVals() | propertyName())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void propertyName()         :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Symbol */
        try {
/*@egen*/
	(< SYMBOL > | < SUBSYMBOL >)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{jjtn000.setName(token.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 
}

void propertyEnd():
{}
{
    (/*@bgen(jjtree) Semicolon */
     {
       AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< PROP_SEMICOLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/            |/*@bgen(jjtree) EOL */
                                     {
                                       AstEOL jjtn002 = new AstEOL(JJTEOL);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                       jjtn002.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ < PROP_EOL >/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002, true);
                                         jjtn002.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/      | < EOF >)
}

void unit()      :
{/*@bgen(jjtree) Unit */
  AstUnit jjtn000 = new AstUnit(JJTUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Unit */
    try {
/*@egen*/
    < UNIT >
    symbolElement()
    (unitFormula())?
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void unitFormula():
{}
{
	(/*@bgen(jjtree) Equal */
         {
           AstEqual jjtn001 = new AstEqual(JJTEQUAL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< EQUAL >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
    (/*@bgen(jjtree) UnitFormula */
     {
       AstUnitFormula jjtn002 = new AstUnitFormula(JJTUNITFORMULA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/algebraicExpression()/*@bgen(jjtree)*/
     } catch (Throwable jjte002) {
       if (jjtc002) {
         jjtree.clearNodeScope(jjtn002);
         jjtc002 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte002 instanceof RuntimeException) {
         throw (RuntimeException)jjte002;
       }
       if (jjte002 instanceof ParseException) {
         throw (ParseException)jjte002;
       }
       throw (Error)jjte002;
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/              )
}




void delete()        :
{/*@bgen(jjtree) Delete */
  AstDelete jjtn000 = new AstDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Delete */
    try {
/*@egen*/
    < DELETE >
    subSymbolElement()
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void symbolType()            :
{/*@bgen(jjtree) SymbolType */
  AstSymbolType jjtn000 = new AstSymbolType(JJTSYMBOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SymbolType */
    try {
/*@egen*/
    < SYMBOL_TYPE >  {jjtn000.setType(token.image);}
    listOfSymbols()
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void compartment()            :
{/*@bgen(jjtree) SymbolType */
  AstSymbolType jjtn000 = new AstSymbolType(JJTSYMBOLTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SymbolType */
    try {
/*@egen*/
    < COMPARTMENT > {jjtn000.setType(token.image);}
    listOfSymbols()
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void substanceOnly()               :
{/*@bgen(jjtree) SubstanceOnly */
  AstSubstanceOnly jjtn000 = new AstSubstanceOnly(JJTSUBSTANCEONLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SubstanceOnly */
        try {
/*@egen*/
	< SUBSTANCE_ONLY >
    symbolType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void varOrConst()            :
{/*@bgen(jjtree) VarOrConst */
  AstVarOrConst jjtn000 = new AstVarOrConst(JJTVARORCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) VarOrConst */
    try {
/*@egen*/
    (< VAR > |< CONST >){jjtn000.setType(token.image);}
    (
    LOOKAHEAD(2) symbolType()
    | LOOKAHEAD(3) compartment()
    | listOfSymbols())
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void listOfSymbols():
{
}
{
    symbolElementWithIn()
    (/*@bgen(jjtree) Comma */
        {
          AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        ","/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/       
        symbolElementWithIn()
    )*
}

void in()    :
{/*@bgen(jjtree) In */
  AstIn jjtn000 = new AstIn(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) In */
        try {
/*@egen*/
        < IN >
        symbolElement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void algebraicEquation()         :
{/*@bgen(jjtree) Symbol */
 AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
 algEqCount++;
 jjtn000.setName("A" + algEqCount);
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    (/*@bgen(jjtree) EqualZero */
     {
       AstEqualZero jjtn001 = new AstEqualZero(JJTEQUALZERO);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< EQUAL_ZERO >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/           )
	(/*@bgen(jjtree) Equation */
         {
           AstEquation jjtn002 = new AstEquation(JJTEQUATION);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/algebraicExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/            {jjtn000.setTypeDeclaration(AstSymbol.ALGEBRAIC);})
	end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/

}

void algebraicExpression():
{}
{
    ( algebraicFormulaElement() | algebraicExpressionInBrackets())*
}

void algebraicExpressionInBrackets():
{
}
{
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )

    (
        algebraicExpressionInBrackets() | algebraicFormulaElement()
    )*

    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
}

void algebraicFormulaElement()                       :
{/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RegularFormulaElement */
   try {
/*@egen*/
   (
               symbolName() {jjtn000.setString(true);} | < STAR > | < OPERATOR >
               | <AND> | <OR>
               | < PLUS > | < MINUS >
               | < FLOATING_POINT_LITERAL > {jjtn000.setNumber(true);}
   )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/{jjtn000.setElement(token.image);}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/

}

void symbol():
{
}
{
  (
        subSymbolSynchronization()
        | LOOKAHEAD(3)symbolWithoutConstantPrefix()
        | symbolWithConstantPrefix()
  )
}

void subSymbolSynchronization()          :
{/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SubSymbol */
    try {
/*@egen*/
    < SUBSYMBOL >
    {
        jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);
        jjtn000.setName(token.image);
    }
    (connectionConversionFactor())?
    synchronizations()
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void connectionConversionFactor()                            :
{/*@bgen(jjtree) ConnectionConversionFactor */
  AstConnectionConversionFactor jjtn000 = new AstConnectionConversionFactor(JJTCONNECTIONCONVERSIONFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConnectionConversionFactor */
    try {
/*@egen*/
    < STAR >
    symbolElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void symbolWithoutConstantPrefix()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    symbolName() {jjtn000.setName(token.image); }

    (
        LOOKAHEAD(2)/*@bgen(jjtree) Colon */
                     {
                       AstColon jjtn001 = new AstColon(JJTCOLON);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ < COLON >/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/        event() {jjtn000.setTypeDeclaration(AstSymbol.EVENT);}
        | LOOKAHEAD(2)/*@bgen(jjtree) Colon */
                       {
                         AstColon jjtn002 = new AstColon(JJTCOLON);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtn002.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ < COLON >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtn002.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/        constraint() {jjtn000.setTypeDeclaration(AstSymbol.CONSTRAINT);}
        |LOOKAHEAD(3)(/*@bgen(jjtree) Colon */
                       {
                         AstColon jjtn003 = new AstColon(JJTCOLON);
                         boolean jjtc003 = true;
                         jjtree.openNodeScope(jjtn003);
                         jjtn003.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ < COLON >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc003) {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtn003.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/        reactionDefinitions((AstSymbol)jjtn000))
        | LOOKAHEAD(2) assignmentRules() {jjtn000.setTypeDeclaration(AstSymbol.RULE);}
        | LOOKAHEAD(2) locateAssignment() {jjtn000.setTypeDeclaration(AstSymbol.FUNCTION_RETURN_ASSIGNMENT);}
        | LOOKAHEAD(2)/*@bgen(jjtree) Colon */
                       {
                         AstColon jjtn004 = new AstColon(JJTCOLON);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                         jjtn004.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ < COLON >/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtn004.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/        subDiagram() {jjtn000.setTypeDeclaration(AstSymbol.SUBDIAGRAM);}
        | assignmentRate() {jjtn000.setTypeDeclaration(AstSymbol.RATE);}
        | LOOKAHEAD(2) fullName() {jjtn000.setTypeDeclaration(AstSymbol.DISPLAY_NAME);}
        | subType() {jjtn000.setTypeDeclaration(AstSymbol.SUBTYPE);}
        | hasUnit() {jjtn000.setTypeDeclaration(AstSymbol.SET_UNIT);}
        | databaseReference() {jjtn000.setTypeDeclaration(AstSymbol.DATABASE_REFERENCE);}
        | (connectionConversionFactor())? synchronizations() {jjtn000.setTypeDeclaration(AstSymbol.SYNCHRONIZATIONS);}
    )
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void locateAssignment():
{}
{/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    locateFunction()
}


void symbolWithConstantPrefix()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    (< $ >{ jjtn000.setConstantPrefix(true);})?
    symbolName() {jjtn000.setName(token.image); }

    (
        symbolDeclarations() {jjtn000.setTypeDeclaration(AstSymbol.PARENT_DECLARATION);}
        | initializations() {jjtn000.setTypeDeclaration(AstSymbol.INIT);}
    )
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void symbolDeclarations():
{}
{
    in()
}

void reactionDefinitions(AstSymbol declaration):
{}
{
    reactionTitle(declaration)
    (
        (/*@bgen(jjtree) Semicolon */
         {
           AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< SEMICOLON >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/           )
        equation()
    )?
}

void reactionDefinitionsNoName()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    reactionDefinitions((AstSymbol)jjtn000)
    end()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void initializations():
{}
{/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    equation()
}

void assignmentRules():
{}
{
    colonEqual()
    equation()
}

void colonEqual()            :
{/*@bgen(jjtree) ColonEqual */
  AstColonEqual jjtn000 = new AstColonEqual(JJTCOLONEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ColonEqual */
  try {
/*@egen*/
  < COLON > <EQUAL >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.setTokenEqual(token);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void assignmentRate():
{}
{
    rateEqual()
    equation()
}

void rateEqual()           :
{/*@bgen(jjtree) RateEqual */
  AstRateEqual jjtn000 = new AstRateEqual(JJTRATEEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RateEqual */
  try {
/*@egen*/
  < RATE_EQUAL >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn000.setView(token.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void event():
{}
{
  at()
  (
    (/*@bgen(jjtree) Comma */
      {
        AstComma jjtn001 = new AstComma(JJTCOMMA);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ < COMMA >/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/        )
    ( priority() | useValuesFromTriggerTime() | persistent() | triggerInitialValue())
  )*
  (
    (/*@bgen(jjtree) Colon */
     {
       AstColon jjtn002 = new AstColon(JJTCOLON);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/        )
    (/*@bgen(jjtree) EOL */
     {
       AstEOL jjtn003 = new AstEOL(JJTEOL);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< EOL >/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )*
    eventAssignment()
  )+
}

void at()    :
{/*@bgen(jjtree) At */
  AstAt jjtn000 = new AstAt(JJTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) At */
    try {
/*@egen*/
    < AT >
    equation()
    (/*@bgen(jjtree) After */
      {
        AstAfter jjtn001 = new AstAfter(JJTAFTER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/
      < AFTER >/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/       
      equation()
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void constraint():
{}
{	
	assert_()
	(
	(/*@bgen(jjtree) Else */
         {
           AstElse jjtn001 = new AstElse(JJTELSE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< ELSE >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/	     )
	        
		text()
	)?

}

void assert_()        :
{/*@bgen(jjtree) Assert */
  AstAssert jjtn000 = new AstAssert(JJTASSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Assert */
        try {
/*@egen*/
	< ASSERT >
	equation()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void priority()          :
{/*@bgen(jjtree) Priority */
  AstPriority jjtn000 = new AstPriority(JJTPRIORITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Priority */
    try {
/*@egen*/
    < PRIORITY >/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    equation()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void useValuesFromTriggerTime()                          :
{/*@bgen(jjtree) UseValuesFromTriggerTime */
  AstUseValuesFromTriggerTime jjtn000 = new AstUseValuesFromTriggerTime(JJTUSEVALUESFROMTRIGGERTIME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UseValuesFromTriggerTime */
    try {
/*@egen*/
    < FROM_TRIGGER >/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    < TRUE_OR_FALSE >/*@bgen(jjtree) RegularFormulaElement */
                      {
                        AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.setElement(token.image);}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/                       /*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void persistent()            :
{/*@bgen(jjtree) Persistent */
  AstPersistent jjtn000 = new AstPersistent(JJTPERSISTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Persistent */
    try {
/*@egen*/
    < PERSISTENT >/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    < TRUE_OR_FALSE >/*@bgen(jjtree) RegularFormulaElement */
                      {
                        AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.setElement(token.image);}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/                       /*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void triggerInitialValue()                     :
{/*@bgen(jjtree) TriggerInitialValue */
  AstTriggerInitialValue jjtn000 = new AstTriggerInitialValue(JJTTRIGGERINITIALVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TriggerInitialValue */
    try {
/*@egen*/
    < TRIGGER_INITIAL_VALUE >/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    < TRUE_OR_FALSE >/*@bgen(jjtree) RegularFormulaElement */
                      {
                        AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.setElement(token.image);}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/                       /*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void eventNoName()         :
{/*@bgen(jjtree) Symbol */
 AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/jjtn000.setTypeDeclaration(AstSymbol.EVENT);}
{/*@bgen(jjtree) Symbol */
        try {
/*@egen*/
	event()
	end()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void eventAssignment()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Symbol */
  try {
/*@egen*/
  symbolName() {jjtn000.setTypeDeclaration(AstSymbol.INIT);
  jjtn000.setName(token.image);}
  initializations()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void fullName()    :
{/*@bgen(jjtree) Is */
  AstIs jjtn000 = new AstIs(JJTIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Is */
  try {
/*@egen*/
  < IS >
  text()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void subType()         :
{/*@bgen(jjtree) Subtype */
  AstSubtype jjtn000 = new AstSubtype(JJTSUBTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Subtype */
  try {
/*@egen*/
  < SUBTYPE > 
  symbolElement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void hasUnit()     :
{/*@bgen(jjtree) Has */
  AstHas jjtn000 = new AstHas(JJTHAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Has */
        try {
/*@egen*/
	(< HAS >  )
	symbolElement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void databaseReference():
{}
{
	relationshipType()
	text()
	(/*@bgen(jjtree) Comma */
        {
          AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        ","/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/       
        text()
    )*
}

void relationshipType()                  :
{/*@bgen(jjtree) RelationshipType */
  AstRelationshipType jjtn000 = new AstRelationshipType(JJTRELATIONSHIPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RelationshipType */
        try {
/*@egen*/
	<RELATIONSHIP_TYPE>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
/*@egen*/	{jjtn000.setName(token.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void synchronizations()    :
{/*@bgen(jjtree) Is */
  AstIs jjtn000 = new AstIs(JJTIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Is */
  try {
/*@egen*/
  < IS >
  ( LOOKAHEAD(2) subSymbolElement()  | symbolElement() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void reactionTitle(AstSymbol declaration)               :
{/*@bgen(jjtree) ReactionTitle */
  AstReactionTitle jjtn000 = new AstReactionTitle(JJTREACTIONTITLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ReactionTitle */
    try {
/*@egen*/
    (reactionReactant())?
    (
        (/*@bgen(jjtree) Plus */
        {
          AstPlus jjtn001 = new AstPlus(JJTPLUS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        < PLUS >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/       {jjtn000.initType(AstReactionTitle.STANDARD_REACTION);}
        |/*@bgen(jjtree) And */
          {
            AstAnd jjtn002 = new AstAnd(JJTAND);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ < AND >/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/      {jjtn000.initType(AstReactionTitle.MOD_AND_REACTION);}
        |/*@bgen(jjtree) Or */
          {
            AstOr jjtn003 = new AstOr(JJTOR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ < OR >/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/     {jjtn000.initType(AstReactionTitle.MOD_OR_REACTION);}
        |/*@bgen(jjtree) Not */
          {
            AstNot jjtn004 = new AstNot(JJTNOT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ < NOT >/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/      {jjtn000.initType(AstReactionTitle.MOD_NOT_REACTION);}
        )
        reactionReactant()  
    )* 
    reactionType(declaration)
    (reactionProduct())?
    (/*@bgen(jjtree) Plus */
        {
          AstPlus jjtn005 = new AstPlus(JJTPLUS);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtn005.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        < PLUS >/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtn005.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/      
        reactionProduct()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void reactionReactant()          :
{/*@bgen(jjtree) Reactant */
  AstReactant jjtn000 = new AstReactant(JJTREACTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Reactant */
    try {
/*@egen*/
    (stoichiometry())?
    symbolElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void reactionProduct()         :
{/*@bgen(jjtree) Product */
  AstProduct jjtn000 = new AstProduct(JJTPRODUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Product */
    try {
/*@egen*/
    (stoichiometry())?
    symbolElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void stoichiometry()                :
{/*@bgen(jjtree) Stoichiometry */
  AstStoichiometry jjtn000 = new AstStoichiometry(JJTSTOICHIOMETRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Stoichiometry */
  try {
/*@egen*/
  < FLOATING_POINT_LITERAL >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
/*@egen*/{jjtn000.setStoichiometry(token.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void symbolElement()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
        try {
/*@egen*/
	(< $ >{ jjtn000.setConstantPrefix(true);})?
	symbolName()/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.setName(token.image); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void subSymbolElement()           :
{/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SubSymbol */
        try {
/*@egen*/
	(< $ >{ jjtn000.setConstantPrefix(true);})?
	< SUBSYMBOL >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/{jjtn000.setName(token.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void symbolElementWithIn()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
    try {
/*@egen*/
    (< $ >{ jjtn000.setConstantPrefix(true);})?
    symbolName() {jjtn000.setName(token.image); }
    (
        (
            in()
        )
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void reactionType(AstSymbol declaration)              :
{/*@bgen(jjtree) ReactionType */
  AstReactionType jjtn000 = new AstReactionType(JJTREACTIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ReactionType */
  try {
/*@egen*/
  (
  < ARROW >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { jjtn000.setType(token.image);
  declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);}
  |
  < MINUS >
                (   < TRIANGULAR_BRACKET_R >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
                { jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_DEFINITION);}
                |
                < BRAKET_L >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
                { jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_UNKNOWN_MODIFIER);}
                |
                < OR >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
                { jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_INHIBITOR);}
                |
                symbolName()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
                { jjtn000.setType(token);
                declaration.setTypeDeclaration(AstSymbol.REACTION_ACTIVATOR);}
                )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void subDiagram():
{}
{
	subModelSignature()
	(/*@bgen(jjtree) Comma */
        {
          AstComma jjtn001 = new AstComma(JJTCOMMA);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
    	< COMMA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/       
    	conversionFactor()
    )*
}

void conversionFactor()                  :
{/*@bgen(jjtree) ConversionFactor */
  AstConversionFactor jjtn000 = new AstConversionFactor(JJTCONVERSIONFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConversionFactor */
    try {
/*@egen*/
    symbolName() {jjtn000.setFactor(token.image);}/*@bgen(jjtree) Equal */
    {
      AstEqual jjtn001 = new AstEqual(JJTEQUAL);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    < EQUAL >/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/       
    symbolElement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void equation()          :
{/*@bgen(jjtree) Equation */
  AstEquation jjtn000 = new AstEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Equation */
        try {
/*@egen*/
	formula()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void formula():
{}
{
    (
        regularFormulaElement()
        | formulaInBrackets()
        | specialFunction()
        | piecewiseAntimonyFormat()
    )*
}

void regularFormulaElement()                       :
{/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) RegularFormulaElement */
    try {
/*@egen*/
    (
            symbolName() {jjtn000.setString(true);}| < TRUE_OR_FALSE >
            | < STAR >
            | < OPERATOR > |  < TRIANGULAR_BRACKET_L > | < TRIANGULAR_BRACKET_R >
            | < STANDART_FUNCTION > | < NOT > | < EQUAL > | < NOT_EQUAL >
            | < PLUS > | < MINUS > | <AND> | <OR>
            | < FLOATING_POINT_LITERAL > {jjtn000.setNumber(true);}
    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{jjtn000.setElement(token.image);}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void formulaInBrackets():
{
}
{
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )

    (
        formulaInBrackets() | regularFormulaElement()
        |specialFunction()
        | piecewiseAntimonyFormat()
        | (/*@bgen(jjtree) RegularFormulaElement */
           {
             AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/(< COMMA >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtn002.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/                       )
    )*

    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
}

void specialFunction()                :
{/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SpecialFormula */
    try {
/*@egen*/
    (
        (/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< POWER >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
        {jjtn000.setType(AstSpecialFormula.POWER);}

        |(/*@bgen(jjtree) RegularFormulaElement */
          {
            AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/(< AND_WORD >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                       )
        {jjtn000.setType(AstSpecialFormula.AND);}

        |(/*@bgen(jjtree) RegularFormulaElement */
          {
            AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/(< OR_WORD >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                       )
        {jjtn000.setType(AstSpecialFormula.OR);}

        |(/*@bgen(jjtree) RegularFormulaElement */
          {
            AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/(< GEQ >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                       )
        {jjtn000.setType(AstSpecialFormula.GEQ);}

        |(/*@bgen(jjtree) RegularFormulaElement */
          {
            AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
            jjtn005.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/(< LEQ >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtc005 = false;
                     jjtn005.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn005.setElement(token.image);})/*@bgen(jjtree)*/
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
              jjtn005.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                       )
        {jjtn000.setType(AstSpecialFormula.LEQ);}
    )

    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn006, true);
                     jjtc006 = false;
                     jjtn006.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn006.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )

    (/*@bgen(jjtree) SpecialFormula */
     {
       AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc007 = true;
       jjtree.openNodeScope(jjtn007);
       jjtn007.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/formula()/*@bgen(jjtree)*/
     } catch (Throwable jjte007) {
       if (jjtc007) {
         jjtree.clearNodeScope(jjtn007);
         jjtc007 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte007 instanceof RuntimeException) {
         throw (RuntimeException)jjte007;
       }
       if (jjte007 instanceof ParseException) {
         throw (ParseException)jjte007;
       }
       throw (Error)jjte007;
     } finally {
       if (jjtc007) {
         jjtree.closeNodeScope(jjtn007, true);
         jjtn007.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc008 = true;
       jjtree.openNodeScope(jjtn008);
       jjtn008.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< COMMA >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn008, true);
                  jjtc008 = false;
                  jjtn008.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {jjtn008.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc008) {
         jjtree.closeNodeScope(jjtn008, true);
         jjtn008.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (/*@bgen(jjtree) SpecialFormula */
     {
       AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc009 = true;
       jjtree.openNodeScope(jjtn009);
       jjtn009.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/formula()/*@bgen(jjtree)*/
     } catch (Throwable jjte009) {
       if (jjtc009) {
         jjtree.clearNodeScope(jjtn009);
         jjtc009 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte009 instanceof RuntimeException) {
         throw (RuntimeException)jjte009;
       }
       if (jjte009 instanceof ParseException) {
         throw (ParseException)jjte009;
       }
       throw (Error)jjte009;
     } finally {
       if (jjtc009) {
         jjtree.closeNodeScope(jjtn009, true);
         jjtn009.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )

    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc010 = true;
       jjtree.openNodeScope(jjtn010);
       jjtn010.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn010, true);
                     jjtc010 = false;
                     jjtn010.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn010.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc010) {
         jjtree.closeNodeScope(jjtn010, true);
         jjtn010.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void piecewiseAntimonyFormat()                :
{/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SpecialFormula */
    try {
/*@egen*/
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< PIECEWISE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    {jjtn000.setType(AstSpecialFormula.PIECEWISE);}
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )

    (/*@bgen(jjtree) SpecialFormula */
     {
       AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/formula()/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )
    (
        (/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
           jjtn004.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< COMMA >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtn004.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004, true);
             jjtn004.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
        (/*@bgen(jjtree) SpecialFormula */
         {
           AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
           boolean jjtc005 = true;
           jjtree.openNodeScope(jjtn005);
           jjtn005.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/formula()/*@bgen(jjtree)*/
         } catch (Throwable jjte005) {
           if (jjtc005) {
             jjtree.clearNodeScope(jjtn005);
             jjtc005 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte005 instanceof RuntimeException) {
             throw (RuntimeException)jjte005;
           }
           if (jjte005 instanceof ParseException) {
             throw (ParseException)jjte005;
           }
           throw (Error)jjte005;
         } finally {
           if (jjtc005) {
             jjtree.closeNodeScope(jjtn005, true);
             jjtn005.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                )
    )*

    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn006, true);
                     jjtc006 = false;
                     jjtn006.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn006.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void end():
{}
{
    (/*@bgen(jjtree) Semicolon */
     {
       AstSemicolon jjtn001 = new AstSemicolon(JJTSEMICOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< SEMICOLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/            |/*@bgen(jjtree) EOL */
                                {
                                  AstEOL jjtn002 = new AstEOL(JJTEOL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                  jjtn002.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ < EOL >/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                    jjtn002.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/      | < EOF >)
}


/******************************************************* PARSE FORMULE *************************************************/


AstEquation parseFormule()          :
{/*@bgen(jjtree) Equation */
  AstEquation jjtn000 = new AstEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Equation */
    try {
/*@egen*/
    (
        regularFormulaElement()
        | formulaInBrackets()
        | piecewiseStandartFormat()
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

AstUnitFormula parseUnitFormule()             :
{/*@bgen(jjtree) UnitFormula */
  AstUnitFormula jjtn000 = new AstUnitFormula(JJTUNITFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnitFormula */
    try {
/*@egen*/
    (
        algebraicFormulaElement()
        | algebraicExpressionInBrackets() 
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void piecewiseStandartFormat()                :
{/*@bgen(jjtree) SpecialFormula */
  AstSpecialFormula jjtn000 = new AstSpecialFormula(JJTSPECIALFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) SpecialFormula */
    try {
/*@egen*/
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< PIECEWISE >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    {jjtn000.setType(AstSpecialFormula.PIECEWISE);}
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )

    (/*@bgen(jjtree) SpecialFormula */
     {
       AstSpecialFormula jjtn003 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/formula()/*@bgen(jjtree)*/
     } catch (Throwable jjte003) {
       if (jjtc003) {
         jjtree.clearNodeScope(jjtn003);
         jjtc003 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte003 instanceof RuntimeException) {
         throw (RuntimeException)jjte003;
       }
       if (jjte003 instanceof ParseException) {
         throw (ParseException)jjte003;
       }
       throw (Error)jjte003;
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< ARROW >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                  jjtn004.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {jjtn004.setElement(AstSpecialFormula.PIECEWISE_ARROW);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (/*@bgen(jjtree) SpecialFormula */
     {
       AstSpecialFormula jjtn005 = new AstSpecialFormula(JJTSPECIALFORMULA);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/formula()/*@bgen(jjtree)*/
     } catch (Throwable jjte005) {
       if (jjtc005) {
         jjtree.clearNodeScope(jjtn005);
         jjtc005 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte005 instanceof RuntimeException) {
         throw (RuntimeException)jjte005;
       }
       if (jjte005 instanceof ParseException) {
         throw (ParseException)jjte005;
       }
       throw (Error)jjte005;
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )
    (
        (/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
           jjtn006.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SEMICOLON >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                          jjtn006.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {jjtn006.setElement(",");})/*@bgen(jjtree)*/
         } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006, true);
             jjtn006.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
        (/*@bgen(jjtree) SpecialFormula */
         {
           AstSpecialFormula jjtn007 = new AstSpecialFormula(JJTSPECIALFORMULA);
           boolean jjtc007 = true;
           jjtree.openNodeScope(jjtn007);
           jjtn007.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/formula()/*@bgen(jjtree)*/
         } catch (Throwable jjte007) {
           if (jjtc007) {
             jjtree.clearNodeScope(jjtn007);
             jjtc007 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte007 instanceof RuntimeException) {
             throw (RuntimeException)jjte007;
           }
           if (jjte007 instanceof ParseException) {
             throw (ParseException)jjte007;
           }
           throw (Error)jjte007;
         } finally {
           if (jjtc007) {
             jjtree.closeNodeScope(jjtn007, true);
             jjtn007.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                )

        (
            (/*@bgen(jjtree) RegularFormulaElement */
             {
               AstRegularFormulaElement jjtn008 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
               jjtn008.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/(< ARROW >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn008, true);
                          jjtc008 = false;
                          jjtn008.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {jjtn008.setElement(AstSpecialFormula.PIECEWISE_ARROW);})/*@bgen(jjtree)*/
             } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtn008.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                       )
            (/*@bgen(jjtree) SpecialFormula */
             {
               AstSpecialFormula jjtn009 = new AstSpecialFormula(JJTSPECIALFORMULA);
               boolean jjtc009 = true;
               jjtree.openNodeScope(jjtn009);
               jjtn009.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/formula()/*@bgen(jjtree)*/
             } catch (Throwable jjte009) {
               if (jjtc009) {
                 jjtree.clearNodeScope(jjtn009);
                 jjtc009 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte009 instanceof RuntimeException) {
                 throw (RuntimeException)jjte009;
               }
               if (jjte009 instanceof ParseException) {
                 throw (ParseException)jjte009;
               }
               throw (Error)jjte009;
             } finally {
               if (jjtc009) {
                 jjtree.closeNodeScope(jjtn009, true);
                 jjtn009.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                )
        )?

    )*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn010 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc010 = true;
       jjtree.openNodeScope(jjtn010);
       jjtn010.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn010, true);
                     jjtc010 = false;
                     jjtn010.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn010.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc010) {
         jjtree.closeNodeScope(jjtn010, true);
         jjtn010.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void locateFunction()                :
{/*@bgen(jjtree) LocateFunction */
  AstLocateFunction jjtn000 = new AstLocateFunction(JJTLOCATEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LocateFunction */
        try {
/*@egen*/
	< LOCATE_FUNCTION >
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< LOCATE_BRAKET_L >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(
        (( symbolName()/*@bgen(jjtree) Symbol */
                        {
                          AstSymbol jjtn002 = new AstSymbol(JJTSYMBOL);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                          jjtn002.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ {jjtn002.setName(token.image);}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/        )
        | subSymbolElement())
        {jjtn000.addProperty("name", token.image);}
        (/*@bgen(jjtree) Comma */
         {
           AstComma jjtn003 = new AstComma(JJTCOMMA);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/          text() )
        {jjtn000.addProperty("type", token.image.replaceAll("\"", ""));}
        ((/*@bgen(jjtree) Comma */
          {
            AstComma jjtn004 = new AstComma(JJTCOMMA);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
              jjtn004.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/          symbolName()/*@bgen(jjtree) Symbol */
                                          {
                                            AstSymbol jjtn005 = new AstSymbol(JJTSYMBOL);
                                            boolean jjtc005 = true;
                                            jjtree.openNodeScope(jjtn005);
                                            jjtn005.jjtSetFirstToken(getToken(1));
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn005, true);
                                            jjtc005 = false;
                                            jjtn005.jjtSetLastToken(getToken(0));
                                          }
/*@egen*/ {jjtn005.setName(token.image);}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc005) {
                                              jjtree.closeNodeScope(jjtn005, true);
                                              jjtn005.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/        )
        {jjtn000.addProperty("parent", token.image);})?
    )
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc006 = true;
           jjtree.openNodeScope(jjtn006);
           jjtn006.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< LOCATE_BRAKET_R >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn006, true);
                                jjtc006 = false;
                                jjtn006.jjtSetLastToken(getToken(0));
                              }
/*@egen*/ {jjtn006.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc006) {
             jjtree.closeNodeScope(jjtn006, true);
             jjtn006.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

Token symbolName():
{Token t;}
{
    (
    t = < SYMBOL > |
    t = <SYMBOL_TYPE> | 
    t = < COMPARTMENT > |
    t = < VAR > | 
    t = < CONST > | 
    t = < MODEL > |
    t = < AS > |
    t = < IMPORT > |
    t = < AT > |
    t = < IN > |
    t = < GLOBAL > |
    t = < SUBTYPE > |
    t = < PRIORITY > |
    t = < FROM_TRIGGER > |
    t = < IS > |
    t = < HAS > |
    t = < UNIT > |
    t = <RELATIONSHIP_TYPE > |
    t = < TRIGGER_INITIAL_VALUE >)
    {return t ;}
}
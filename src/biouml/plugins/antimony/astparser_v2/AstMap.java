/* Generated By:JJTree: Do not edit this line. AstMapOfValues.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser_v2;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import biouml.plugins.antimony.AntimonyAstCreator;

public class AstMap extends SimpleNode
{
    public AstMap(int id)
    {
        super(id);
    }

    public AstMap(AntimonyNotationParser p, int id)
    {
        super(p, id);
    }

    public void setValue(Map<String, Object> map)
    {
        AstRegularFormulaElement lb = new AstRegularFormulaElement(AntimonyNotationParser.JJTREGULARFORMULAELEMENT);
        lb.setElement("{");
        addAsLast(lb);
        Iterator<Map.Entry<String, Object>> iterator = map.entrySet().iterator();
        while( iterator.hasNext() )
        {
            Map.Entry<String, Object> entry = iterator.next();

            AstSingleProperty sp = new AstSingleProperty(AntimonyNotationParser.JJTSINGLEPROPERTY);

            sp.setPropertyName(entry.getKey());
            sp.setPropertyValue(entry.getValue());

            addAsLast(sp);
            if( iterator.hasNext() )
                addAsLast(new AstComma(AntimonyNotationParser.JJTCOMMA));
        }

        AstRegularFormulaElement rb = new AstRegularFormulaElement(AntimonyNotationParser.JJTREGULARFORMULAELEMENT);
        rb.setElement("}");
        addAsLast(rb);

    }

    Map<String, Object> getValues()
    {
        Map<String, Object> value = new HashMap<String, Object>();

        for( Node node : getChildren() )
        {
            if( node instanceof AstSingleProperty )
            {
                AstSingleProperty sprop = (AstSingleProperty)node;
                value.put(sprop.getPropertyName(), sprop.getPropertyValue());
            }
        }

        return value;
    }

    @Override
    public String toAntimonyString()
    {
        return "";
    }

    /**
     * 
     * @param propertyName
     * @return AstSingleProperty node with property name
     */
    public AstSingleProperty getSingleProperty(String propertyName)
    {
        for( Node astNode : getChildren() )
            if( astNode instanceof AstSingleProperty && ( (AstSingleProperty)astNode ).getPropertyName().equals(propertyName) )
                return (AstSingleProperty)astNode;

        return null;
    }

    /**
     * Adds single property 
     * @param spropName
     * @param value
     */
    public void addSingleProperty(String spropName, Object value)
    {
        AstSingleProperty sprop = new AstSingleProperty(AntimonyNotationParser.JJTSINGLEPROPERTY);
        sprop.setPropertyName(spropName);
        sprop.setPropertyValue(value);
        AntimonyAstCreator.createSpace(sprop);

        for( int i = jjtGetNumChildren() - 1; i >= 0; i-- )
        {
            if( jjtGetChild(i) instanceof AstSingleProperty )
            {
                addWithDisplacement(new AstComma(AntimonyNotationParser.JJTCOMMA), i + 1);
                addWithDisplacement(sprop, i + 2);
                break;
            }
        }
    }

    /**
     * Checks whether it contains any single properties
     * @return
     */
    public boolean isEmpty()
    {
        if( countSingleProperties() > 0 )
            return false;

        return true;
    }

    private int countSingleProperties()
    {
        if( this.getChildren() == null )
            return 0;

        int counter = 0;
        for( Node astNode : this.getChildren() )
            if( astNode instanceof AstSingleProperty )
                counter++;

        return counter;
    }

}
/* JavaCC - OriginalChecksum=8818dcca8a89a2349ed6abb22a38bce6 (do not edit this line) */

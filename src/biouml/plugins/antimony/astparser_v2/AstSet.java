/* Generated By:JJTree: Do not edit this line. AstSet.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser_v2;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import biouml.plugins.antimony.AntimonyAstCreator;

public class AstSet extends SimpleNode
{
    public AstSet(int id)
    {
        super(id);
    }

    public AstSet(AntimonyNotationParser p, int id)
    {
        super(p, id);
    }

    @SuppressWarnings ( "unchecked" )
    public void setValue(Set<Object> values)
    {
        AstRegularFormulaElement lb = new AstRegularFormulaElement(AntimonyNotationParser.JJTREGULARFORMULAELEMENT);
        lb.setElement("{");
        addAsLast(lb);
        Iterator<Object> iter = values.iterator();
        while( iter.hasNext() )
        {
            Object value = iter.next();

            SimpleNode node;
            if( value instanceof List )
            {
                node = new AstList(AntimonyNotationParser.JJTLIST);
                ( (AstList)node ).setValue((List<String>)value);
            }
            else if( value instanceof Map )
            {
                node = new AstMap(AntimonyNotationParser.JJTMAP);
                ( (AstMap)node ).setValue((Map<String, Object>)value);
            }
            else
                continue;

            AntimonyAstCreator.createSpace(node);
            addAsLast(node);

            if( iter.hasNext() )
                addAsLast(new AstComma(AntimonyNotationParser.JJTCOMMA));
        }
        AstRegularFormulaElement rb = new AstRegularFormulaElement(AntimonyNotationParser.JJTREGULARFORMULAELEMENT);
        rb.setElement("}");
        addAsLast(rb);
    }

    //    public Set<Object> getValue()
    //    {
    //        List<String> symbolsName = new ArrayList<String>();
    //        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
    //            if( this.jjtGetChild(i) instanceof AstSymbol )
    //                symbolsName.add( ( (AstSymbol)this.jjtGetChild(i) ).getName());
    //
    //        return symbolsName;
    //    }

    @Override
    public String toAntimonyString()
    {
        return "";
    }

    /**
     * Search for astnode containing properties storing in value
     * @param value
     * @return
     */
    @SuppressWarnings ( "unchecked" )
    public SimpleNode get(Object value)
    {
        if( jjtGetNumChildren() == 0 )
            return null;

        if( value instanceof Map )
        {
            HashMap<String, String> map = (HashMap<String, String>)value;

            for( Node node : getChildren() )
            {
                if( node instanceof AstMap && ( (AstMap)node ).getValues().equals(map) )
                    return (AstMap)node;
            }
        }
        else // put implementations for other data types
            return null;



        return null;
    }

    /**
     * Transforms a value to astnode and appends to the set 
     * @param value (implemented only for Map(String, String))
     */
    @SuppressWarnings ( "unchecked" )
    public void add(Object value)
    {
        SimpleNode sn;
        if( value instanceof Map )
        {
            sn = new AstMap(AntimonyNotationParser.JJTMAP);
            ( (AstMap)sn ).setValue((Map<String, Object>)value);
        }
        else
            return;

        AntimonyAstCreator.createSpace(sn);

        for( int i = jjtGetNumChildren() - 1; i >= 0; i-- )
        {
            if( jjtGetChild(i) instanceof AstRegularFormulaElement
                    && ( (AstRegularFormulaElement)jjtGetChild(i) ).getElement().equals("}") )
            {
                // if astset already contains a single property, put a comma
                if( i - 1 != 0 && jjtGetChild(i - 1) instanceof AstMap )
                {
                    addWithDisplacement(new AstComma(AntimonyNotationParser.JJTCOMMA), i);
                    addWithDisplacement(sn, i + 1);
                }
                else
                    addWithDisplacement(sn, i);

                return;
            }
        }

    }

    /**
     * Returns value of AstSet as set
     * @return 
     */
    public Set<Object> getValue()
    {
        if( jjtGetNumChildren() == 0 )
            return null;

        Set<Object> value = new HashSet<Object>();
        for( Node node : getChildren() )
        {
            Object elem = null;
            if( node instanceof AstText )
                elem = ( (AstText)node ).getText().replace("\"", "");
            else if( node instanceof AstList )
                elem = ( (AstList)node ).getValue();
            else if( node instanceof AstMap )
                elem = ( (AstMap)node ).getValues();
            else if( node instanceof AstSet )
                elem = ( (AstSet)node ).getValue();
            else
                continue;

            value.add(elem);
        }
        return value;
    }

}
/* JavaCC - OriginalChecksum=258b79af2a7efc2adc4f98a25e4c06e0 (do not edit this line) */

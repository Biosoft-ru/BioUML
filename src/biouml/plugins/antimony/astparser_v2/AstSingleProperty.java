/* Generated By:JJTree: Do not edit this line. AstSingleProperty.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser_v2;

import java.util.List;
import java.util.Map;
import java.util.Set;

import biouml.plugins.antimony.AntimonyAstCreator;

public class AstSingleProperty extends SimpleNode
{
    public AstSingleProperty(int id)
    {
        super(id);
    }

    public AstSingleProperty(AntimonyNotationParser p, int id)
    {
        super(p, id);
    }

    private String name;
    private boolean dotNeeded = false;

    @SuppressWarnings ( "unchecked" )
    public void setPropertyValue(Object value)
    {
        String type = "";

        if( value instanceof String )
            type = "string";
        else if( value instanceof List )
            type = "list";
        else if( value instanceof Map )
            type = "map";
        else if( value instanceof Set )
            type = "set";
        else if( value instanceof Boolean )
            type = "boolean";
        else
            return;

        if( getValueNode() != null )
        {
            for( Node node : getChildren() )
            {
                if( node instanceof AstEqual || node instanceof AstText || node instanceof AstList || node instanceof AstMap
                        || isBooleanNode(node) )
                    node.remove();
            }
        }

        switch( type )
        {
            case ( "string" ):
            {
                AstEqual equal = new AstEqual(AntimonyNotationParser.JJTEQUAL);
                AntimonyAstCreator.createSpace(equal);

                AstText text = new AstText(AntimonyNotationParser.JJTTEXT);
                text.setText("\"" + value + "\"");
                AntimonyAstCreator.createSpace(text);

                addAsLast(equal);
                addAsLast(text);
                break;
            }
            case ( "list" ):
            {
                AstEqual equal = new AstEqual(AntimonyNotationParser.JJTEQUAL);
                AntimonyAstCreator.createSpace(equal);
                AstList list = new AstList(AntimonyNotationParser.JJTLIST);
                list.setValue((List<String>)value);
                AntimonyAstCreator.createSpace(list);

                addAsLast(equal);
                addAsLast(list);
                break;
            }
            case ( "map" ):
            {
                AstEqual equal = new AstEqual(AntimonyNotationParser.JJTEQUAL);
                AntimonyAstCreator.createSpace(equal);
                AstMap map = new AstMap(AntimonyNotationParser.JJTMAP);
                map.setValue((Map<String, Object>)value);
                AntimonyAstCreator.createSpace(map);

                addAsLast(equal);
                addAsLast(map);
                break;
            }
            case ( "set" ):
            {
                AstEqual equal = new AstEqual(AntimonyNotationParser.JJTEQUAL);
                AntimonyAstCreator.createSpace(equal);
                AstSet set = new AstSet(AntimonyNotationParser.JJTSET);
                set.setValue((Set<Object>)value);
                AntimonyAstCreator.createSpace(set);

                addAsLast(equal);
                addAsLast(set);
                break;
            }
            case ( "boolean" ):
            {
                AstEqual equal = new AstEqual(AntimonyNotationParser.JJTEQUAL);
                AntimonyAstCreator.createSpace(equal);
                AstSymbol symbol = new AstSymbol(AntimonyNotationParser.JJTSYMBOL);
                AntimonyAstCreator.createSpace(symbol);
                symbol.setName(value.toString());

                addAsLast(equal);
                addAsLast(symbol);
                break;
            }
        }


    }

    /**
     * Returns property value of AstSingleProperty as data structure
     * @return (implemented for strings, lists, maps, sets and booleans)
     */
    public Object getPropertyValue()
    {
        SimpleNode valueNode = getValueNode();
        Object value = null;
        if( valueNode instanceof AstText )
            value = ( (AstText)valueNode ).getText().replace("\"", "");
        else if( valueNode instanceof AstList )
            value = ( (AstList)valueNode ).getValue();
        else if( valueNode instanceof AstMap )
            value = ( (AstMap)valueNode ).getValues();
        else if( valueNode instanceof AstSet )
        {
            value = ( (AstSet)valueNode ).getValue();
        }
        else if( isBooleanNode(valueNode) )
            value = ( (AstSymbol)valueNode ).getName().equals("true");

        return value;
    }

    boolean isBooleanNode(Node node)
    {
        return ( node instanceof AstSymbol
                && ( ( (AstSymbol)node ).getName().equals("true") || ( (AstSymbol)node ).getName().equals("false") ) );
    }

    public SimpleNode getValueNode()
    {
        if( getChildren() != null )
            for( Node node : getChildren() )
                if( node instanceof AstText || node instanceof AstList || node instanceof AstMap || node instanceof AstSet
                        || isBooleanNode(node) )
                    return (SimpleNode)node;

        return null;
    }

    public void setPropertyName(String name)
    {
        this.name = name;
    }

    public String getPropertyName()
    {
        return name;
    }

    @Override
    public String toString()
    {
        if( dotNeeded )
            return "." + name;
        return name;
    }

    public void setDotNeeded(boolean value)
    {
        dotNeeded = value;
    }

}
/* JavaCC - OriginalChecksum=612d271014aa85ed72a098c9fb326c7a (do not edit this line) */

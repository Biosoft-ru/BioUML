/* Generated By:JJTree: Do not edit this line. AstStart.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.antimony.astparser_v2;

import java.util.ArrayList;
import java.util.List;

import biouml.plugins.antimony.astparser_v2.AstModel.ModelType;

public class AstStart extends SimpleNode
{
    public AstStart(int id)
    {
        super(id);
    }

    public AstStart(AntimonyNotationParser p, int id)
    {
        super(p, id);
    }

    public AstModel getMainModel()
    {
        AstModel firstModel = null;
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstModel )
            {
                AstModel currentModel = (AstModel)this.jjtGetChild(i);
                if( firstModel == null )
                    firstModel = currentModel;
                if( !currentModel.isSimpleModel() )
                    return currentModel;
            }
        }
        return firstModel;
    }

    public List<AstModel> getSimpleModels()
    {
        ArrayList<AstModel> simpleModels = new ArrayList<AstModel>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstModel && ( (AstModel)this.jjtGetChild(i) ).isSimpleModel() )
                simpleModels.add((AstModel)this.jjtGetChild(i));
        }
        return simpleModels;
    }
    public List<AstFunction> getAstFunctions()
    {
        ArrayList<AstFunction> functions = new ArrayList<AstFunction>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstFunction )
                functions.add((AstFunction)this.jjtGetChild(i));
        }
        return functions;
    }

    public boolean hasOutsideModel()
    {
        int modelNum = 0;
        //if has only EOL
        boolean isEmpty = true;
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            Node child = this.jjtGetChild(i);
            if( ! ( child instanceof AstEOL ) )
                isEmpty = false;
            if( child instanceof AstModel )
            {
                //if start has got two or more models
                modelNum++;
                if( ( (AstModel)child ).isMainModel() )
                    return false;
            }
            //if start has got declaration
            if( ! ( child instanceof AstModel ) && ! ( child instanceof AstFunction ) && ! ( child instanceof AstEOL )
                    && ! ( child instanceof AstUnit ) && ! ( child instanceof AstImportAnnotation ) )
                return true;
        }
        if( modelNum > 1 )
            return true;
        return isEmpty;
    }

    public AstModel createOutsideModelNode()
    {
        AstModel model = new AstModel(AntimonyNotationParser.JJTMODEL);
        model.setTypeModel(ModelType.MainOutsideModel);
        model.children = this.children;
        this.children = new Node[1];
        this.children[0] = model;
        if( model.children != null )
            for( int i = 0; i < model.children.length; i++ )
                model.children[i].jjtSetParent(model);
        return model;
    }

    @Override
    public String toAntimonyString()
    {
        return "";
    }

    public Node getStart()
    {
        AstModel model = getMainModel();
        if( model.isOutsideModel() )
            return model;
        else
            return this;
    }

    public List<AstUnit> getAstUnits()
    {
        ArrayList<AstUnit> units = new ArrayList<AstUnit>();
        for( int i = 0; i < this.jjtGetNumChildren(); i++ )
        {
            if( this.jjtGetChild(i) instanceof AstUnit )
                units.add((AstUnit)this.jjtGetChild(i));
        }
        return units;
    }
}
/* JavaCC - OriginalChecksum=fc0c048a8cd808e10424c40a53246ebc (do not edit this line) */

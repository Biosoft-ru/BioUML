// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: AntimonyLexer.flex

/* $Id: RLexer.lex,v 1.1 2013/08/29 08:55:41 lan Exp $ */
/* RLexer.java is a generated file.  You probably want to
 * edit RLexer.lex to make changes.  Use JFlex to generate it.
 * To generate RLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main RLexer.lex</code><br>
 * You will then have a file called RLexer.java
 */

package biouml.plugins.antimony.lex;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.Ostermiller.Syntax.Lexer.Lexer;
import com.Ostermiller.Syntax.Lexer.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings ( "FallThrough" )
public class AntimonyLexer implements Lexer
{

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;

    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {0, 0};

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27,
            27, 27, 27, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 30, 31, 32, 33, 34, 0, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 27, 27, 44, 45, 46, 47, 48, 27, 49, 50, 51, 52, 53, 27, 54, 55, 27, 56, 57, 58, 59, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7" + "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"
            + "\1\1\1\20\2\21\1\22\1\23\1\24\1\25\1\26" + "\1\27\1\1\1\30\1\31\1\32\1\33\17\30\1\34"
            + "\1\35\1\36\1\37\1\40\1\41\1\42\1\0\1\43" + "\1\44\1\0\1\45\1\0\1\46\1\47\1\50\1\30"
            + "\1\47\1\50\2\1\1\51\1\52\1\53\1\54\2\1" + "\1\0\2\30\1\55\13\30\1\56\1\57\2\30\1\60"
            + "\5\30\1\61\1\62\1\0\1\63\1\0\1\47\1\0" + "\1\50\1\1\1\0\7\30\1\64\4\30\1\65\10\30" + "\1\66\1\47\1\50\1\1\1\0\6\30\1\67\3\30"
            + "\1\70\7\30\1\71\1\72\1\73\3\30\1\74\2\30" + "\1\75\3\30\1\76\4\30\1\77\2\30\1\100\2\30"
            + "\1\101\13\30\1\102\1\30\1\103\1\104\2\30\1\105" + "\1\106\10\30\1\107\1\30\1\110\2\30\1\111\1\30" + "\1\112";

    private static int[] zzUnpackAction()
    {
        int[] result = new int[212];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result)
    {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while( i < l )
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while( --count > 0 );
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"
            + "\0\u01a4\0\u01e0\0\u021c\0\u021c\0\u021c\0\u021c\0\u021c\0\u0258"
            + "\0\u0294\0\u02d0\0\u030c\0\u0348\0\u021c\0\u021c\0\u0384\0\u03c0"
            + "\0\u03fc\0\u021c\0\u0438\0\u0474\0\u021c\0\u021c\0\u021c\0\u04b0"
            + "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"
            + "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u021c\0\u0834"
            + "\0\u021c\0\u021c\0\u021c\0\u021c\0\u0870\0\u0168\0\u021c\0\u021c"
            + "\0\u08ac\0\u021c\0\u08e8\0\u021c\0\u0924\0\u0960\0\u099c\0\u030c"
            + "\0\u09d8\0\u0a14\0\u0a50\0\u021c\0\u021c\0\u021c\0\u021c\0\u0a8c"
            + "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u099c\0\u0bb8\0\u0bf4\0\u0c30"
            + "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"
            + "\0\u0e4c\0\u0474\0\u0e88\0\u0ec4\0\u0474\0\u0f00\0\u0f3c\0\u0f78"
            + "\0\u0fb4\0\u0ff0\0\u021c\0\u021c\0\u102c\0\u021c\0\u1068\0\u10a4"
            + "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"
            + "\0\u12c0\0\u12fc\0\u1338\0\u0474\0\u1374\0\u13b0\0\u13ec\0\u1428"
            + "\0\u099c\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"
            + "\0\u1608\0\u099c\0\u1068\0\u10e0\0\u1644\0\u1680\0\u16bc\0\u16f8"
            + "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u0474\0\u1824\0\u1860\0\u189c"
            + "\0\u0474\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"
            + "\0\u0474\0\u0474\0\u099c\0\u1a7c\0\u1ab8\0\u1af4\0\u0474\0\u1b30"
            + "\0\u1b6c\0\u099c\0\u1ba8\0\u1be4\0\u1c20\0\u0474\0\u1c5c\0\u1c98"
            + "\0\u1cd4\0\u1d10\0\u099c\0\u1d4c\0\u1d88\0\u0474\0\u1dc4\0\u1e00"
            + "\0\u0474\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"
            + "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u0474\0\u20d0\0\u0474\0\u099c"
            + "\0\u210c\0\u2148\0\u0474\0\u0474\0\u2184\0\u21c0\0\u21fc\0\u2238"
            + "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u099c\0\u2364\0\u099c\0\u23a0" + "\0\u23dc\0\u099c\0\u2418\0\u099c";

    private static int[] zzUnpackRowMap()
    {
        int[] result = new int[212];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result)
    {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while( i < l )
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" + "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"
            + "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" + "\1\32\1\33\3\34\1\35\1\2\1\36\1\37\1\2"
            + "\1\40\1\34\1\41\1\42\1\43\1\44\1\45\1\46" + "\1\47\1\34\1\50\1\51\1\34\1\52\1\34\1\53"
            + "\1\54\1\55\1\56\2\34\1\57\1\60\1\61\1\62" + "\1\2\4\0\2\2\11\0\1\2\1\0\2\2\6\0" + "\4\2\1\0\1\2\2\0\1\2\1\0\21\2\1\0"
            + "\2\2\5\0\2\3\120\0\1\63\44\0\2\5\1\0" + "\1\5\1\64\32\5\1\65\34\5\2\6\1\0\71\6" + "\2\66\1\0\4\66\1\67\64\66\10\0\1\70\63\0"
            + "\2\71\1\0\6\71\1\72\25\71\1\73\34\71\124\0" + "\1\74\43\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\1\75\1\76\6\0\1\2\3\34\1\0\1\2\2\0"
            + "\1\34\1\77\21\34\1\77\2\34\25\0\1\6\52\0" + "\1\2\4\0\2\2\11\0\1\75\1\0\1\100\1\101" + "\6\0\2\2\1\102\1\2\1\0\1\2\2\0\1\2"
            + "\1\0\3\2\1\102\15\2\1\0\2\2\4\0\1\2" + "\4\0\2\2\11\0\1\76\1\0\2\24\6\0\2\2" + "\1\103\1\2\1\0\1\2\2\0\1\2\1\0\3\2"
            + "\1\103\15\2\1\0\2\2\23\0\1\104\7\0\1\105" + "\73\0\1\106\73\0\1\107\44\0\1\2\4\0\2\2"
            + "\11\0\1\110\1\0\2\2\6\0\1\2\3\111\1\0" + "\1\2\2\0\1\2\1\112\21\111\1\112\2\111\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\21\34" + "\1\77\2\34\24\0\1\77\1\0\2\77\7\0\3\77"
            + "\4\0\6\77\1\113\11\77\1\114\1\115\1\77\1\116" + "\2\77\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34"
            + "\1\77\13\34\1\117\5\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\77\3\34\1\120"
            + "\15\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2" + "\2\0\1\34\1\77\10\34\1\121\1\34\1\122\6\34"
            + "\1\77\1\123\1\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2" + "\2\0\1\34\1\124\20\34\1\125\1\77\2\34\4\0"
            + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\3\34" + "\1\126\15\34\1\77\2\34\4\0\1\2\4\0\2\2"
            + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0" + "\1\2\2\0\1\34\1\127\21\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\11\34" + "\1\130\1\131\3\34\1\132\2\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\13\34" + "\1\133\5\34\1\77\2\34\4\0\1\2\4\0\2\2" + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0"
            + "\1\2\2\0\1\34\1\77\13\34\1\134\5\34\1\77" + "\2\34\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34"
            + "\1\77\7\34\1\135\11\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\77\14\34\1\136"
            + "\3\34\1\137\1\77\2\34\4\0\1\2\4\0\2\2" + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0" + "\1\2\2\0\1\34\1\77\15\34\1\140\3\34\1\77"
            + "\2\34\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34" + "\1\77\12\34\1\141\6\34\1\77\2\34\24\0\1\77"
            + "\1\0\2\77\7\0\3\77\4\0\1\77\1\142\24\77" + "\75\0\1\143\2\0\2\65\1\0\1\65\1\144\67\65"
            + "\2\145\1\0\6\145\1\146\25\145\1\73\36\145\1\0" + "\71\145\1\2\4\0\2\2\11\0\1\2\1\0\1\75"
            + "\1\76\6\0\2\2\1\102\1\2\1\0\1\2\2\0" + "\1\2\1\0\3\2\1\102\15\2\1\0\2\2\4\0" + "\1\2\4\0\2\2\11\0\1\2\1\0\2\76\6\0"
            + "\2\2\1\103\1\2\1\0\1\2\2\0\1\2\1\0" + "\3\2\1\103\15\2\1\0\2\2\24\0\1\77\1\0" + "\2\77\7\0\3\77\4\0\26\77\4\0\1\2\4\0"
            + "\2\2\11\0\1\76\1\0\2\101\6\0\2\2\1\103" + "\1\2\1\0\1\2\2\0\1\2\1\0\3\2\1\103" + "\15\2\1\0\2\2\4\0\1\2\4\0\2\2\6\0"
            + "\1\147\1\0\1\147\1\2\1\0\2\150\6\0\4\2" + "\1\0\1\2\2\0\1\2\1\0\21\2\1\0\2\2" + "\4\0\1\2\4\0\2\2\6\0\1\151\1\0\1\151"
            + "\1\2\1\0\2\152\6\0\4\2\1\0\1\2\2\0" + "\1\2\1\0\21\2\1\0\2\2\4\0\1\2\4\0" + "\2\2\11\0\1\111\1\0\2\2\6\0\1\2\3\111"
            + "\1\0\1\2\2\0\1\111\1\112\21\111\1\112\2\111" + "\4\0\1\2\4\0\2\2\11\0\1\153\1\0\2\111"
            + "\6\0\1\2\3\111\1\0\1\2\2\0\1\111\1\112" + "\21\111\1\112\2\111\24\0\1\154\1\0\2\112\7\0"
            + "\3\112\4\0\26\112\24\0\1\77\1\0\2\77\7\0" + "\3\77\4\0\21\77\1\155\4\77\24\0\1\77\1\0"
            + "\2\77\7\0\3\77\4\0\20\77\1\156\5\77\24\0" + "\1\77\1\0\2\77\7\0\3\77\4\0\15\77\1\157"
            + "\10\77\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34" + "\1\77\11\34\1\160\1\161\6\34\1\77\2\34\4\0"
            + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\10\34" + "\1\162\10\34\1\77\2\34\4\0\1\2\4\0\2\2"
            + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0" + "\1\2\2\0\1\34\1\77\16\34\1\163\2\34\1\77" + "\2\34\4\0\1\2\4\0\2\2\11\0\1\34\1\0"
            + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34" + "\1\77\2\34\1\164\16\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2"
            + "\3\34\1\0\1\2\2\0\1\34\1\77\14\34\1\165" + "\4\34\1\77\2\34\24\0\1\77\1\0\2\77\7\0"
            + "\3\77\4\0\12\77\1\166\13\77\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\12\34\1\167\6\34"
            + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\12\34\1\170\6\34\1\77\2\34\24\0"
            + "\1\77\1\0\2\77\7\0\3\77\4\0\20\77\1\171" + "\5\77\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34"
            + "\1\77\14\34\1\172\4\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\77\4\34\1\173"
            + "\14\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2" + "\2\0\1\34\1\77\2\34\1\174\16\34\1\77\2\34"
            + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77" + "\17\34\1\175\1\34\1\77\2\34\4\0\1\2\4\0"
            + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\3\34\1\176\15\34" + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34"
            + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\1\177\20\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2"
            + "\3\34\1\0\1\2\2\0\1\34\1\77\20\34\1\200" + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0"
            + "\1\34\1\77\7\34\1\201\11\34\1\77\2\34\24\0" + "\1\77\1\0\2\77\7\0\3\77\4\0\17\77\1\202"
            + "\6\77\4\0\2\145\1\0\6\145\1\72\25\145\1\73" + "\34\145\22\0\2\203\50\0\1\2\4\0\2\2\11\0"
            + "\1\2\1\0\2\150\6\0\4\2\1\0\1\2\2\0" + "\1\2\1\0\21\2\1\0\2\2\26\0\2\204\50\0" + "\1\2\4\0\2\2\11\0\1\2\1\0\2\152\6\0"
            + "\4\2\1\0\1\2\2\0\1\2\1\0\21\2\1\0" + "\2\2\4\0\1\2\4\0\2\2\11\0\1\205\1\0" + "\2\111\6\0\1\2\3\34\1\0\1\2\2\0\1\111"
            + "\1\77\21\34\1\77\2\34\24\0\1\206\1\0\2\112" + "\7\0\3\77\4\0\1\112\25\77\24\0\1\77\1\0"
            + "\2\77\7\0\3\77\4\0\5\77\1\207\20\77\24\0" + "\1\77\1\0\2\77\7\0\3\77\4\0\5\77\1\210"
            + "\20\77\24\0\1\77\1\0\2\77\7\0\3\77\4\0" + "\7\77\1\211\16\77\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2"
            + "\2\0\1\34\1\77\14\34\1\212\4\34\1\77\2\34" + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77"
            + "\16\34\1\213\2\34\1\77\2\34\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\3\34\1\214\15\34"
            + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\3\34\1\215\15\34\1\77\2\34\4\0"
            + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\13\34" + "\1\216\5\34\1\77\2\34\24\0\1\77\1\0\2\77"
            + "\7\0\3\77\4\0\20\77\1\217\5\77\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\77\1\34\1\220"
            + "\17\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2" + "\2\0\1\34\1\77\3\34\1\221\15\34\1\77\2\34"
            + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77" + "\13\34\1\222\5\34\1\77\2\34\4\0\1\2\4\0"
            + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\7\34\1\223\11\34" + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34"
            + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\3\34\1\224\15\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\225\21\34" + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0"
            + "\1\34\1\77\1\34\1\226\17\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\16\34"
            + "\1\227\1\230\1\34\1\77\2\34\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\3\34\1\231\15\34"
            + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\17\34\1\232\1\34\1\77\2\34\4\0"
            + "\1\2\4\0\2\2\11\0\1\34\1\0\2\111\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\21\34" + "\1\77\2\34\24\0\1\77\1\0\2\112\7\0\3\77"
            + "\4\0\26\77\24\0\1\77\1\0\2\77\7\0\3\77" + "\4\0\17\77\1\233\6\77\24\0\1\77\1\0\2\77"
            + "\7\0\3\77\4\0\17\77\1\234\6\77\24\0\1\77" + "\1\0\2\77\7\0\3\77\4\0\1\77\1\235\24\77" + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34"
            + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\236" + "\21\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2"
            + "\2\0\1\34\1\77\17\34\1\237\1\34\1\77\2\34" + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77"
            + "\17\34\1\240\1\34\1\77\2\34\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\12\34\1\241\6\34"
            + "\1\77\2\34\24\0\1\77\1\0\2\77\7\0\3\77" + "\4\0\5\77\1\242\20\77\4\0\1\2\4\0\2\2" + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0"
            + "\1\2\2\0\1\34\1\77\17\34\1\243\1\34\1\77" + "\2\34\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34"
            + "\1\77\15\34\1\244\3\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\77\12\34\1\245"
            + "\6\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2" + "\2\0\1\34\1\77\10\34\1\246\10\34\1\77\2\34"
            + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\14\77" + "\1\247\11\77\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0"
            + "\1\34\1\77\7\34\1\250\11\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0" + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\17\34"
            + "\1\251\1\34\1\77\2\34\4\0\1\2\4\0\2\2" + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0" + "\1\2\2\0\1\34\1\77\21\34\1\77\1\34\1\252"
            + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\21\77" + "\1\253\4\77\24\0\1\77\1\0\2\77\7\0\3\77"
            + "\4\0\4\77\1\254\21\77\24\0\1\77\1\0\2\77" + "\7\0\3\77\4\0\17\77\1\255\6\77\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2"
            + "\3\34\1\0\1\2\2\0\1\34\1\77\3\34\1\256" + "\15\34\1\77\2\34\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2"
            + "\2\0\1\34\1\77\3\34\1\257\15\34\1\77\2\34" + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77"
            + "\7\34\1\260\11\34\1\77\2\34\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\17\34\1\261\1\34"
            + "\1\77\2\34\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\7\34\1\262\11\34\1\77\2\34\24\0"
            + "\1\77\1\0\2\77\7\0\3\77\4\0\22\77\1\263" + "\3\77\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34"
            + "\1\77\3\34\1\264\15\34\1\77\2\34\4\0\1\2" + "\4\0\2\2\11\0\1\34\1\0\2\34\6\0\1\2" + "\3\34\1\0\1\2\2\0\1\34\1\265\21\34\1\77"
            + "\2\34\4\0\1\2\4\0\2\2\11\0\1\34\1\0" + "\2\34\6\0\1\2\3\34\1\0\1\2\2\0\1\34" + "\1\77\14\34\1\266\4\34\1\77\2\34\24\0\1\77"
            + "\1\0\2\77\7\0\3\77\4\0\17\77\1\267\6\77" + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\21\77" + "\1\270\4\77\4\0\1\2\4\0\2\2\11\0\1\34"
            + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\12\34\1\271\6\34\1\77\2\34\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\13\34" + "\1\272\5\34\1\77\2\34\4\0\1\2\4\0\2\2" + "\11\0\1\34\1\0\2\34\6\0\1\2\3\34\1\0"
            + "\1\2\2\0\1\34\1\77\17\34\1\273\1\34\1\77" + "\2\34\24\0\1\77\1\0\2\77\7\0\3\77\4\0"
            + "\13\77\1\274\12\77\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2"
            + "\2\0\1\34\1\77\16\34\1\275\2\34\1\77\2\34" + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\14\77"
            + "\1\276\11\77\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0" + "\1\34\1\77\3\34\1\277\15\34\1\77\2\34\24\0"
            + "\1\77\1\0\2\77\7\0\3\77\4\0\15\77\1\300" + "\10\77\24\0\1\77\1\0\2\77\7\0\3\77\4\0"
            + "\13\77\1\301\12\77\4\0\1\2\4\0\2\2\11\0" + "\1\34\1\0\2\34\6\0\1\2\3\34\1\0\1\2"
            + "\2\0\1\34\1\77\17\34\1\302\1\34\1\77\2\34" + "\4\0\1\2\4\0\2\2\11\0\1\34\1\0\2\34" + "\6\0\1\2\3\34\1\0\1\2\2\0\1\34\1\77"
            + "\12\34\1\303\6\34\1\77\2\34\4\0\1\2\4\0" + "\2\2\11\0\1\34\1\0\2\34\6\0\1\2\3\34" + "\1\0\1\2\2\0\1\34\1\77\21\34\1\77\1\34"
            + "\1\304\24\0\1\77\1\0\2\77\7\0\3\77\4\0" + "\2\77\1\305\23\77\24\0\1\77\1\0\2\77\7\0"
            + "\3\77\4\0\3\77\1\306\22\77\24\0\1\77\1\0" + "\2\77\7\0\3\77\4\0\5\77\1\307\20\77\4\0" + "\1\2\4\0\2\2\11\0\1\34\1\0\2\34\6\0"
            + "\1\2\3\34\1\0\1\2\2\0\1\34\1\77\7\34" + "\1\310\11\34\1\77\2\34\24\0\1\77\1\0\2\77"
            + "\7\0\3\77\4\0\5\77\1\311\20\77\24\0\1\77" + "\1\0\2\77\7\0\3\77\4\0\5\77\1\312\20\77"
            + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\14\77" + "\1\313\11\77\4\0\1\2\4\0\2\2\11\0\1\34" + "\1\0\2\34\6\0\1\2\3\34\1\0\1\2\2\0"
            + "\1\34\1\314\21\34\1\77\2\34\24\0\1\77\1\0" + "\2\77\7\0\3\77\4\0\17\77\1\315\6\77\24\0"
            + "\1\77\1\0\2\77\7\0\2\77\1\316\4\0\26\77" + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\21\77"
            + "\1\317\4\77\24\0\1\77\1\0\2\77\7\0\3\77" + "\4\0\12\77\1\320\13\77\24\0\1\77\1\0\2\77"
            + "\7\0\3\77\4\0\14\77\1\321\11\77\24\0\1\77" + "\1\0\2\77\7\0\3\77\4\0\5\77\1\322\20\77"
            + "\24\0\1\77\1\0\2\77\7\0\3\77\4\0\12\77" + "\1\323\13\77\24\0\1\77\1\0\2\77\7\0\3\77" + "\4\0\25\77\1\324\4\0";

    private static int[] zzUnpackTrans()
    {
        int[] result = new int[9300];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result)
    {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while( i < l )
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while( --count > 0 );
        }
        return j;
    }


    /** Error code for "Unknown internal scanner error". */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /** Error code for "could not match input". */
    private static final int ZZ_NO_MATCH = 1;
    /** Error code for "pushback value was too large". */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {"Unknown internal scanner error", "Error: could not match input",
            "Error: pushback value was too large"};

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\11\1\5\11\5\1\2\11\3\1\1\11\2\1" + "\3\11\17\1\1\11\1\1\4\11\1\1\1\0\2\11"
            + "\1\0\1\11\1\0\1\11\7\1\4\11\2\1\1\0" + "\30\1\2\11\1\0\1\11\1\0\1\1\1\0\2\1" + "\1\0\31\1\1\0\116\1";

    private static int[] zzUnpackAttribute()
    {
        int[] result = new int[212];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result)
    {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while( i < l )
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while( --count > 0 );
        }
        return j;
    }

    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /** Number of newlines encountered up to the start of the matched text. */
    private int yyline;

    /** Number of characters from the last newline up to the start of the matched text. */
    @SuppressWarnings ( "unused" )
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    private int yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings ( "unused" )
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings ( "unused" )
    private boolean zzEOFDone;

    /* user code: */
    int lastToken;

    private int nextState = YYINITIAL;

    protected Logger log = Logger.getLogger(AntimonyLexer.class.getName());

    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace) throws IOException
    {
        Token t = getNextToken();
        while( t != null && ( ( !returnWhiteSpace && t.isWhiteSpace() ) || ( !returnComments && t.isComment() ) ) )
        {
            t = getNextToken();
        }
        return ( t );
    }

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
     * All internal variables are reset, the old input stream  cannot be reused
     * (content of the internal buffer is discarded and lost).
     * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException
    {
        yyreset(reader);
        this.yyline = yyline;
        this.yychar = yychar;
        this.yycolumn = yycolumn;
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public AntimonyLexer(java.io.Reader in)
    {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input)
    {
        return ZZ_CMAP[input];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException
    {

        /* first: make room (if you can) */
        if( zzStartRead > 0 )
        {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if( zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate )
        {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if( numRead == 0 )
        {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if( numRead > 0 )
        {
            zzEndRead += numRead;
            if( Character.isHighSurrogate(zzBuffer[zzEndRead - 1]) )
            {
                if( numRead == requested )
                { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
                else
                { // There is room in the buffer for at least one more char
                    int c = zzReader.read(); // Expecting to read a paired low surrogate char
                    if( c == -1 )
                    {
                        return true;
                    }
                    else
                    {
                        zzBuffer[zzEndRead++] = (char)c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException
    {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if( zzReader != null )
        {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader)
    {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if( zzBuffer.length > ZZ_BUFFERSIZE )
        {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition()
    {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF()
    {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate()
    {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(int position)
    {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch( ArrayIndexOutOfBoundsException e )
        {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     {@link #yylength()}.
     */
    public void yypushback(int number)
    {
        if( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }



    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    public Token getNextToken() throws java.io.IOException
    {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while( true )
        {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for( zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount )
            {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch( zzCh )
                {
                    case '\u000B': // fall through
                    case '\u000C': // fall through
                    case '\u0085': // fall through
                    case '\u2028': // fall through
                    case '\u2029':
                        yyline++;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        zzR = true;
                        break;
                    case '\n':
                        if( zzR )
                            zzR = false;
                        else
                        {
                            yyline++;
                        }
                        break;
                    default:
                        zzR = false;
                }
            }

            if( zzR )
            {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if( zzMarkedPosL < zzEndReadL )
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if( zzAtEOF )
                    zzPeek = false;
                else
                {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if( eof )
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if( zzPeek )
                    yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if( ( zzAttributes & 1 ) == 1 )
            {
                zzAction = zzState;
            }


            zzForAction:
            {
                while( true )
                {

                    if( zzCurrentPosL < zzEndReadL )
                    {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if( zzAtEOF )
                    {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else
                    {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if( eof )
                        {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else
                        {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if( zzNext == -1 )
                        break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if( ( zzAttributes & 1 ) == 1 )
                    {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if( ( zzAttributes & 8 ) == 8 )
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if( zzInput == YYEOF && zzStartRead == zzCurrentPos )
            {
                zzAtEOF = true;
                return null;
            }
            else
            {
                switch( zzAction < 0 ? zzAction : ZZ_ACTION[zzAction] )
                {
                    case 1:
                    {
                        lastToken = AntimonyToken.ERROR_IDENTIFIER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 75:
                        break;
                    case 2:
                    {
                        lastToken = AntimonyToken.WHITE_SPACE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 76:
                        break;
                    case 3:
                    {
                        lastToken = AntimonyToken.OPERATOR_LOGICAL_NOT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 77:
                        break;
                    case 4:
                    { /* most of these errors have to be caught down near the end of the file.
                      * This way, previous expressions of the same length have precedence.
                      * This is really useful for catching anything bad by just allowing it 
                      * to slip through the cracks. 
                      */
                        lastToken = AntimonyToken.ERROR_UNCLOSED_STRING;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 78:
                        break;
                    case 5:
                    {
                        lastToken = AntimonyToken.COMMENT_HASH;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 79:
                        break;
                    case 6:
                    {
                        lastToken = AntimonyToken.OPERATOR_COMPONENT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 80:
                        break;
                    case 7:
                    {
                        log.log(Level.SEVERE, ( "Can't highlight illegal character <" + yytext() + "> at line " + this.yyline ));
                    }
                    // fall through
                    case 81:
                        break;
                    case 8:
                    {
                        lastToken = AntimonyToken.OPERATOR_BITWISE_AND;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 82:
                        break;
                    case 9:
                    {
                        lastToken = AntimonyToken.OPERATOR_DIFF;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 83:
                        break;
                    case 10:
                    {
                        lastToken = AntimonyToken.SEPARATOR_LPAREN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 84:
                        break;
                    case 11:
                    {
                        lastToken = AntimonyToken.SEPARATOR_RPAREN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 85:
                        break;
                    case 12:
                    {
                        lastToken = AntimonyToken.OPERATOR_MULTIPLY;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 86:
                        break;
                    case 13:
                    {
                        lastToken = AntimonyToken.OPERATOR_ADD;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 87:
                        break;
                    case 14:
                    {
                        lastToken = AntimonyToken.SEPARATOR_COMMA;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 88:
                        break;
                    case 15:
                    {
                        lastToken = AntimonyToken.OPERATOR_SUBTRACT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 89:
                        break;
                    case 16:
                    {
                        lastToken = AntimonyToken.OPERATOR_DIVIDE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 90:
                        break;
                    case 17:
                    { /* At this point, the number we found could still be too large.
                      * If it is too large, we need to return an error.
                      * Java has methods built in that will decode from a string
                      * and throw an exception the number is too large 
                      */
                        try
                        {
                            /* bigger negatives are allowed than positives.  Thus
                             * we have to be careful to make sure a neg sign is preserved
                             */
                            if( lastToken == AntimonyToken.OPERATOR_SUBTRACT )
                            {
                                Integer.decode('-' + yytext());
                            }
                            else
                            {
                                Integer.decode(yytext());
                            }
                            lastToken = AntimonyToken.LITERAL_INTEGER_DECIMAL;
                        }
                        catch( NumberFormatException e )
                        {
                            lastToken = AntimonyToken.ERROR_INTEGER_DECIMIAL_SIZE;
                        }
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 91:
                        break;
                    case 18:
                    {
                        lastToken = AntimonyToken.OPERATOR_SEQUENCE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 92:
                        break;
                    case 19:
                    {
                        lastToken = AntimonyToken.SEPARATOR_SEMICOLON;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 93:
                        break;
                    case 20:
                    {
                        lastToken = AntimonyToken.OPERATOR_LESS_THAN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 94:
                        break;
                    case 21:
                    {
                        lastToken = AntimonyToken.OPERATOR_ASSIGN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 95:
                        break;
                    case 22:
                    {
                        lastToken = AntimonyToken.OPERATOR_GREATER_THAN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 96:
                        break;
                    case 23:
                    {
                        lastToken = AntimonyToken.OPERATOR_HELP;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 97:
                        break;
                    case 24:
                    {
                        lastToken = AntimonyToken.IDENTIFIER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 98:
                        break;
                    case 25:
                    {
                        lastToken = AntimonyToken.SEPARATOR_LBRACKET;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 99:
                        break;
                    case 26:
                    {
                        lastToken = AntimonyToken.SEPARATOR_RBRACKET;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 100:
                        break;
                    case 27:
                    {
                        lastToken = AntimonyToken.OPERATOR_EXPONENT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 101:
                        break;
                    case 28:
                    {
                        lastToken = AntimonyToken.SEPARATOR_LBRACE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 102:
                        break;
                    case 29:
                    {
                        lastToken = AntimonyToken.OPERATOR_BITWISE_OR;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 103:
                        break;
                    case 30:
                    {
                        lastToken = AntimonyToken.SEPARATOR_RBRACE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 104:
                        break;
                    case 31:
                    {
                        lastToken = AntimonyToken.OPERATOR_TILDE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 1, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 105:
                        break;
                    case 32:
                    {
                        lastToken = AntimonyToken.OPERATOR_NOT_EQUAL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 106:
                        break;
                    case 33:
                    {
                        lastToken = AntimonyToken.LITERAL_STRING;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 107:
                        break;
                    case 34:
                    {
                        lastToken = AntimonyToken.ERROR_MALFORMED_UNCLOSED_STRING;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 108:
                        break;
                    case 35:
                    {
                        lastToken = AntimonyToken.OPERATOR_SPECIAL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 109:
                        break;
                    case 36:
                    {
                        lastToken = AntimonyToken.OPERATOR_LOGICAL_AND;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 110:
                        break;
                    case 37:
                    {
                        lastToken = AntimonyToken.ERROR_MALFORMED_CHARACTER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 111:
                        break;
                    case 38:
                    {
                        lastToken = AntimonyToken.OPERATOR_ASSIGN_RARROW;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 112:
                        break;
                    case 39:
                    {
                        lastToken = AntimonyToken.LITERAL_DOUBLE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 113:
                        break;
                    case 40:
                    {
                        Double d;
                        try
                        {
                            d = Double.valueOf(yytext());
                            if ( d.isInfinite() || d.compareTo(Double.valueOf(0d)) == 0 )
                            {
                                lastToken = AntimonyToken.ERROR_DOUBLE_SIZE;
                            }
                            else
                            {
                                lastToken = AntimonyToken.LITERAL_DOUBLE;
                            }
                        }
                        catch( NumberFormatException e )
                        {
                            lastToken = AntimonyToken.ERROR_DOUBLE_SIZE;
                        }
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 114:
                        break;
                    case 41:
                    {
                        lastToken = AntimonyToken.OPERATOR_ASSIGN_ARROW;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 115:
                        break;
                    case 42:
                    {
                        lastToken = AntimonyToken.OPERATOR_LESS_THAN_OR_EQUAL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 116:
                        break;
                    case 43:
                    {
                        lastToken = AntimonyToken.OPERATOR_EQUAL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 117:
                        break;
                    case 44:
                    {
                        lastToken = AntimonyToken.OPERATOR_GREATER_THAN_OR_EQUAL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 118:
                        break;
                    case 45:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_AT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 119:
                        break;
                    case 46:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_IN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 120:
                        break;
                    case 47:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_IS;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 121:
                        break;
                    case 48:
                    {
                        lastToken = AntimonyToken.ATOM_PI;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 122:
                        break;
                    case 49:
                    {
                        lastToken = AntimonyToken.OPERATOR_LOGICAL_OR;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 2, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 123:
                        break;
                    case 50:
                    {
                        lastToken = AntimonyToken.ERROR_MALFORMED_STRING;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 124:
                        break;
                    case 51:
                    {
                        lastToken = AntimonyToken.LITERAL_CHARACTER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState) );
                        return ( t );
                    }
                    // fall through
                    case 125:
                        break;
                    case 52:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_END;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 3, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 126:
                        break;
                    case 53:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_HAS;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 3, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 127:
                        break;
                    case 54:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_VAR;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 3, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 128:
                        break;
                    case 55:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_ELSE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 4, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 129:
                        break;
                    case 56:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_GENE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 4, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 130:
                        break;
                    case 57:
                    {
                        lastToken = AntimonyToken.LITERAL_BOOLEAN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 4, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 131:
                        break;
                    case 58:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_UNIT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 4, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 132:
                        break;
                    case 59:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_AFTER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 5, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 133:
                        break;
                    case 60:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_CONST;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 5, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 134:
                        break;
                    case 61:
                    {
                        lastToken = AntimonyToken.LITERAL_BOOLEAN;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 5, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 135:
                        break;
                    case 62:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_MODEL;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 5, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 136:
                        break;
                    case 63:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_ASSERT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 6, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 137:
                        break;
                    case 64:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_DELETE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 6, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 138:
                        break;
                    case 65:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_UNIT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 6, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 139:
                        break;
                    case 66:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_SPECIES;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 7, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 140:
                        break;
                    case 67:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_SUBTYPE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 7, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 141:
                        break;
                    case 68:
                    {
                        lastToken = AntimonyToken.ATOM_AVOGADRO;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 8, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 142:
                        break;
                    case 69:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_FUNCTION;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 8, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 143:
                        break;
                    case 70:
                    {
                        lastToken = AntimonyToken.ATOM_INFINITY;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 8, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 144:
                        break;
                    case 71:
                    {
                        lastToken = AntimonyToken.ATOM_NOTANUMBER;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 10, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 145:
                        break;
                    case 72:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_COMPARTMENT;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 11, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 146:
                        break;
                    case 73:
                    {
                        lastToken = AntimonyToken.ATOM_EXPONENTIALE;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 12, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 147:
                        break;
                    case 74:
                    {
                        lastToken = AntimonyToken.RESERVED_WORD_SUBSTANCEONLY;
                        AntimonyToken t = ( new AntimonyToken(lastToken, yytext(), yyline, yychar, yychar + 13, nextState) );
                        return ( t );
                    }
                    // fall through
                    case 148:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}

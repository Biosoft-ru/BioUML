/* Generated By:JJTree: Do not edit this line. BNGFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=BNG,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.bionetgen.bnglparser;

import java.util.HashMap;
import java.util.Map;

public class BNGFunction extends SimpleNode
{
    private int argumentNumber = -1;
    public void setArgumentNumber(int number)
    {
        if( argumentNumber != -1 )
            throw new UnsupportedOperationException("Trying to reset function arguments number");
        argumentNumber = number;
    }
    public int getArgumentNumber()
    {
        return argumentNumber;
    }

    private static Map<String, String> functionNames = new HashMap<>();
    private static Map<String, String> bngFunctionNames = new HashMap<>();
    static
    {
        functionNames.put("acos", "arccos");
        functionNames.put("asin", "arcsin");
        functionNames.put("atan", "arctan");
        functionNames.put("acosh", "arccosh");
        functionNames.put("asinh", "arcsinh");
        functionNames.put("atanh", "arctanh");
        functionNames.put("log10", "log");
        functionNames.put("log2", "ln");
        functionNames.put("rint", "floor");
        functionNames.put("_pi", "pi");
        functionNames.put("_e", "exp(1)");

        bngFunctionNames.put("arccos", "acos");
        bngFunctionNames.put("arcsin", "asin");
        bngFunctionNames.put("arctan", "atan");
        bngFunctionNames.put("arccosh", "acosh");
        bngFunctionNames.put("arcsinh", "asinh");
        bngFunctionNames.put("arctanh", "atanh");
        bngFunctionNames.put("pi", "_pi");
    }

    private String getValidBUMLName(String name)
    {
        return functionNames.containsKey(name) ? functionNames.get(name) : name;
    }
    private String getValidBNGName(String name)
    {
        return bngFunctionNames.containsKey(name) ? bngFunctionNames.get(name) : name;
    }

    @Override
    public void setName(String newName)
    {
        name = getValidBNGName(newName);
        firstToken.image = name;
    }

    @Override
    public String getFullName()
    {
        StringBuilder sb = new StringBuilder();
        int size = jjtGetNumChildren();
        boolean isAvg = name.equals("avg");
        if( name.equals("sum") || isAvg )
        {
            if( isAvg )
                sb.append("(");
            for( int i = 0; i < size; i++ )
            {
                if( children[i] instanceof BNGExpression )
                {
                    if( i != 1 )
                        sb.append("+");
                    sb.append(children[i].getFullName());
                }
            }
            if( isAvg )
                sb.append(")/").append(argumentNumber);
        }
        else if( name.equals("min") || name.equals("max") )
        {
            int brCounter = 0;
            sb.append(name);
            for( int i = 0; i < size; i++ )
            {
                if( children[i] instanceof BNGExpression && i != 1 && i != size - 2 )
                {
                    sb.append(name).append("(");
                    ++brCounter;
                }
                sb.append(children[i].getFullName());
            }
            while( brCounter != 0 )
            {
                sb.append(")");
                --brCounter;
            }
        }
        else
        {
            sb.append(getValidBUMLName(name));
            for( int i = 0; i < size; i++ )
                sb.append(children[i].getFullName());

            if( name.equals("log2") )
                sb.append("/ln(2)");
            else if( name.equals("rint") )
                sb.replace(sb.length() - 1, sb.length() - 1, "+0.5");
        }
        return sb.toString();
    }

    public BNGFunction(int id)
    {
        super(id);
    }

    public BNGFunction(BionetgenParser p, int id)
    {
        super(p, id);
    }

}
/* JavaCC - OriginalChecksum=6e1b2b33b0355200d97d82cd93aaadb5 (do not edit this line) */

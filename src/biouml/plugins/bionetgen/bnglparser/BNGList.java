/* Generated By:JJTree: Do not edit this line. BNGList.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=BNG,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.bionetgen.bnglparser;

public class BNGList extends SimpleNode
{
    public static final int UNDEFINED = -1;
    public static final int PARAMETER = 0;
    public static final int MOLECULETYPE = 1;
    public static final int SPECIES = 2;
    public static final int OBSERVABLES = 3;
    public static final int REACTIONS = 4;
    //public static final int FUNCTIONS = 5;
    public static final int OBSERVABLECONTENT = 6;
    public static final int REACTIONCOMPONENT = 7;
    public static final int ADDITIONCOMPONENT = 8;
    public static final int ACTION = 9;

    protected int type = UNDEFINED;
    private int endIndex = -1;

    public void setEndIndex(int i)
    {
        if( endIndex == -1 )
            endIndex = i;
    }

    public int getType()
    {
        return type;
    }

    public void setType(int type)
    {
        this.type = type;
    }

    public boolean isEmpty()
    {
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            if( children[i] instanceof BNGEOL || children[i] instanceof BNGComment || children[i] instanceof BNGSimpleElement )
                continue;
            return false;
        }
        return true;
    }

    /**
     * Transfers special tokens from BNGList to BNGList
     * (transfers child special tokens too)
     * @param sourceList
     */
    public void transferListSpecialTokens(BNGList sourceList)
    {
        int size = jjtGetNumChildren();
        int anotherListSize = sourceList.jjtGetNumChildren();
        if( size == 0 && anotherListSize == 0 )
            transferSpecialTokens(sourceList);
        else if( size == 0 && anotherListSize != 0 )
            transferSpecialTokens((SimpleNode)sourceList.jjtGetChild(0));
        else if( size != 0 && anotherListSize == 0 )
            ( (SimpleNode)children[0] ).transferSpecialTokens(sourceList);
        else
        {
            int length = Math.min(size, anotherListSize);
            for( int i = 0; i < length; i++ )
                ( (SimpleNode)children[i] ).transferSpecialTokens((SimpleNode)sourceList.jjtGetChild(i));
        }
    }

    public void addInBlock(Node child)
    {
        if( children == null )
        {
            addAsLast(child);
            return;
        }
        for( int i = children.length - 1; i >= 0; i-- )
        {
            if( "end".equals(children[i].getName()) )
            {
                endIndex = i;
                break;
            }
        }
        if( endIndex == -1 )
            addAsLast(child);
        else
            addChild(child, endIndex);
    }

    @Override
    public String toBNGString()
    {
        if( jjtGetNumChildren() == 0 )
        {
            if( firstToken != null && firstToken.specialToken != null )
                return appendSpecialTokens(firstToken.specialToken);
        }
        return "";
    }

    public BNGList(int id)
    {
        super(id);
    }

    public BNGList(BionetgenParser p, int id)
    {
        super(p, id);
    }
}
/* JavaCC - OriginalChecksum=b69d2b55a267e3c26d253a32cdbaa2bd (do not edit this line) */

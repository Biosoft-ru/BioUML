/* Generated By:JJTree: Do not edit this line. BNGModel.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=BNG,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.bionetgen.bnglparser;

import java.util.List;

import biouml.plugins.bionetgen.diagram.BionetgenMolecule;
import biouml.plugins.bionetgen.diagram.BionetgenMoleculeType;
import biouml.plugins.bionetgen.diagram.BionetgenSpeciesGraph;

public class BNGModel extends SimpleNode
{
    private int endIndex = -1;

    public void setEndIndex(int i)
    {
        if( endIndex == -1 )
            endIndex = i;
    }

    @Override
    public String toBNGString()
    {
        return "";
    }

    public void addInBlock(Node child)
    {
        if( children == null )
        {
            addAsLast(child);
            return;
        }
        for( int i = children.length - 1; i >= 0; i-- )
        {
            if( "end".equals(children[i].getName()) )
            {
                endIndex = i;
                break;
            }
        }
        if( endIndex == -1 )
            addAsLast(child);
        else
            addChild(child, endIndex);
    }

    public BNGList getList(int type)
    {
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            if( children[i] instanceof BNGList && ( (BNGList)children[i] ).getType() == type )
                return (BNGList)children[i];
        }
        return null;
    }

    public boolean containsList()
    {
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            if( children[i] instanceof BNGList )
                return true;
        }
        return false;
    }

    private String errorMessage = "";
    public String getErrorMessage()
    {
        return errorMessage;
    }

    private List<BionetgenMoleculeType> moleculeTypes = null;
    /**
     * Checks types of all molecules in model using molecule types block
     * (if it exists)
     * @throws ParseException 
     */
    public boolean checkMoleculesTypes() throws ParseException
    {
        if( !reinitMoleculeTypes() )
            return true;
        if( checkSeedSpecies() )
            return checkReactions();
        else
            return false;
    }

    /**
     * Tries to reinitialize molecule types. If model doesn't contain molecule types block
     * return <code>false</code>.
     * @return <code>true</code> if moleculeTypes were reinitialized and <code>false</code> otherwise
     * @throws ParseException if there are mistakes in molecule types block definition
     */
    public boolean reinitMoleculeTypes() throws ParseException
    {
        BNGList types = getList(BNGList.MOLECULETYPE);
        if( types == null || types.isEmpty() )
        {
            moleculeTypes = null;
            return false;
        }
        try
        {
            moleculeTypes = BionetgenMoleculeType.createMoleculeTypesList(types);
            return true;
        }
        catch( IllegalArgumentException e )
        {
            throw new ParseException(e.getMessage());
        }
    }

    private boolean checkReactions()
    {
        BNGList list = getList(BNGList.REACTIONS);
        if( list == null )
            return true;
        int counter = 0;
        for( int i = 0; i < list.jjtGetNumChildren(); i++ )
        {
            Node listChild = list.jjtGetChild(i);
            if( listChild instanceof BNGReaction )
            {
                ++counter;
                if( !checkReaction((BNGReaction)listChild) )
                {
                    errorMessage = "reactions block, reaction #" + counter;
                    return false;
                }
            }
        }
        return true;
    }

    private boolean checkReaction(BNGReaction reaction)
    {
        for( int i = 0; i < reaction.jjtGetNumChildren(); i++ )
        {
            Node reactionChild = reaction.jjtGetChild(i);
            if( reactionChild instanceof BNGList && ( (BNGList)reactionChild ).getType() == BNGList.REACTIONCOMPONENT )
            {
                for( int j = 0; j < reactionChild.jjtGetNumChildren(); j++ )
                {
                    Node currentChild = reactionChild.jjtGetChild(j);
                    if( currentChild instanceof BNGSpecies && !checkMoleculesTypeOf((BNGSpecies)currentChild, true) )
                        return false;
                }
            }
        }
        return true;
    }

    private boolean checkSeedSpecies()
    {
        BNGList list = getList(BNGList.SPECIES);
        if( list == null )
            return true;
        int counter = 0;
        for( int i = 0; i < list.jjtGetNumChildren(); i++ )
        {
            Node listChild = list.jjtGetChild(i);
            if( listChild instanceof BNGSeedSpecie )
            {
                ++counter;
                for( int j = 0; j < listChild.jjtGetNumChildren(); j++ )
                {
                    Node currentChild = listChild.jjtGetChild(j);
                    if( currentChild instanceof BNGSpecies && !checkMoleculesTypeOf((BNGSpecies)currentChild, false) )
                    {
                        errorMessage = "seed species block, species #" + counter;
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Checks types of given species' molecules using molecule types block (if it exists)
     * @param species species to check molecules type of
     * @param isTemplate flag indicating if a molecule can be partly determined
     * @return <code>true</code> if all molecules satisfy declared types and <code>false</code> otherwise
     */
    protected boolean checkMoleculesTypeOf(BNGSpecies species, boolean isTemplate)
    {
        if( moleculeTypes == null )
            return true;
        return checkMoleculesTypeOf(new BionetgenSpeciesGraph(species.getName()), isTemplate);
    }

    /**
     * Checks types of given species graph's molecules using molecule types block (if it exists)
     * @param bsg given graph to check molecule type of
     * @param isTemplate flag indicating if a molecule can be partly determined
     * @return <code>true</code> if all molecules satisfy declared types and <code>false</code> otherwise
     */
    public boolean checkMoleculesTypeOf(BionetgenSpeciesGraph bsg, boolean isTemplate)
    {
        if( moleculeTypes == null )
            return true;
        for( BionetgenMolecule mol : bsg.getMoleculesList() )
        {
            if( !checkMoleculeTypeOf(mol, isTemplate) )
                return false;
        }
        return true;
    }

    /**
     * Checks type of given molecule using molecule types block (if it exists)
     * @param mol given molecule to check type of
     * @param isTemplate flag indicating if a molecule can be partly determined
     * @return <code>true</code> if all molecules satisfy declared types and <code>false</code> otherwise
     */
    public boolean checkMoleculeTypeOf(BionetgenMolecule mol, boolean isTemplate)
    {
        if( moleculeTypes == null )
            return true;
        return BionetgenMoleculeType.checkAllowability(moleculeTypes, mol, isTemplate);
    }

    public BNGModel(int id)
    {
        super(id);
    }

    public BNGModel(BionetgenParser p, int id)
    {
        super(p, id);
    }
}
/* JavaCC - OriginalChecksum=3622b1f6c6f44460c1b82ceebca2424f (do not edit this line) */

/* Generated By:JJTree&JavaCC: Do not edit this line. BionetgenParser.java */
package biouml.plugins.bionetgen.bnglparser;

import java.io.Reader;
import java.io.StringReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import biouml.plugins.bionetgen.diagram.BionetgenConstants;
import biouml.standard.type.SpecieReference;

public class BionetgenParser/*@bgen(jjtree)*/implements BionetgenParserTreeConstants, BionetgenParserConstants {/*@bgen(jjtree)*/
  protected JJTBionetgenParserState jjtree = new JJTBionetgenParserState();protected static final String endl = "\u005cn";//System.getProperty("line.separator");

    protected static final DecimalFormat REACTION_NAME_FORMAT = new DecimalFormat("j00");
    protected int reactionNumber = 1;

    /** Default constructor. */
    public BionetgenParser()
    {
        this(new StringReader("0"));
    }

    public BNGStart parse(String modelName, Reader reader)
    {
        BNGStart astStart = null;
        try
        {
            reInitParser();
            ReInit(reader);
            astStart = Start();
            astStart.setName(modelName);
            BNGModel model = astStart.getModel();
            if(!model.checkMoleculesTypes())
                warning("Molecule type mismatch in " + model.getErrorMessage());
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return astStart;
    }

    public BNGExpression parseFormula(String formula)
    {
        BNGExpression expression = null;
        try
        {
            reInitParser();
            Reader reader = new StringReader(formula);
            ReInit(reader);
            expression = readSingleExpression();
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return expression;
    }

    public BNGSpecies parseSpecies(String graph)
    {
        BNGSpecies species = null;
        try
        {
            reInitParser();
            Reader reader = new StringReader(graph);
            ReInit(reader);
            species = readSingleBNGSpecies();
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return species;
    }

    private void reInitParser()
    {
        messages = new ArrayList<>();
        status = 0;
        reactionNumber = 1;
    }

    ///////////////////////////////////////////////////////////////////
    // Error processing issues
    //
    /** The expression was parsed successfully without any errors or warnings. */
    public static final int STATUS_OK           = 0;

    /** There were some warnings during expression parser. */
    public static final int STATUS_WARNING      = 1;

    /** There were some errors during expression parser. */
    public static final int STATUS_ERROR        = 2;

    /** Some fatal errors have occurred during the parser. */
    public static final int STATUS_FATAL_ERROR  = 4;

    protected int status;
    public int getStatus()
    {
        return status;
    }

    protected List<String> messages = new ArrayList<>();
    public List<String> getMessages()
    {
        return messages;
    }

    public void warning(String warningStr)
    {
        messages.add("Warning: " + warningStr + ".");
        status |= STATUS_WARNING;
    }

    public void error(String errorStr)
    {
        messages.add("Error: " + errorStr + ".");
        status |= STATUS_ERROR;
    }

    public void fatalError(String errorStr)
    {
        messages.add("Syntax error: " + errorStr + ".");
        status |= STATUS_FATAL_ERROR;
    }

/***************************************************************
                   GRAMMAR START
***************************************************************/
  final public BNGStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  BNGStart jjtn000 = new BNGStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      description(jjtn000);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          BNGEOL jjtn001 = new BNGEOL(JJTEOL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
          }
          break;
        case COMMENT:
          comment();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      model();
      actions(jjtn000);
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void begin() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BEGIN);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
             jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void end() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(END);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
           jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public BNGExpression readSingleExpression() throws ParseException {
 BNGExpression expr;
    expr = expression();
    jj_consume_token(0);
     {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public BNGSpecies readSingleBNGSpecies() throws ParseException {
 BNGSpecies species;
    species = readBNGSpecies();
    jj_consume_token(0);
     {if (true) return species;}
    throw new Error("Missing return statement in function");
  }

/***************************************************************
                   BIONETGEN SPECIES
***************************************************************/
  final public BNGSpecies readBNGSpecies() throws ParseException {
 /*@bgen(jjtree) Species */
    BNGSpecies jjtn000 = new BNGSpecies(JJTSPECIES);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));StringBuilder sb = new StringBuilder();
    BNGSpecies bngs = jjtn000;
    try {
      multiStateSpecie(sb);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
            BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(50);
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                 sb.append("."); jjtn001.setName(".");
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
        }
        multiStateSpecie(sb);
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
 bngs.setName(sb.toString()); {if (true) return bngs;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void multiStateSpecie(StringBuilder sb) throws ParseException {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                    sb.append(token.image); jjtn001.setName(token.image);
    } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SITE:
    case 60:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SITE:
        state(sb);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      lBracket();
                 sb.append("(");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        moleculeComponent(sb);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          comma();
               sb.append(",");
          moleculeComponent(sb);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      rBraket();
                sb.append(")");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SITE:
        state(sb);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void moleculeComponent(StringBuilder sb) throws ParseException {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                    sb.append(token.image); jjtn001.setName(token.image);
    } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SITE:
       BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SITE);
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
               jjtn002.jjtSetLastToken(getToken(0));
              sb.append(token.image); jjtn002.setName(token.image);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void state(StringBuilder sb) throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SITE);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
             sb.append(token.image); jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   COMMENT
***************************************************************/
  final public void comment() throws ParseException {
 /*@bgen(jjtree) Comment */
  BNGComment jjtn000 = new BNGComment(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMMENT);
               jjtn000.setName(token.image);
                                                 BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   DESCRIPTION
***************************************************************/
  final public void description(BNGStart start) throws ParseException {
 /*@bgen(jjtree) Description */
    BNGDescription jjtn000 = new BNGDescription(JJTDESCRIPTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));StringBuffer buf = new StringBuffer();
    boolean exists = false;
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
          BNGComment jjtn001 = new BNGComment(JJTCOMMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(COMMENT);
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                    jjtn001.setName(token.image);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
            if( token.image != null && token.image.length() > 1 )
            {
                if( buf.length() > 1 )
                    buf.append(endl);
                buf.append(token.image.substring(2));
            }
            exists = true;
          BNGEOL jjtn002 = new BNGEOL(JJTEOL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setName(buf.toString());
        if(exists)
            start.addChild(jjtn000, 0);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   MODEL
***************************************************************/
  final public void model() throws ParseException {
 /*@bgen(jjtree) Model */
    BNGModel jjtn000 = new BNGModel(JJTMODEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));int[] usage = new int[5];
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MODEL);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
               jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case BEGIN:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          comment();
          break;
        default:
          jj_la1[11] = jj_gen;
          if (jj_2_1(2)) {
     if(usage[0]!=0) error("Multiple parameters block");
            parameters();
     usage[0]=1;
          } else if (jj_2_2(2)) {
     if(usage[1]!=0) error("Multiple molecule types block");
            moleculeTypes();
     usage[1]=1;
          } else if (jj_2_3(2)) {
     if(usage[2]!=0) error("Multiple seed species block");
            species();
     usage[2]=1;
          } else if (jj_2_4(2)) {
     if(usage[3]!=0) error("Multiple observables block");
            observables();
     usage[3]=1;
          } else if (jj_2_5(2)) {
     if(usage[4]!=0) error("Multiple reactions block");
            reactions();
     usage[4]=1;
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EOL:
      BNGEOL jjtn003 = new BNGEOL(JJTEOL);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtn003.jjtSetFirstToken(getToken(1));
              try {
                jj_consume_token(EOL);
              } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtn003.jjtSetLastToken(getToken(0));
      }
              }
              break;
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MODEL);
                jjtree.closeNodeScope(jjtn004, true);
                jjtc004 = false;
                jjtn004.jjtSetLastToken(getToken(0));
               jjtn004.setName(token.image);
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        BNGEOL jjtn005 = new BNGEOL(JJTEOL);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        jjtn005.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
          jjtn005.jjtSetLastToken(getToken(0));
        }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   PARAMETERS

@pending - validate parameter name
@pending - recovery after error

***************************************************************/
  final public void parameters() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGList list = jjtn000;
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARAMETERS);
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                    list.setType(BNGList.PARAMETER); jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case LABEL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        if (jj_2_6(2)) {
          parameter();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMENT:
            comment();
            break;
          case EOL:
                                                 BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                                                 boolean jjtc003 = true;
                                                 jjtree.openNodeScope(jjtn003);
                                                 jjtn003.jjtSetFirstToken(getToken(1));
            try {
              jj_consume_token(EOL);
            } finally {
                                                 if (jjtc003) {
                                                   jjtree.closeNodeScope(jjtn003, true);
                                                   jjtn003.jjtSetLastToken(getToken(0));
                                                 }
            }
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PARAMETERS);
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                     jjtn004.jjtSetLastToken(getToken(0));
                    jjtn004.setName(token.image);
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  BNGParameter jjtn000 = new BNGParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGParameter parameter = jjtn000;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        label();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                    parameter.setName(token.image); jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
          BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(51);
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
               jjtn002.jjtSetLastToken(getToken(0));
              jjtn002.setName(token.image);
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment();
        break;
      case EOL:
                   BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   MOLECULE TYPES
 ***************************************************************/
  final public void moleculeTypes() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGList list = jjtn000;
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MOLECULE_TYPES);
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                         jjtn001.jjtSetLastToken(getToken(0));
                        list.setType(BNGList.MOLECULETYPE); jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case LABEL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
          }
          break;
        case LABEL:
        case IDENTIFIER:
          moleculeType();
          break;
        case COMMENT:
          comment();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MOLECULE_TYPES);
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                         jjtn004.jjtSetLastToken(getToken(0));
                        jjtn004.setName(token.image);
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
      BNGEOL jjtn005 = new BNGEOL(JJTEOL);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
        jjtn005.jjtSetLastToken(getToken(0));
      }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void moleculeType() throws ParseException {
 /*@bgen(jjtree) MoleculeType */
  BNGMoleculeType jjtn000 = new BNGMoleculeType(JJTMOLECULETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        label();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      readBNGSpecies();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment();
        break;
      case EOL:
                   BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   SPECIES

@pending validate species name
@pending special class/type for Bionetgen species and molecules

***************************************************************/
  final public void species() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGList list = jjtn000; String blockName;
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SEED_SPECIES);
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.jjtSetLastToken(getToken(0));
                      list.setType(BNGList.SPECIES);  jjtn001.setName(token.image); blockName=token.image;
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case LABEL:
        case IDENTIFIER:
        case 52:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
          }
          break;
        default:
          jj_la1[24] = jj_gen;
          if (jj_2_7(2)) {
            specie();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMENT:
              comment();
              break;
            default:
              jj_la1[25] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SEED_SPECIES);
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
      jjtn004.jjtSetLastToken(getToken(0));
     jjtn004.setName(token.image);
    if(!blockName.equals(token.image))
    error("Doesn't match seed species block names in the beginning and in the end");
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void specie() throws ParseException {
 /*@bgen(jjtree) SeedSpecie */
 BNGSeedSpecie jjtn000 = new BNGSeedSpecie(JJTSEEDSPECIE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));BNGSeedSpecie seedSpecie = jjtn000;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        label();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
          BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(52);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
               jjtn001.setName(token.image); seedSpecie.setConstant(true);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      readBNGSpecies();
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment();
        break;
      case EOL:
                   BNGEOL jjtn002 = new BNGEOL(JJTEOL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   OBSERVABLES
***************************************************************/
  final public void observables() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGList list = jjtn000;
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(OBSERVABLES);
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                     list.setType(BNGList.OBSERVABLES); jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case SPECIES:
        case MOLECULES:
        case LABEL:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
          }
          break;
        default:
          jj_la1[30] = jj_gen;
          if (jj_2_8(2)) {
            observable();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMENT:
              comment();
              break;
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(OBSERVABLES);
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtn004.jjtSetLastToken(getToken(0));
                     jjtn004.setName(token.image);
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void observable() throws ParseException {
 /*@bgen(jjtree) Observable */
  BNGObservable jjtn000 = new BNGObservable(JJTOBSERVABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGObservable observable = jjtn000;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        label();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPECIES:
          jj_consume_token(SPECIES);
                 observable.setMatchOnce(true);
          break;
        case MOLECULES:
          jj_consume_token(MOLECULES);
                                                                observable.setMatchOnce(false);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.jjtSetLastToken(getToken(0));
     jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
                    observable.setName(token.image); jjtn002.setName(token.image);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      contents();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment();
        break;
      case EOL:
                   BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void contents() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtn000.setType(BNGList.OBSERVABLECONTENT);
      label_10:
      while (true) {
        readBNGSpecies();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          comma();
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_10;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   REACTIONS

@pending reaction subclass
@pending stoichiometry
@pending equation

***************************************************************/
  final public void reactions() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGList list = jjtn000;
    try {
      begin();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(REACTIONS);
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                   list.setType(BNGList.REACTIONS); jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case LABEL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          if (jj_2_9(2)) {
            reaction();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMENT:
              comment();
              break;
            default:
              jj_la1[39] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      end();
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(REACTIONS);
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                   jjtn004.setName(token.image);
      } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
      }
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(EOL);
      } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void reaction() throws ParseException {
 /*@bgen(jjtree) Reaction */
  BNGReaction jjtn000 = new BNGReaction(JJTREACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));BNGReaction reaction = jjtn000;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        label();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
     reaction.setName(REACTION_NAME_FORMAT.format(reactionNumber++));
      reactionComponents(SpecieReference.REACTANT);
        BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          jj_consume_token(53);
                reaction.setReversible(false);
          break;
        case 54:
          jj_consume_token(54);
                                                         reaction.setReversible(true);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                                            jjtc001 = false;
                                                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                                                           jjtn001.setName(token.image);
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
      reactionComponents(SpecieReference.PRODUCT);
      rateLaw();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDITION:
        reactionApp();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        comment();
        break;
      case EOL:
                   BNGEOL jjtn002 = new BNGEOL(JJTEOL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EOL);
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void reactionComponents(String type) throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtn000.setName(type); jjtn000.setType(BNGList.REACTIONCOMPONENT);
      readBNGSpecies();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 55:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
        plus();
        readBNGSpecies();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void rateLaw() throws ParseException {
 /*@bgen(jjtree) RateLaw */
  BNGRateLaw jjtn000 = new BNGRateLaw(JJTRATELAW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MM:
        mmLaw(jjtn000);
        break;
      case SAT:
        saturationLaw(jjtn000);
        break;
      case BUILT_IN_CONST:
      case UNARY_FUNCTION:
      case BINARY_FUNCTION:
      case MULTIARG_FUNCTION:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case IDENTIFIER:
      case 55:
      case 56:
      case 60:
        defaultLaw(jjtn000);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void mmLaw(BNGRateLaw rateLaw) throws ParseException {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MM);
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
             jjtn001.jjtSetLastToken(getToken(0));
            rateLaw.setType(BionetgenConstants.MM); jjtn001.setName(token.image);
    } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    lBracket();
    expression();
    comma();
    expression();
    rBraket();
  }

  final public void saturationLaw(BNGRateLaw rateLaw) throws ParseException {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SAT);
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
             rateLaw.setType(BionetgenConstants.SATURATION); jjtn001.setName(token.image);
    } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
    }
    lBracket();
    expression();
    comma();
    expression();
    rBraket();
  }

  final public void defaultLaw(BNGRateLaw rateLaw) throws ParseException {
     rateLaw.setType(BionetgenConstants.DEFAULT);
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      comma();
      expression();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  final public void reactionApp() throws ParseException {
 /*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
     jjtn000.setType(BNGList.ADDITIONCOMPONENT);
      label_13:
      while (true) {
        addition();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDITION:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_13;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void addition() throws ParseException {
 /*@bgen(jjtree) Addition */
  BNGAddition jjtn000 = new BNGAddition(JJTADDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ADDITION);
                jjtn000.setName(token.image);
      lBracket();
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(INTEGER_LITERAL);
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                          jjtn001.setName(token.image);
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      label_14:
      while (true) {
        comma();
        readBNGSpecies();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_14;
        }
      }
      rBraket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   ACTIONS
***************************************************************/
  final public void actions(BNGStart start) throws ParseException {
 /*@bgen(jjtree) List */
    BNGList jjtn000 = new BNGList(JJTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));boolean exists = false;
    try {
     jjtn000.setType(BNGList.ACTION);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
        case COMMENT:
        case GENERATE:
        case SIMULATE:
        case SIMULATE_ODE:
        case SIMULATE_SSA:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GENERATE:
          generateNetwork();
          break;
        case SIMULATE:
        case SIMULATE_ODE:
        case SIMULATE_SSA:
          simulate();
          break;
        case IDENTIFIER:
          unsupportedAction();
          break;
        case EOL:
                                                                BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
                                                                jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(EOL);
          } finally {
                                                                if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                                }
          }
          break;
        case COMMENT:
          comment();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                       exists = true;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        if(exists)
            start.addAsLast(jjtn000);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void unsupportedAction() throws ParseException {
 /*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
                  jjtn000.setName(token.image);
      lBracket();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        lBrace();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SAMPLE_TIMES:
      case GENERATION_PARAM:
      case ODE_PARAM:
      case SSA_PARAM:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          unsupportedActionParam();
          break;
        case SAMPLE_TIMES:
        case GENERATION_PARAM:
        case ODE_PARAM:
        case SSA_PARAM:
        case IDENTIFIER:
          simulationParameter();
          break;
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
          constant();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_16;
          }
          comma();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
            unsupportedActionParam();
            break;
          case SAMPLE_TIMES:
          case GENERATION_PARAM:
          case ODE_PARAM:
          case SSA_PARAM:
          case IDENTIFIER:
            simulationParameter();
            break;
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
            constant();
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        rBrace();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      rBraket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void unsupportedActionParam() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STRING_LITERAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                      jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void generateNetwork() throws ParseException {
 /*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GENERATE);
                jjtn000.setName(token.image);
      lBracket();
      lBrace();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERATION_PARAM:
        generateParameter();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_17;
          }
          comma();
          generateParameter();
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      rBrace();
      rBraket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void generateParameter() throws ParseException {
 /*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GENERATION_PARAM);
                        jjtn000.setName(token.image);
      hashArrow();
      value();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void simulate() throws ParseException {
 /*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIMULATE_ODE:
        simulateODE(jjtn000);
        break;
      case SIMULATE_SSA:
        simulateSSA(jjtn000);
        break;
      case SIMULATE:
        jj_consume_token(SIMULATE);
                 jjtn000.setName(token.image);
        lBracket();
        lBrace();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SAMPLE_TIMES:
        case GENERATION_PARAM:
        case ODE_PARAM:
        case SSA_PARAM:
        case IDENTIFIER:
          simulationParameter();
          label_18:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[59] = jj_gen;
              break label_18;
            }
            comma();
            simulationParameter();
          }
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        rBrace();
        rBraket();
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void simulateODE(BNGAction action) throws ParseException {
    jj_consume_token(SIMULATE_ODE);
                    action.setName(token.image);
    lBracket();
    lBrace();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SAMPLE_TIMES:
    case ODE_PARAM:
    case SSA_PARAM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ODE_PARAM:
      case SSA_PARAM:
        simulateODEParameter();
        break;
      case SAMPLE_TIMES:
        sampleTimes();
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_19;
        }
        comma();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ODE_PARAM:
        case SSA_PARAM:
          simulateODEParameter();
          break;
        case SAMPLE_TIMES:
          sampleTimes();
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    rBrace();
    rBraket();
  }

  final public void simulateSSA(BNGAction action) throws ParseException {
    jj_consume_token(SIMULATE_SSA);
                    action.setName(token.image);
    lBracket();
    lBrace();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SAMPLE_TIMES:
    case SSA_PARAM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSA_PARAM:
        simulateSSAParameter();
        break;
      case SAMPLE_TIMES:
        sampleTimes();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_20;
        }
        comma();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SSA_PARAM:
          simulateSSAParameter();
          break;
        case SAMPLE_TIMES:
          sampleTimes();
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    rBrace();
    rBraket();
  }

  final public void simulateODEParameter() throws ParseException {
 /*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ODE_PARAM:
        jj_consume_token(ODE_PARAM);
        break;
      case SSA_PARAM:
        jj_consume_token(SSA_PARAM);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                jjtn000.setName(token.image);
      hashArrow();
      value();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void simulateSSAParameter() throws ParseException {
 /*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SSA_PARAM);
                 jjtn000.setName(token.image);
      hashArrow();
      value();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void simulationParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ODE_PARAM:
    case SSA_PARAM:
      simulateODEParameter();
      break;
    case GENERATION_PARAM:
      generateParameter();
      break;
    case SAMPLE_TIMES:
      sampleTimes();
      break;
    case IDENTIFIER:
      hashParameter();
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      hash();
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
      constant();
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void hash() throws ParseException {
 /*@bgen(jjtree) Hash */
  BNGHash jjtn000 = new BNGHash(JJTHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      lBrace();
      hashParameter();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_21;
        }
        comma();
        hashParameter();
      }
      rBrace();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void hashParameter() throws ParseException {
 /*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENTIFIER);
                  jjtn000.setName(token.image);
      hashArrow();
      constant();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void sampleTimes() throws ParseException {
 /*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SAMPLE_TIMES);
                    jjtn000.setName(token.image);
      lArrayBr();
      constant();
      label_22:
      while (true) {
        comma();
        constant();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_22;
        }
      }
      rArrayBr();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/***************************************************************
                   EXPRESSIONS
***************************************************************/
  final public BNGExpression expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  BNGExpression jjtn000 = new BNGExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
      case 56:
        additiveOperation();
        expression();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void term() throws ParseException {
    element();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_23;
      }
      multiplicativeOperation();
      element();
    }
  }

  final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      plus();
      element();
      break;
    case 56:
      minus();
      element();
      break;
    case BUILT_IN_CONST:
    case UNARY_FUNCTION:
    case BINARY_FUNCTION:
    case MULTIARG_FUNCTION:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
    case 60:
      powerExpression();
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void powerExpression() throws ParseException {
    unaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      power();
      element();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
  }

  final public void unaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BUILT_IN_CONST:
    case UNARY_FUNCTION:
    case BINARY_FUNCTION:
    case MULTIARG_FUNCTION:
      function();
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case IDENTIFIER:
      constant();
      break;
    case 60:
      brExpression();
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void function() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BUILT_IN_CONST:
      builtInConst();
      break;
    case UNARY_FUNCTION:
      unaryFunction();
      break;
    case BINARY_FUNCTION:
      binaryFunction();
      break;
    case MULTIARG_FUNCTION:
      multiargFunction();
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void builtInConst() throws ParseException {
 /*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BUILT_IN_CONST);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                      jjtn000.setName(token.image);jjtn000.setArgumentNumber(0);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void unaryFunction() throws ParseException {
 /*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(UNARY_FUNCTION);
                      jjtn000.setName(token.image);jjtn000.setArgumentNumber(1);
      lBracket();
      expression();
      rBraket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void binaryFunction() throws ParseException {
 /*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BINARY_FUNCTION);
                       jjtn000.setName(token.image); jjtn000.setArgumentNumber(2);
      lBracket();
      expression();
      comma();
      expression();
      rBraket();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void multiargFunction() throws ParseException {
 /*@bgen(jjtree) Function */
    BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));BNGFunction func = jjtn000;
    int i = 1;
    try {
      jj_consume_token(MULTIARG_FUNCTION);
                         func.setName(token.image);
      lBracket();
      expression();
      label_24:
      while (true) {
        comma();
                 ++i;
        expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[81] = jj_gen;
          break label_24;
        }
      }
      rBraket();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      func.setArgumentNumber(i);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void constant() throws ParseException {
 /*@bgen(jjtree) Constant */
  BNGConstant jjtn000 = new BNGConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
     jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void brExpression() throws ParseException {
    lBracket();
    expression();
    rBraket();
  }

/***************************************************************
                   UTILITY
***************************************************************/
  final public void additiveOperation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      plus();
      break;
    case 56:
      minus();
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void plus() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(55);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void minus() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(56);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void multiplicativeOperation() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        jj_consume_token(57);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
          jjtn000.setName(token.image);
        break;
      case 58:
        jj_consume_token(58);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void power() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(59);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void lBracket() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(60);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void rBraket() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(61);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void lBrace() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(62);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void rBrace() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(63);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void lArrayBr() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(64);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void rArrayBr() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(65);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void comma() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMMA);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
             jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void label() throws ParseException {
 /*@bgen(jjtree) Label */
  BNGLabel jjtn000 = new BNGLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LABEL);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
             jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void hashArrow() throws ParseException {
 /*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(66);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
          jjtn000.setName(token.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_65() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(SPECIES)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(PARAMETERS)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(SITE)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(OBSERVABLES)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(MULTIARG_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(SEED_SPECIES)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(MOLECULES)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(BINARY_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(UNARY_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(REACTIONS)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(BUILT_IN_CONST)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    if (jj_scan_token(MOLECULE_TYPES)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BionetgenParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x60,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x40,0x2060,0x40,0x20,0x20,0x60,0x60,0x0,0x0,0x60,0x60,0x60,0x0,0x60,0x60,0x20,0x40,0x0,0x0,0x60,0x600060,0x20,0x40,0x0,0x600000,0x60,0x8000000,0x0,0x60,0x20,0x40,0x0,0x0,0x0,0x60,0x0,0xf0180000,0x8000000,0x0,0x8000000,0x3c060,0x3c060,0x0,0x7800000,0x8000000,0x7800000,0x7800000,0x0,0x8000000,0x1000000,0x8000000,0x7800000,0x38000,0x6800000,0x8000000,0x6800000,0x6800000,0x4800000,0x8000000,0x4800000,0x4800000,0x6000000,0x7800000,0x0,0x8000000,0x8000000,0x0,0x0,0xf0000000,0x0,0xf0000000,0xf0000000,0x8000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40000,0x4000,0x0,0x2000,0x4000,0x10004000,0x4000,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x1000,0x80000,0x0,0x3000,0x3000,0x1000,0x0,0x103000,0x0,0x0,0x1000,0x100000,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x2000,0x3000,0x0,0x0,0x1000,0x600000,0x20,0x0,0x800000,0x11802005,0x0,0x20,0x0,0x2000,0x2000,0x40000000,0x2015,0x0,0x2015,0x2015,0x80000000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x40002005,0x0,0x0,0x1800000,0x6000000,0x11802005,0x8000000,0x10002005,0x0,0x0,0x2005,0x1800000,0x6000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BionetgenParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BionetgenParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BionetgenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BionetgenParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BionetgenParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BionetgenParser(BionetgenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BionetgenParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

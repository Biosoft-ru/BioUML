/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BionetgenParser.jj */
/*@egen*//***************************************************************
                   OPTIONS
***************************************************************/
options 
{
                 
                             
    STATIC = false;
                        
    DEBUG_PARSER = false;
                      
}

/***************************************************************
                   PARSER BEGIN
***************************************************************/
PARSER_BEGIN(BionetgenParser)

package biouml.plugins.bionetgen.bnglparser;

import java.io.Reader;
import java.io.StringReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import biouml.plugins.bionetgen.diagram.BionetgenConstants;
import biouml.standard.type.SpecieReference;

public class BionetgenParser/*@bgen(jjtree)*/implements BionetgenParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTBionetgenParserState jjtree = new JJTBionetgenParserState();

/*@egen*/
    protected static final String endl = "\n";//System.getProperty("line.separator");

    protected static final DecimalFormat REACTION_NAME_FORMAT = new DecimalFormat("j00");
    protected int reactionNumber = 1;

    /** Default constructor. */
    public BionetgenParser()
    {
        this(new StringReader("0"));
    }

    public BNGStart parse(String modelName, Reader reader)
    {
        BNGStart astStart = null;
        try
        {
            reInitParser();
            ReInit(reader);
            astStart = Start();
            astStart.setName(modelName);
            BNGModel model = astStart.getModel();
            if(!model.checkMoleculesTypes())
                warning("Molecule type mismatch in " + model.getErrorMessage());
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return astStart;
    }

    public BNGExpression parseFormula(String formula)
    {
        BNGExpression expression = null;
        try
        {
            reInitParser();
            Reader reader = new StringReader(formula);
            ReInit(reader);
            expression = readSingleExpression();
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return expression;
    }

    public BNGSpecies parseSpecies(String graph)
    {
        BNGSpecies species = null;
        try
        {
            reInitParser();
            Reader reader = new StringReader(graph);
            ReInit(reader);
            species = readSingleBNGSpecies();
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return species;
    }

    private void reInitParser()
    {
        messages = new ArrayList<String>();
        status = 0;
        reactionNumber = 1;
    }

    ///////////////////////////////////////////////////////////////////
    // Error processing issues
    //
    /** The expression was parsed successfully without any errors or warnings. */
    public static final int STATUS_OK           = 0;

    /** There were some warnings during expression parser. */
    public static final int STATUS_WARNING      = 1;

    /** There were some errors during expression parser. */
    public static final int STATUS_ERROR        = 2;

    /** Some fatal errors have occurred during the parser. */
    public static final int STATUS_FATAL_ERROR  = 4;

    protected int status;
    public int getStatus()
    {
        return status;
    }

    protected List<String> messages = new ArrayList<String>();
    public List<String> getMessages()
    {
        return messages;
    }

    public void warning(String warningStr)
    {
        messages.add("Warning: " + warningStr + ".");
        status |= STATUS_WARNING;
    }

    public void error(String errorStr)
    {
        messages.add("Error: " + errorStr + ".");
        status |= STATUS_ERROR;
    }

    public void fatalError(String errorStr)
    {
        messages.add("Syntax error: " + errorStr + ".");
        status |= STATUS_FATAL_ERROR;
    }
}

PARSER_END(BionetgenParser)

/***************************************************************
                       SKIP & TOKENS
***************************************************************/
SPECIAL_TOKEN : /* instead of SKIP */
{
  " " 
| "\t"
| <"#" ~[" ","\n","\r"] (~["\n","\r"])*>
| <"\\" ("\n"|"\r"|"\r\n")>
}

TOKEN :
{
  <EOL : ("\n"|"\r"|"\r\n") >
|
  < COMMENT : "# " (~["\n","\r"])* >
}

TOKEN : /* RESERVED WORDS */
{
    <PARAMETERS  : "parameters">
|   <SEED_SPECIES     : ("seed species"|"species")>
|   <REACTIONS   : "reaction rules">
|   <OBSERVABLES : "observables">
|   <MOLECULE_TYPES : "molecule types">
|   <MODEL : "model">
|   <BEGIN : "begin">
|   <GENERATE : "generate_network" >
|   <SIMULATE : "simulate" >
|   <SIMULATE_ODE : <SIMULATE>"_ode" >
|   <SIMULATE_SSA : <SIMULATE>"_ssa" >
|   <END   : "end" >
|   <MM : "MM" >
|   <SAT : "Sat" >
|   <SPECIES       : "Species" >
|   <MOLECULES     : "Molecules" >
|   <SAMPLE_TIMES  : "sample_times" >
|   <GENERATION_PARAM :("max_agg"|"max_iter"|"max_stoich"|"overwrite"|"print_iter"|"prefix"|"suffix") >
|   <ODE_PARAM : ("atol"|"rtol"|"steady_state"|"sparse") >
|   <SSA_PARAM : ("t_end"|"t_start"|"n_steps"|"n_output_steps"|"netfile") >
|   <COMMA : ",">
|   <BUILT_IN_CONST : "_pi" | "pi" | "_e" >
|   <UNARY_FUNCTION : "exp" | "abs" | "log" | "sqrt" | "ln" | "cos" | "sin" | "tan" | "cosh" | "sinh" | 
    "tanh" | "floor" | "asin" | "arcsin" | "acos" | "arccos" | "atan" | "arctan" | "asinh" | "arcsinh" | "acosh" | "arccosh" | "atanh" | "arctanh" | "log2" | "log10" | "rint" | "sign" >
|   <BINARY_FUNCTION : "root" >
|   <MULTIARG_FUNCTION : "min" | "max" | "avg" | "sum" >

}

TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL:
            <DECIMAL_LITERAL>
    >
|
    < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
    < FLOATING_POINT_LITERAL:
            (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
            | "." (["0"-"9"])+ (<EXPONENT>)?
            | (["0"-"9"])+ <EXPONENT>
    >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < STRING_LITERAL:
            "\""
            ( (~["\"","\\","\n","\r"])
            | ("\\" ["n","t","b","r","f","\\","'","\""] )
            )*
            "\""
    >
}

TOKEN : /* IDENTIFIERS */
{
  <ADDITION: (<INCLUDE>|<EXCLUDE>) > 
|  < #INCLUDE : <INC_REACTANT>|<INC_PRODUCT> >
|  < #EXCLUDE : <EXC_REACTANT>|<EXC_PRODUCT> >
|  < #INC_REACTANT : "include_reactants" >
|  < #INC_PRODUCT : "include_products" >
|  < #EXC_REACTANT : "exclude_reactants" >
|  < #EXC_PRODUCT : "exclude_products" >
|  < LABEL : <IDENTIFIER> ":" >
|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < SITE: (<STATE>|"!"((<DIGIT>|<LETTER>)+|"+"|"?"))+ >
|
  < #STATE : ["%","~","@"](<LETTER>|<DIGIT>)+ (["%","~","@"](<LETTER>|<DIGIT>)+)* >
|
  < #LETTER: ["_", "a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/***************************************************************
                   GRAMMAR START
***************************************************************/
BNGStart Start()        :
{/*@bgen(jjtree) Start */
  BNGStart jjtn000 = new BNGStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (description(jjtn000))

    ( (/*@bgen(jjtree) EOL */
        {
          BNGEOL jjtn001 = new BNGEOL(JJTEOL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/      | comment() )* )

    (model())

    (actions(jjtn000))

    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void begin()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    <BEGIN>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void end()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    <END>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

BNGExpression readSingleExpression() :
{BNGExpression expr;}
{
    expr = expression() 
    <EOF>
    {return expr;}
}

BNGSpecies readSingleBNGSpecies() :
{BNGSpecies species;}
{
    species = readBNGSpecies()
    <EOF>
    {return species;}
}

/***************************************************************
                   BIONETGEN SPECIES
***************************************************************/
BNGSpecies readBNGSpecies()         :
{/*@bgen(jjtree) Species */
    BNGSpecies jjtn000 = new BNGSpecies(JJTSPECIES);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    StringBuilder sb = new StringBuilder();
    BNGSpecies bngs = jjtn000;
}
{/*@bgen(jjtree) Species */
try {
/*@egen*/
(
    (multiStateSpecie(sb))
    ( ( (/*@bgen(jjtree) SimpleElement */
          {
            BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ ( "."/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {sb.append("."); jjtn001.setName(".");} )/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                )
    multiStateSpecie(sb) )* )
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
}
/*@egen*/
{bngs.setName(sb.toString()); return bngs;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void multiStateSpecie(StringBuilder sb) :
{}
{
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {sb.append(token.image); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    ( (
    (state(sb))?
    (lBracket() {sb.append("(");})
    ((moleculeComponent(sb))
    ((comma() {sb.append(","); } )
    (moleculeComponent(sb))
    )* )?
    (rBraket() {sb.append(")"); })
    (state(sb))?
    )? )

}

void moleculeComponent(StringBuilder sb) :
{}
{
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {sb.append(token.image); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<SITE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
               jjtn002.jjtSetLastToken(getToken(0));
             }
/*@egen*/ {sb.append(token.image); jjtn002.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )?
}

void state(StringBuilder sb)               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    (<SITE>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {sb.append(token.image); jjtn000.setName(token.image);})/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

/***************************************************************
                   COMMENT
***************************************************************/
void comment()         :
{/*@bgen(jjtree) Comment */
  BNGComment jjtn000 = new BNGComment(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Comment */
    try {
/*@egen*/
    <COMMENT> {jjtn000.setName(token.image);} (/*@bgen(jjtree) EOL */
                                               {
                                                 BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/     )/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   DESCRIPTION
***************************************************************/
void description(BNGStart start)             :
{/*@bgen(jjtree) Description */
    BNGDescription jjtn000 = new BNGDescription(JJTDESCRIPTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    StringBuffer buf = new StringBuffer();
    boolean exists = false;
}
{/*@bgen(jjtree) Description */
    try {
/*@egen*/
    (/*@bgen(jjtree) Comment */
        {
          BNGComment jjtn001 = new BNGComment(JJTCOMMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        (<COMMENT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/         
        {
            if( token.image != null && token.image.length() > 1 )
            {
                if( buf.length() > 1 )
                    buf.append(endl);
                buf.append(token.image.substring(2));
            }
            exists = true;
        }/*@bgen(jjtree) EOL */
        {
          BNGEOL jjtn002 = new BNGEOL(JJTEOL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        <EOL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/     
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.setName(buf.toString());
        if(exists)
            start.addChild(jjtn000, 0);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


/***************************************************************
                   MODEL
***************************************************************/
void model()       :
{/*@bgen(jjtree) Model */
    BNGModel jjtn000 = new BNGModel(JJTMODEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    int[] usage = new int[5];
}
{/*@bgen(jjtree) Model */
    try {
/*@egen*/
    begin()
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<MODEL>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )

    ( (
    comment()
    |
    LOOKAHEAD(2)
    {if(usage[0]!=0) error("Multiple parameters block");}
    parameters()
    {usage[0]=1;}
    |
    LOOKAHEAD(2)
    {if(usage[1]!=0) error("Multiple molecule types block");}
    moleculeTypes()
    {usage[1]=1;}
    |
    LOOKAHEAD(2)
    {if(usage[2]!=0) error("Multiple seed species block");}
    species()
    {usage[2]=1;}
    |
    LOOKAHEAD(2)
    {if(usage[3]!=0) error("Multiple observables block");}
    observables()
    {usage[3]=1;}
    |
    LOOKAHEAD(2)
    {if(usage[4]!=0) error("Multiple reactions block");}
    reactions()
    {usage[4]=1;}
    |/*@bgen(jjtree) EOL */
    {
      BNGEOL jjtn003 = new BNGEOL(JJTEOL);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtn003.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <EOL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtn003.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/     
    )* )

    end()
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<MODEL>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn004, true);
                jjtc004 = false;
                jjtn004.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {jjtn004.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    ((/*@bgen(jjtree) EOL */
      {
        BNGEOL jjtn005 = new BNGEOL(JJTEOL);
        boolean jjtc005 = true;
        jjtree.openNodeScope(jjtn005);
        jjtn005.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc005) {
          jjtree.closeNodeScope(jjtn005, true);
          jjtn005.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/     )?)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   PARAMETERS

@pending - validate parameter name
@pending - recovery after error

***************************************************************/
void parameters()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGList list = jjtn000; }
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    (begin())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<PARAMETERS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {list.setType(BNGList.PARAMETER); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    ( ( LOOKAHEAD(2) parameter() | comment() |/*@bgen(jjtree) EOL */
                                               {
                                                 BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                                                 boolean jjtc003 = true;
                                                 jjtree.openNodeScope(jjtn003);
                                                 jjtn003.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc003) {
                                                   jjtree.closeNodeScope(jjtn003, true);
                                                   jjtn003.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/      )* )
    (end())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<PARAMETERS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtc004 = false;
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn004.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void parameter()           :
{/*@bgen(jjtree) Parameter */
  BNGParameter jjtn000 = new BNGParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGParameter parameter = jjtn000;}
{/*@bgen(jjtree) Parameter */
    try {
/*@egen*/
    (label())?
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {parameter.setName(token.image); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    ( (/*@bgen(jjtree) SimpleElement */
        {
          BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtn002.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ ("="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002, true);
               jjtc002 = false;
               jjtn002.jjtSetLastToken(getToken(0));
             }
/*@egen*/ {jjtn002.setName(token.image);})/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtn002.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                )? )
    expression()
    (comment() |/*@bgen(jjtree) EOL */
                 {
                   BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   MOLECULE TYPES
 ***************************************************************/
void moleculeTypes()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGList list = jjtn000; }
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    (begin())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<MOLECULE_TYPES>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {list.setType(BNGList.MOLECULETYPE); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    (/*@bgen(jjtree) EOL */
      {
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/      | moleculeType() | comment() )*
    (end())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<MOLECULE_TYPES>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                         jjtn004.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn004.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )/*@bgen(jjtree) EOL */
    {
      BNGEOL jjtn005 = new BNGEOL(JJTEOL);
      boolean jjtc005 = true;
      jjtree.openNodeScope(jjtn005);
      jjtn005.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    <EOL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc005) {
        jjtree.closeNodeScope(jjtn005, true);
        jjtn005.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/     /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void moleculeType()               :
{/*@bgen(jjtree) MoleculeType */
  BNGMoleculeType jjtn000 = new BNGMoleculeType(JJTMOLECULETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MoleculeType */
    try {
/*@egen*/
    (label())?
    (readBNGSpecies())
    (comment() |/*@bgen(jjtree) EOL */
                 {
                   BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   SPECIES

@pending validate species name
@pending special class/type for Bionetgen species and molecules

***************************************************************/
void species()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGList list = jjtn000; String blockName; }
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    (begin())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<SEED_SPECIES>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {list.setType(BNGList.SPECIES);  jjtn001.setName(token.image); blockName=token.image;})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    (/*@bgen(jjtree) EOL */
      {
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/      | LOOKAHEAD(2) specie() | comment() )*
    (end())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<SEED_SPECIES>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn004, true);
      jjtc004 = false;
      jjtn004.jjtSetLastToken(getToken(0));
    }
/*@egen*/ 
    {jjtn004.setName(token.image);
    if(!blockName.equals(token.image))
    error("Doesn't match seed species block names in the beginning and in the end");
    })/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void specie()            :
{/*@bgen(jjtree) SeedSpecie */
 BNGSeedSpecie jjtn000 = new BNGSeedSpecie(JJTSEEDSPECIE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/BNGSeedSpecie seedSpecie = jjtn000;}
{/*@bgen(jjtree) SeedSpecie */
    try {
/*@egen*/
    (label())?
    ( (/*@bgen(jjtree) SimpleElement */
        {
          BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ ( "$"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtn001.jjtSetLastToken(getToken(0));
              }
/*@egen*/ {jjtn001.setName(token.image); seedSpecie.setConstant(true);} )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                )? )
    (readBNGSpecies())
    (expression())
    (comment() |/*@bgen(jjtree) EOL */
                 {
                   BNGEOL jjtn002 = new BNGEOL(JJTEOL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   OBSERVABLES
***************************************************************/
void observables()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGList list = jjtn000; }
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    (begin())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<OBSERVABLES>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {list.setType(BNGList.OBSERVABLES); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    (/*@bgen(jjtree) EOL */
      {
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/      | LOOKAHEAD(2)observable() | comment() )*
    (end())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<OBSERVABLES>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                      jjtn004.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn004.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void observable()            :
{/*@bgen(jjtree) Observable */
  BNGObservable jjtn000 = new BNGObservable(JJTOBSERVABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGObservable observable = jjtn000;  }
{/*@bgen(jjtree) Observable */
    try {
/*@egen*/
    (label())?
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(
    ( <SPECIES> {observable.setMatchOnce(true);} | <MOLECULES> {observable.setMatchOnce(false);} )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.jjtSetLastToken(getToken(0));
    }
/*@egen*/ 
    {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn002 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {observable.setName(token.image); jjtn002.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (contents())
    (comment() |/*@bgen(jjtree) EOL */
                 {
                   BNGEOL jjtn003 = new BNGEOL(JJTEOL);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void contents()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    {jjtn000.setType(BNGList.OBSERVABLECONTENT);}
    (
        (readBNGSpecies())
        (comma())?
    )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   REACTIONS

@pending reaction subclass
@pending stoichiometry
@pending equation

***************************************************************/
void reactions()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGList list = jjtn000; }
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    (begin())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<REACTIONS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {list.setType(BNGList.REACTIONS); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn002 = new BNGEOL(JJTEOL);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    (/*@bgen(jjtree) EOL */
      {
        BNGEOL jjtn003 = new BNGEOL(JJTEOL);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/      | LOOKAHEAD(2) reaction() | comment() )*
    (end())
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn004 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<REACTIONS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn004.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    (/*@bgen(jjtree) EOL */
     {
       BNGEOL jjtn005 = new BNGEOL(JJTEOL);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/<EOL>/*@bgen(jjtree)*/
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void reaction()          :
{/*@bgen(jjtree) Reaction */
  BNGReaction jjtn000 = new BNGReaction(JJTREACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ BNGReaction reaction = jjtn000;}
{/*@bgen(jjtree) Reaction */
    try {
/*@egen*/
    (label())?
    {reaction.setName(REACTION_NAME_FORMAT.format(reactionNumber++));}
    reactionComponents(SpecieReference.REACTANT)
    (/*@bgen(jjtree) SimpleElement */
      {
        BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtn001.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ ( ( "->" {reaction.setReversible(false);} | "<->" {reaction.setReversible(true);} )/*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                                            jjtc001 = false;
                                                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                                                          }
/*@egen*/ {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtn001.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/                )
    reactionComponents(SpecieReference.PRODUCT)
    rateLaw()
    ( ( reactionApp() )? )
    (comment() |/*@bgen(jjtree) EOL */
                 {
                   BNGEOL jjtn002 = new BNGEOL(JJTEOL);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/     )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void reactionComponents(String type)      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    {jjtn000.setName(type); jjtn000.setType(BNGList.REACTIONCOMPONENT);}
    readBNGSpecies()
    ( ( plus() readBNGSpecies() )* )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void rateLaw()         :
{/*@bgen(jjtree) RateLaw */
  BNGRateLaw jjtn000 = new BNGRateLaw(JJTRATELAW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RateLaw */
    try {
/*@egen*/
    ( mmLaw(jjtn000) | saturationLaw(jjtn000) | defaultLaw(jjtn000) )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void mmLaw(BNGRateLaw rateLaw) :
{}
{
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<MM>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001, true);
             jjtc001 = false;
             jjtn001.jjtSetLastToken(getToken(0));
           }
/*@egen*/ {rateLaw.setType(BionetgenConstants.MM); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    lBracket()
    expression()
    comma()
    expression()
    rBraket()
}

void saturationLaw(BNGRateLaw rateLaw) :
{}
{
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<SAT>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
              jjtn001.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {rateLaw.setType(BionetgenConstants.SATURATION); jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/               )
    lBracket()
    expression()
    comma()
    expression()
    rBraket()
}

void defaultLaw(BNGRateLaw rateLaw) :
{}
{
    {rateLaw.setType(BionetgenConstants.DEFAULT);}
    expression()
    ( ( comma()  expression() )? )
}

void reactionApp()      :
{/*@bgen(jjtree) List */
  BNGList jjtn000 = new BNGList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    {jjtn000.setType(BNGList.ADDITIONCOMPONENT);}
    (
    addition()
    )+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void addition()          :
{/*@bgen(jjtree) Addition */
  BNGAddition jjtn000 = new BNGAddition(JJTADDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Addition */
    try {
/*@egen*/
    <ADDITION> {jjtn000.setName(token.image);}
    lBracket()
    (/*@bgen(jjtree) SimpleElement */
     {
       BNGSimpleElement jjtn001 = new BNGSimpleElement(JJTSIMPLEELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<INTEGER_LITERAL>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
/*@egen*/  {jjtn001.setName(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                )
    ((comma() readBNGSpecies() )+ )
    rBraket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   ACTIONS
***************************************************************/
void actions(BNGStart start)       :
{/*@bgen(jjtree) List */
    BNGList jjtn000 = new BNGList(JJTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    boolean exists = false;
}
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    {jjtn000.setType(BNGList.ACTION);}
    ( (generateNetwork() | simulate() | unsupportedAction() |/*@bgen(jjtree) EOL */
                                                              {
                                                                BNGEOL jjtn001 = new BNGEOL(JJTEOL);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
                                                                jjtn001.jjtSetFirstToken(getToken(1));
                                                              }
                                                              try {
/*@egen*/ <EOL>/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                                }
                                                              }
/*@egen*/      | comment()) {exists = true;} )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        if(exists)
            start.addAsLast(jjtn000);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void unsupportedAction()         :
{/*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Action */
    try {
/*@egen*/
    <IDENTIFIER> {jjtn000.setName(token.image);}
    lBracket() ( ( lBrace() )? )
    ( ( ( unsupportedActionParam() |simulationParameter() | constant() )
    (comma()   ( unsupportedActionParam() |simulationParameter() | constant()) )* )? )
    ( ( rBrace() )? ) rBraket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void unsupportedActionParam()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    <STRING_LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void generateNetwork()         :
{/*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Action */
    try {
/*@egen*/
    <GENERATE> {jjtn000.setName(token.image);}
    lBracket() lBrace()
    ( ( generateParameter() ( comma() generateParameter() )*  )? )
    rBrace() rBraket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void generateParameter()                  :
{/*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ActionParameter */
    try {
/*@egen*/
    <GENERATION_PARAM> {jjtn000.setName(token.image);}
    hashArrow()
    value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simulate()         :
{/*@bgen(jjtree) Action */
  BNGAction jjtn000 = new BNGAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Action */
    try {
/*@egen*/
    simulateODE(jjtn000)
    |
    simulateSSA(jjtn000)
    |
    (<SIMULATE> {jjtn000.setName(token.image);}
    lBracket() lBrace()
    ( ( simulationParameter()
    ( comma()   simulationParameter() )* )? )
    rBrace() rBraket()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simulateODE(BNGAction action) :
{}
{
    <SIMULATE_ODE> {action.setName(token.image);}
    lBracket() lBrace()
    ( ( (simulateODEParameter()|sampleTimes())
    ( comma()  (simulateODEParameter()|sampleTimes()) )* )?)
    rBrace() rBraket()
}

void simulateSSA(BNGAction action) :
{}
{
    <SIMULATE_SSA> {action.setName(token.image);}
    lBracket() lBrace()
    ( ( (simulateSSAParameter()|sampleTimes())
    ( comma() (simulateSSAParameter()|sampleTimes()) )* )? )
    rBrace() rBraket()
}

void simulateODEParameter()                 :
{/*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ActionParameter */
    try {
/*@egen*/
    ((<ODE_PARAM>|<SSA_PARAM>) {jjtn000.setName(token.image);})
    hashArrow()
    value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simulateSSAParameter()                  :
{/*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ActionParameter */
    try {
/*@egen*/
    <SSA_PARAM> {jjtn000.setName(token.image);}
    hashArrow()
    value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simulationParameter() :
{}
{
    simulateODEParameter()
    |
    generateParameter()
    |
    sampleTimes()
    |
    hashParameter()
}

void value() :
{}
{
    (hash() | constant())
}

void hash()      :
{/*@bgen(jjtree) Hash */
  BNGHash jjtn000 = new BNGHash(JJTHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Hash */
    try {
/*@egen*/
    lBrace()
    hashParameter()
    (((comma()) hashParameter())*)
    rBrace()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void hashParameter()                  :
{/*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ActionParameter */
    try {
/*@egen*/
    <IDENTIFIER> {jjtn000.setName(token.image);}
    hashArrow()
    constant()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void sampleTimes()                 :
{/*@bgen(jjtree) ActionParameter */
  BNGActionParameter jjtn000 = new BNGActionParameter(JJTACTIONPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ActionParameter */
    try {
/*@egen*/
    <SAMPLE_TIMES> {jjtn000.setName(token.image);}
    lArrayBr()
    constant()
    ((
    comma()
    constant()
    )+)
    rArrayBr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

/***************************************************************
                   EXPRESSIONS
***************************************************************/
BNGExpression expression()            :
{/*@bgen(jjtree) Expression */
  BNGExpression jjtn000 = new BNGExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    term()
    ( additiveOperation() expression() )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void term() :
{}
{
    element()
    ( multiplicativeOperation()  element() )*
}

void element() :
{}
{
    ( plus() element()
    |
    minus() element()
    |
    powerExpression()
    )
}

void powerExpression() :
{}
{
    unaryExpression()
    ( power() element() )?
}

void unaryExpression() :
{}
{
    ( function() | constant() | brExpression() )
}

void function() :
{}
{
    ( builtInConst() | unaryFunction() | binaryFunction() | multiargFunction() )
}

void builtInConst()          :
{/*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <BUILT_IN_CONST>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.setName(token.image);jjtn000.setArgumentNumber(0);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void unaryFunction()          :
{/*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <UNARY_FUNCTION> {jjtn000.setName(token.image);jjtn000.setArgumentNumber(1);}
    lBracket()
    expression()
    rBraket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void binaryFunction()          :
{/*@bgen(jjtree) Function */
  BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <BINARY_FUNCTION> {jjtn000.setName(token.image); jjtn000.setArgumentNumber(2);}
    lBracket()
    expression()
    comma()
    expression()
    rBraket()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void multiargFunction()          :
{/*@bgen(jjtree) Function */
    BNGFunction jjtn000 = new BNGFunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    BNGFunction func = jjtn000;
    int i = 1;
}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    <MULTIARG_FUNCTION> {func.setName(token.image);}
    lBracket()
    expression()
    ( ( comma() {++i;} expression() )+ )
    rBraket()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { func.setArgumentNumber(i); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void constant()          :
{/*@bgen(jjtree) Constant */
  BNGConstant jjtn000 = new BNGConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Constant */
    try {
/*@egen*/
    (<INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | <IDENTIFIER>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void brExpression() :
{}
{
    lBracket()
    expression()
    rBraket()
}

/***************************************************************
                   UTILITY
***************************************************************/
void additiveOperation() :
{}
{
    ( plus() | minus() )
}

void plus()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "+"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void minus()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "-"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void multiplicativeOperation()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    ("*"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
         }
/*@egen*/ {jjtn000.setName(token.image);}
    |
    "/"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);})/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void power()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "^"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void lBracket()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "("/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void rBraket()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void lBrace()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "{"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void rBrace()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void lArrayBr()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "["/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void rArrayBr()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "]"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void comma()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    <COMMA>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void label()       :
{/*@bgen(jjtree) Label */
  BNGLabel jjtn000 = new BNGLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Label */
    try {
/*@egen*/
    <LABEL>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void hashArrow()               :
{/*@bgen(jjtree) SimpleElement */
  BNGSimpleElement jjtn000 = new BNGSimpleElement(JJTSIMPLEELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleElement */
    try {
/*@egen*/
    "=>"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
         }
/*@egen*/ {jjtn000.setName(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
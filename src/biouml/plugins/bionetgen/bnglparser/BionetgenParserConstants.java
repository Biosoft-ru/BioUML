/* Generated By:JJTree&JavaCC: Do not edit this line. BionetgenParserConstants.java */
package biouml.plugins.bionetgen.bnglparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BionetgenParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 5;
  /** RegularExpression Id. */
  int COMMENT = 6;
  /** RegularExpression Id. */
  int PARAMETERS = 7;
  /** RegularExpression Id. */
  int SEED_SPECIES = 8;
  /** RegularExpression Id. */
  int REACTIONS = 9;
  /** RegularExpression Id. */
  int OBSERVABLES = 10;
  /** RegularExpression Id. */
  int MOLECULE_TYPES = 11;
  /** RegularExpression Id. */
  int MODEL = 12;
  /** RegularExpression Id. */
  int BEGIN = 13;
  /** RegularExpression Id. */
  int GENERATE = 14;
  /** RegularExpression Id. */
  int SIMULATE = 15;
  /** RegularExpression Id. */
  int SIMULATE_ODE = 16;
  /** RegularExpression Id. */
  int SIMULATE_SSA = 17;
  /** RegularExpression Id. */
  int END = 18;
  /** RegularExpression Id. */
  int MM = 19;
  /** RegularExpression Id. */
  int SAT = 20;
  /** RegularExpression Id. */
  int SPECIES = 21;
  /** RegularExpression Id. */
  int MOLECULES = 22;
  /** RegularExpression Id. */
  int SAMPLE_TIMES = 23;
  /** RegularExpression Id. */
  int GENERATION_PARAM = 24;
  /** RegularExpression Id. */
  int ODE_PARAM = 25;
  /** RegularExpression Id. */
  int SSA_PARAM = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int BUILT_IN_CONST = 28;
  /** RegularExpression Id. */
  int UNARY_FUNCTION = 29;
  /** RegularExpression Id. */
  int BINARY_FUNCTION = 30;
  /** RegularExpression Id. */
  int MULTIARG_FUNCTION = 31;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 32;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 33;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 34;
  /** RegularExpression Id. */
  int EXPONENT = 35;
  /** RegularExpression Id. */
  int STRING_LITERAL = 36;
  /** RegularExpression Id. */
  int ADDITION = 37;
  /** RegularExpression Id. */
  int INCLUDE = 38;
  /** RegularExpression Id. */
  int EXCLUDE = 39;
  /** RegularExpression Id. */
  int INC_REACTANT = 40;
  /** RegularExpression Id. */
  int INC_PRODUCT = 41;
  /** RegularExpression Id. */
  int EXC_REACTANT = 42;
  /** RegularExpression Id. */
  int EXC_PRODUCT = 43;
  /** RegularExpression Id. */
  int LABEL = 44;
  /** RegularExpression Id. */
  int IDENTIFIER = 45;
  /** RegularExpression Id. */
  int SITE = 46;
  /** RegularExpression Id. */
  int STATE = 47;
  /** RegularExpression Id. */
  int LETTER = 48;
  /** RegularExpression Id. */
  int DIGIT = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<token of kind 3>",
    "<token of kind 4>",
    "<EOL>",
    "<COMMENT>",
    "\"parameters\"",
    "<SEED_SPECIES>",
    "\"reaction rules\"",
    "\"observables\"",
    "\"molecule types\"",
    "\"model\"",
    "\"begin\"",
    "\"generate_network\"",
    "\"simulate\"",
    "<SIMULATE_ODE>",
    "<SIMULATE_SSA>",
    "\"end\"",
    "\"MM\"",
    "\"Sat\"",
    "\"Species\"",
    "\"Molecules\"",
    "\"sample_times\"",
    "<GENERATION_PARAM>",
    "<ODE_PARAM>",
    "<SSA_PARAM>",
    "\",\"",
    "<BUILT_IN_CONST>",
    "<UNARY_FUNCTION>",
    "\"root\"",
    "<MULTIARG_FUNCTION>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ADDITION>",
    "<INCLUDE>",
    "<EXCLUDE>",
    "\"include_reactants\"",
    "\"include_products\"",
    "\"exclude_reactants\"",
    "\"exclude_products\"",
    "<LABEL>",
    "<IDENTIFIER>",
    "<SITE>",
    "<STATE>",
    "<LETTER>",
    "<DIGIT>",
    "\".\"",
    "\"=\"",
    "\"$\"",
    "\"->\"",
    "\"<->\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=>\"",
  };

}

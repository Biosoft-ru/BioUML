/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=BNG,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.bionetgen.bnglparser;

public class SimpleNode implements Node
{
    protected Node parent;
    protected Node[] children;
    protected int id;
    protected Object value;
    protected BionetgenParser parser;
    protected Token firstToken;
    protected Token lastToken;
    protected String name = "";
    protected boolean isHighlight = false;

    @Override
    public boolean isHighlight()
    {
        if( parent != null && parent.isHighlight() )
            return false;
        return isHighlight;
    }
    public void setHighlight(boolean isHighlight)
    {
        this.isHighlight = isHighlight;
    }

    /**
     * Finds child-BNGComment (if any) and changes its name. If <code>newComment</code>
     * equals <code>null</code> or <code>isEmpty</code>, removes this child from ASTTree.
     * @param newComment
     */
    public void changeComment(String newComment)
    {
        BNGComment comment = null;
        int indexEOL = jjtGetNumChildren();
        boolean isEmpty = newComment != null && !newComment.isEmpty();
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            Node currentChild = jjtGetChild(i);
            if( currentChild instanceof BNGComment )
            {
                comment = (BNGComment)currentChild;
                if( isEmpty )
                    comment.setName(newComment);
            }
            else if( currentChild instanceof BNGEOL )
                indexEOL = i;
        }
        if( comment != null && !isEmpty )
        {
            if( indexEOL == jjtGetNumChildren() )
            {
                BNGEOL eol = new BNGEOL(BionetgenParser.JJTEOL);
                indexEOL = comment.remove();
                eol.transferSpecialTokens(comment);
                addChild(eol, indexEOL);
            }
            else
                comment.remove();
        }
        if( comment == null && isEmpty )
        {
            BNGEOL eol = (BNGEOL)jjtGetChild(indexEOL);
            comment = new BNGComment(BionetgenParser.JJTCOMMENT);
            comment.setName(newComment);
            comment.transferSpecialTokens(eol);
            addChild(comment, indexEOL);
        }
    }

    @Override
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        if( name != null )
            this.name = name;
    }

    @Override
    public String getFullName()
    {
        StringBuilder sb = new StringBuilder(name);
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            if( children[i] instanceof BNGSpecies )
                sb.append(children[i].getName());
            else
                sb.append(children[i].getFullName());
        }
        return sb.toString();
    }

    @Override
    public String toBNGString()
    {
        return getName();
    }

    @Override
    public void addAsLast(Node child)
    {
        jjtAddChild(child, jjtGetNumChildren());
        child.jjtSetParent(this);
    }

    @Override
    public void addChild(Node newChild, int i)
    {
        if( i < 0 )
            return;
        if( children == null || i >= children.length )
        {
            jjtAddChild(newChild, i);
            newChild.jjtSetParent(this);
            return;
        }
        int length = children.length;
        Node[] newChildren = new Node[length + 1];
        System.arraycopy(children, 0, newChildren, 0, i);
        System.arraycopy(children, i, newChildren, i + 1, length - i);
        newChildren[i] = newChild;
        children = newChildren;
        newChild.jjtSetParent(this);
    }

    @Override
    public int remove()
    {
        int index = parent.indexOf(this);
        parent.removeChild(index);
        return index;
    }

    @Override
    public int indexOf(Node node)
    {
        for( int i = 0; i < jjtGetNumChildren(); i++ )
        {
            if( children[i] != null && children[i].equals(node) )
                return i;
        }
        return -1;
    }

    @Override
    public void removeChild(int i)
    {
        if( children == null )
            return;
        int length = children.length;
        if( i < 0 || i >= length )
            return;
        Node[] newChildren = new Node[length - 1];
        System.arraycopy(children, 0, newChildren, 0, i);
        System.arraycopy(children, i + 1, newChildren, i, length - i - 1);
        children = newChildren;
    }

    protected String appendSpecialTokens(Token token)
    {
        StringBuilder result = new StringBuilder();
        if( token != null )
        {
            result.append(appendSpecialTokens(token.specialToken));
            result.append(token);
        }
        return result.toString();
    }

    /**
     * Transfers special tokens from source SimpleNode.
     * @param source SimpleNode which special tokens to be transfered from.
     */
    public void transferSpecialTokens(SimpleNode source)
    {
        String specialTokens = source.retrieveSpecialTokens();
        Token token;
        if( specialTokens.isEmpty() && source.toBNGString().isEmpty() )
        {
            if( source.jjtGetNumChildren() == 0 )
            {
                if( source.jjtGetFirstToken() != null )
                    token = source.jjtGetFirstToken();
                else if( source.jjtGetLastToken() != null )
                    token = source.jjtGetLastToken();
                else
                    return;
                token.image = source.getName();
                specialTokens = appendSpecialTokens(token.specialToken);
                token.specialToken = null;
            }
            else
            {
                SimpleNode firstChild = (SimpleNode)source.jjtGetChild(0);
                specialTokens = firstChild.retrieveSpecialTokens();
            }
        }

        if( firstToken == null )
            jjtSetFirstToken(new Token());
        token = firstToken;
        if( token.image == null )
            token.image = name;
        token.specialToken = new Token();
        token.specialToken.image = specialTokens;
    }

    protected String retrieveSpecialTokens()
    {
        String specialTokens = "";
        if( firstToken != null && firstToken.specialToken != null )
        {
            specialTokens = appendSpecialTokens(firstToken.specialToken);
            firstToken.specialToken = null;
        }
        return specialTokens;
    }

    public SimpleNode(int i)
    {
        id = i;
    }

    public SimpleNode(BionetgenParser p, int i)
    {
        this(i);
        parser = p;
    }

    @Override
    public void jjtOpen()
    {
    }

    @Override
    public void jjtClose()
    {
    }

    @Override
    public void jjtSetParent(Node n)
    {
        parent = n;
    }
    @Override
    public Node jjtGetParent()
    {
        return parent;
    }

    @Override
    public void jjtAddChild(Node n, int i)
    {
        if( children == null )
        {
            children = new Node[i + 1];
        }
        else if( i >= children.length )
        {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    @Override
    public Node jjtGetChild(int i)
    {
        return children[i];
    }

    @Override
    public int jjtGetNumChildren()
    {
        return ( children == null ) ? 0 : children.length;
    }

    public void jjtSetValue(Object value)
    {
        this.value = value;
    }
    public Object jjtGetValue()
    {
        return value;
    }

    public Token jjtGetFirstToken()
    {
        return firstToken;
    }
    public void jjtSetFirstToken(Token token)
    {
        this.firstToken = token;
    }
    public Token jjtGetLastToken()
    {
        return lastToken;
    }
    public void jjtSetLastToken(Token token)
    {
        this.lastToken = token;
    }

    /* You can override these two methods in subclasses of SimpleNode to
       customize the way the node appears when the tree is dumped.  If
       your output uses more than one line you should override
       toString(String), otherwise overriding toString() is probably all
       you need to do. */

    @Override
    public String toString()
    {
        return BionetgenParserTreeConstants.jjtNodeName[id];
    }
    public String toString(String prefix)
    {
        return prefix + toString();
    }

    /* Override this method if you want to customize how the node dumps
       out its children. */

    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        if( children != null )
        {
            for( Node element : children )
            {
                SimpleNode n = (SimpleNode)element;
                if( n != null )
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }
}

/* JavaCC - OriginalChecksum=f9268836465c94a04db0ee34936d58bd (do not edit this line) */

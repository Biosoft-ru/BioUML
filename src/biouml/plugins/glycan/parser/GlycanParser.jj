/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GlycanParser.jj */
/*@egen*//***************************************************************
                   OPTIONS
***************************************************************/
options 
{
                 
                             
    STATIC = false;
                           
    DEBUG_PARSER = false;
                      
}

/***************************************************************
                   PARSER BEGIN
***************************************************************/
PARSER_BEGIN(GlycanParser)

package biouml.plugins.glycan.parser;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class GlycanParser/*@bgen(jjtree)*/implements GlycanParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTGlycanParserState jjtree = new JJTGlycanParserState();

/*@egen*/

    /** Default constructor. */
    public GlycanParser()
    {
        this(new StringReader("0"));
    }

    public GlycanTree parse(Reader reader)
    {
        GlycanTree astTree = null;
        try
        {
            reInitParser();
            ReInit(reader);
            astTree = Start();
        }
        catch(ParseException e)
        {
            fatalError(e.getMessage());
        }
        catch(Throwable t)
        {
            error(t.getMessage());
        }
        return astTree;
    }
    
    private void reInitParser()
    {
        messages = new ArrayList<String>();
        status = 0;
    }
    
    private void addBranch(int lastChildIndex, Node parent, Node newParent)
    {
        Node lastChild = parent.jjtGetChild(lastChildIndex);
        newParent.addAsLast(lastChild);
        for( int i = lastChildIndex - 1; i >= 0; i-- )
        {
            Node currentChild = parent.jjtGetChild(i);
            if( currentChild instanceof GlycanBranch )
                addBranch(currentChild.jjtGetNumChildren() - 1, currentChild, lastChild);
            else if( currentChild instanceof GlycanMolecule )
            {
                addBranch(i, parent, lastChild);
                break;
            }
        }
    }

    ///////////////////////////////////////////////////////////////////
    // Error processing issues
    //
    /** The expression was parsed successfully without any errors or warnings. */
    public static final int STATUS_OK           = 0;

    /** There were some warnings during expression parser. */
    public static final int STATUS_WARNING      = 1;

    /** There were some errors during expression parser. */
    public static final int STATUS_ERROR        = 2;

    /** Some fatal errors have occurred during the parser. */
    public static final int STATUS_FATAL_ERROR  = 4;

    protected int status;
    public int getStatus()
    {
        return status;
    }

    protected List<String> messages = new ArrayList<String>();
    public List<String> getMessages()
    {
        return messages;
    }

    public void warning(String warningStr)
    {
        messages.add("Warning: " + warningStr + ".");
        status |= STATUS_WARNING;
    }

    public void error(String errorStr)
    {
        messages.add("Error: " + errorStr + ".");
        status |= STATUS_ERROR;
    }

    public void fatalError(String errorStr)
    {
        messages.add("Syntax error: " + errorStr + ".");
        status |= STATUS_FATAL_ERROR;
    }
}

PARSER_END(GlycanParser)

/***************************************************************
                       SKIP & TOKENS
***************************************************************/
SPECIAL_TOKEN : /* instead of SKIP */
{
  " " 
| "\t"
| <"#" ~[" ","\n","\r"] (~["\n","\r"])*>
| <"\\" ("\n"|"\r"|"\r\n")>
}

TOKEN : /* RESERVED WORDS */
{
<CONNECTION: ("a"|"b") (["0"-"9"]) >
|
<L_BRAKET: "(">
|
<R_BRAKET: ")">
|
<MOLECULE: "M" | "GN" | "G" | "AN" | "A" | "F" | "NN">
}

/***************************************************************
                   GRAMMAR START
***************************************************************/
GlycanTree Start()       :
{/*@bgen(jjtree) Tree */
  GlycanTree jjtn000 = new GlycanTree(JJTTREE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Tree */
    try {
/*@egen*/
    MainBranch()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    GlycanTree restructuredTree = new GlycanTree(GlycanParser.JJTTREE);
    addBranch(jjtn000.jjtGetNumChildren() - 1, jjtn000, restructuredTree);
    return restructuredTree;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MainBranch() :
{}
{
    ( LOOKAHEAD(2) EndingMolecule() | Branch() | MoleculeSequence() )*
}

void Branch()        :
{/*@bgen(jjtree) Branch */
    GlycanBranch jjtn000 = new GlycanBranch(JJTBRANCH);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ 
    boolean invalid = false;
}
{/*@bgen(jjtree) Branch */
    try {
/*@egen*/
    ( <L_BRAKET> )
    ( ( Branch() {invalid = true;} | MoleculeSequence() {invalid = false;} )+ )
    ( <R_BRAKET> )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    if(invalid)
        fatalError("Branch should be connected to molecule. Error in: '" + jjtn000.toString() + "'");
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EndingMolecule() :
{}
{
    Molecule() <EOF>
}

void MoleculeSequence() :
{ 
GlycanMolecule molecule;
String bind = "";
}
{
    molecule = Molecule()
    bind = Bind()
    { molecule.setBind(bind);}
}

String Bind() :
{}
{
    <CONNECTION>
    {return token.image;}
}

GlycanMolecule Molecule()          :
{/*@bgen(jjtree) Molecule */
  GlycanMolecule jjtn000 = new GlycanMolecule(JJTMOLECULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Molecule */
    try {
/*@egen*/
    <MOLECULE>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
               }
/*@egen*/ { jjtn000.setName(token.image); return jjtn000; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
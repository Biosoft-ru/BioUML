package biouml.plugins.modelreduction._test;

import org.apache.commons.lang.ArrayUtils;

import ru.biosoft.access._test.AbstractBioUMLTest;

import biouml.model.Diagram;
import biouml.plugins.modelreduction.SensitivityAnalysis;
import biouml.plugins.modelreduction.VariableSet;
import biouml.plugins.modelreduction.SensitivityAnalysis.SensitivityAnalysisResults;
import biouml.plugins.simulation.java.JavaSimulationEngine;
import junit.framework.Test;
import junit.framework.TestSuite;

public class TestSensitivityAnalysis extends AbstractBioUMLTest
{
    public TestSensitivityAnalysis(String name)
    {
        super(name);
    }

    public static Test suite()
    {
        TestSuite suite = new TestSuite(TestSensitivityAnalysis.class);
        return suite;
    }

    /**
     * Results generated by COPASI 4.6.32 for the diagram {@link TestUtils#createTestDiagram_2()}
     */
    private String[] speciesOrder_d2 = new String[] {"$A", "$B", "$C", "$D"};
    private String[] parametersOrder_d2 = new String[] {"k0", "k1", "k2", "k3", "k4", "k5", "k_2", "k_3"};

    private double[][] unscaledParamSensitivities_d2 = new double[][] { {10, -9.99001, 0, 0, 0, 0, 0, 0},
            {20, 0, -19.99, -19.99, -9.99251, -9.99251, 9.9975, 9.9975}, {10, 0, 9.995, -9.995, -14.9888, -4.99625, -4.99875, 4.99875},
            {10, 0, -9.995, 9.995, -4.99625, -14.9888, 4.99875, -4.99875}};

    private double[][] paramSensitivities_d2 = new double[][] { {1, -0.999001, 0, 0, 0, 0, 0, 0},
            {1, 0, -0.49975, -0.49975, -0.249813, -0.249813, 0.249938, 0.249938},
            {1, 0, 0.49975, -0.49975, -0.749438, -0.249813, -0.249938, 0.249938},
            {1, 0, -0.49975, 0.49975, -0.249813, -0.749438, 0.249938, -0.249938}};

    public void testParamSensitivityAnalysis() throws Exception
    {
        Diagram diagram = TestUtils.createTestDiagram_2();

        SensitivityAnalysis analysis = new SensitivityAnalysis(null, "");
        
        JavaSimulationEngine engine = new JavaSimulationEngine();
        engine.setOutputDir("../out");
        
        analysis.getParameters().setRelativeTolerance(1E-9);
        analysis.getParameters().setDiagram(diagram);
        analysis.getParameters().setEngine(engine);
        analysis.getParameters().getEngineWrapper().getEngine().setCompletionTime(1E9);
        VariableSet inputSet = new VariableSet();
        VariableSet targetSet = new VariableSet();
        analysis.getParameters().setInputVariables(new VariableSet[]{inputSet});
        analysis.getParameters().setTargetVariables(new VariableSet[]{targetSet});
        
        inputSet.setVariableNames(new String[]{VariableSet.CONSTANT_PARAMETERS});
        targetSet.setVariableNames(speciesOrder_d2);
        
        SensitivityAnalysisResults pResults = analysis.performAnalysis();
        boolean isParamResultsOk = isResultsOk(pResults, speciesOrder_d2, parametersOrder_d2, paramSensitivities_d2,
                unscaledParamSensitivities_d2);
        assertEquals(true, isParamResultsOk);
    }

    /**
     * Results generated for the diagram {@link TestUtils#createTestDiagram_3()}
     */
    private String[] speciesOrder_d3 = new String[] {"$A", "$B", "$C"};

    private double[][] unscaledSpeciesSensitivities_d3 = new double[][] { {0, 0, 0}, { -1, 1, 0}, {1, 0, 1}};

    private double[][] speciesSensitivities_d3 = new double[][] { {Double.NaN, Double.NaN, Double.NaN}, { -0.6250, 1.6249, 0},
            {0.7142, 0, 0.2857}}; //TODO: check NaNs

    public void testSpeciesSensitivityAnalysis() throws Exception
    {
        Diagram diagram = TestUtils.createTestDiagram_3();

        SensitivityAnalysis analysis = new SensitivityAnalysis(null, "");
        
        JavaSimulationEngine engine = new JavaSimulationEngine();
        engine.setOutputDir("../out");
        
        analysis.getParameters().setRelativeTolerance(1E-15);
        analysis.getParameters().setDiagram(diagram);
        analysis.getParameters().setEngine(engine);
        analysis.getParameters().getEngineWrapper().getEngine().setCompletionTime(1E9);
        
        VariableSet inputSet = new VariableSet();
        VariableSet targetSet = new VariableSet();
        analysis.getParameters().setInputVariables(new VariableSet[]{inputSet});
        analysis.getParameters().setTargetVariables(new VariableSet[]{targetSet});
        
        inputSet.setVariableNames(new String[]{VariableSet.RATE_VARIABLES});
        targetSet.setVariableNames(speciesOrder_d3);
        
        SensitivityAnalysisResults sResults = analysis.performAnalysis();

        boolean isSpeciesResultsOk = isResultsOk(sResults, speciesOrder_d3, speciesOrder_d3, speciesSensitivities_d3,
                unscaledSpeciesSensitivities_d3);

        assertEquals(true, isSpeciesResultsOk);
    }

    private boolean isResultsOk(SensitivityAnalysisResults results, String[] speciesOrder, String[] variablesOrder,
            double[][] sensitivities, double[][] unnscaledSensitivities)
    {
        double[][] calcSensitivities = results.sensitivities;
        double[][] calcUnscaledSensitivities = results.unscaledSensitivities;

        for( int i = 0; i < results.targets.length; ++i )
        {
            String species = results.targets[i];
            int sInd = ArrayUtils.indexOf(speciesOrder, species);

            //in input array there should be "$" before species name, in output results this symbol is missing
            //TODO: probably make it more consistent
            if (sInd == -1)
                sInd = ArrayUtils.indexOf(speciesOrder, "$"+species);
            
            for( int j = 0; j < results.parameters.length; ++j )
            {
                String parameter = results.parameters[j];
                int pInd = ArrayUtils.indexOf(variablesOrder, parameter);
                                
                if( !equals(calcSensitivities[i][j], sensitivities[sInd][pInd]) )
                    return false;

                if( !equals(calcUnscaledSensitivities[i][j], unnscaledSensitivities[sInd][pInd]) )
                    return false;
            }
        }

        return true;
    }

    private boolean equals(double first, double second)
    {
        if( Double.isNaN(first) && Double.isNaN(second) )
            return true;

        if( first == 0.0 && Math.abs(second) < 1E-4 )
            return true;

        if( second == 0.0 && Math.abs(first) < 1E-4 )
            return true;

        if( Math.abs( ( first - second ) / Math.max(first, second)) > 1E-3 )
            return false;
        return true;
    }
}

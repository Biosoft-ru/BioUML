package biouml.plugins.optimization;

import ru.biosoft.access.core.DataCollection;
import ru.biosoft.access.core.DataElement;

import java.util.List;

import com.developmentontheedge.beans.Option;
import com.developmentontheedge.beans.annot.PropertyDescription;
import com.developmentontheedge.beans.annot.PropertyName;

import biouml.model.Diagram;
import biouml.standard.diagram.CompositeDiagramType;
import one.util.streamex.StreamEx;

public class OptimizationConstraint extends Option implements DataElement
{
    public static final String ALL_EXPERIMENTS = "All experiments";

    private String name;
    private String description = "";
    private String formula = "";
    private String subdiagramPath = "";
    private double initialTime;
    private double completionTime;
    private String[] experiments = new String[] {ALL_EXPERIMENTS};
    
    public OptimizationConstraint()
    {
        name = getAutoGeneratedName();
    }

    @PropertyName("Constraint")
    @PropertyDescription("Constraint")
    public String getFormula()
    {
        return formula;
    }
    public void setFormula(String formula)
    {
        String oldValue = this.formula;
        this.formula = formula;
        firePropertyChange("formula", oldValue, formula);
    }

    private Diagram diagram;
    public void setDiagram(Diagram diagram)
    {
        this.diagram = diagram;
    }
    public Diagram getDiagram()
    {
        return this.diagram;
    }

    @PropertyName("Path")
    @PropertyDescription("Path")
    public String getSubdiagramPath()
    {
        return this.subdiagramPath;
    }
    public void setSubdiagramPath(String subdiagramPath)
    {
        String oldValue = this.subdiagramPath;
        this.subdiagramPath = subdiagramPath;
        firePropertyChange( "subdiagramPath", oldValue, subdiagramPath );
    }

    public boolean isSubdiagramPathHidden()
    {
        return diagram == null || ! ( diagram.getType() instanceof CompositeDiagramType );
    }

    @PropertyName("Description")
    @PropertyDescription("Constraint description")
    public String getDescription()
    {
        return description;
    }
    public void setDescription(String description)
    {
        String oldValue = this.description;
        this.description = description;
        firePropertyChange("description", oldValue, description);
    }

    @PropertyName("Start time")
    @PropertyDescription("Start time")
    public double getInitialTime()
    {
        return this.initialTime;
    }
    public void setInitialTime(double initialTime)
    {
        double oldValue = this.initialTime;
        this.initialTime = initialTime;
        firePropertyChange("initialTime", oldValue, initialTime);
    }

    @PropertyName("End time")
    @PropertyDescription("End time")
    public double getCompletionTime()
    {
        return this.completionTime;
    }
    public void setCompletionTime(double completionTime)
    {
        double oldValue = this.completionTime;
        this.completionTime = completionTime;
        firePropertyChange("completionTime", oldValue, completionTime);
    }

    @PropertyName("Experiments")
    @PropertyDescription("Experiments for which the constraint will be considered.")
    public String[] getExperiments()
    {
        return experiments;
    }
    public void setExperiments(String ... experiments)
    {
        String[] oldValue = this.experiments;
        this.experiments = experiments;
        firePropertyChange("experiments", oldValue, experiments);
    }

    private String[] availableExperiments = new String[] {ALL_EXPERIMENTS};
    public String[] getAvailableExperiments()
    {
        return this.availableExperiments;
    }
    public void setAvailableExperiments(List<OptimizationExperiment> experiments)
    {
        this.availableExperiments = StreamEx.of( ALL_EXPERIMENTS )
                .append( StreamEx.of( experiments ).map( OptimizationExperiment::getName ) ).toArray( String[]::new );
        
    }

    @Override
    public OptimizationConstraint clone()
    {
        OptimizationConstraint clone = new OptimizationConstraint();
        clone.setFormula(this.getFormula());
        clone.setDiagram(this.getDiagram());
        clone.setSubdiagramPath(this.getSubdiagramPath());
        clone.setDescription(this.getDescription());
        clone.setInitialTime(this.getInitialTime());
        clone.setCompletionTime(this.getCompletionTime());
        clone.setExperiments(this.getExperiments().clone());
        return clone;
    }

    @Override
    public String getName()
    {
        return name;
    }

    private static int index;
    private String getAutoGeneratedName()
    {
        return "constraint_" + index++;
    }

    @Override
    public DataCollection getOrigin()
    {
        return null;
    }
}

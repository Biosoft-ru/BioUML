package biouml.plugins.simulation;

import java.awt.Point;
import java.util.List;
import java.util.Map.Entry;

import com.developmentontheedge.beans.DynamicProperty;
import com.developmentontheedge.beans.DynamicPropertySet;

import biouml.model.Diagram;
import biouml.model.DiagramElement;
import biouml.model.Role;
import biouml.model.dynamics.EModel;
import biouml.model.dynamics.Equation;
import biouml.model.dynamics.ExpressionOwner;
import biouml.model.dynamics.Variable;
import biouml.model.dynamics.VariableRole;
import biouml.model.dynamics.util.EModelHelper;
import biouml.standard.diagram.Util;
import one.util.streamex.StreamEx;
import ru.biosoft.math.model.AstFunNode;
import ru.biosoft.math.model.AstStart;
import ru.biosoft.math.model.AstVarNode;
import ru.biosoft.math.model.LinearFormatter;
import ru.biosoft.math.model.Node;
import ru.biosoft.math.model.Utils;

/**
 * Processes function rateOf(S) where S is name of variable in the model
 * It replaces each rateOf(S) by new variable RATE_OF_S which is added to the model
 * @author Ilya
 *
 */
public class RateOfPreprocessor extends Preprocessor
{
    private static final String RATE_OF_PREFIX = "RATE_OF_";

    @Override
    public boolean accept(Diagram diagram)
    {
        return diagram.getRole() instanceof EModel;
    }

    @Override
    public Diagram preprocess(Diagram diagram) throws Exception
    {
        EModel emodel = diagram.getRole(EModel.class);
        for( Entry<String, List<Equation>> entry : EModelHelper.findDefiningEquations(emodel).entrySet() )
        {
            List<Equation> rateEqs = StreamEx.of(entry.getValue())
                    .filter(eq -> Equation.TYPE_RATE.equals(eq.getType()) || Equation.TYPE_RATE_BY_RULE.equals(eq.getType())).toList();

            if( rateEqs.isEmpty() )
                continue;
            String varName = generateRateName(entry.getKey());
            emodel.declareVariable(varName, 0.0);
            DynamicPropertySet rateOfAttrs = emodel.getVariable(varName).getAttributes();
            rateOfAttrs.add(new DynamicProperty("isRate", boolean.class, true));
            rateOfAttrs.add( new DynamicProperty( AUTOGENERATED_VAR, boolean.class, true ) );

            StringBuilder newFormula = new StringBuilder();
            Variable var = emodel.getVariable(entry.getKey());

            boolean reaction = false;

            for( Equation eq : rateEqs )
            {
                reaction = Util.isSpecieReference(eq.getDiagramElement());
                String formula = eq.getFormula();
                if( !formula.startsWith("-") )
                    newFormula.append("+");
                newFormula.append(formula);
            }

            String formula = newFormula.toString();

            if( var instanceof VariableRole )
            {
                String factor = emodel.getConversionFactor(var);
                if( reaction )
                {
                    if( factor != null )
                        formula = "(" + formula + ")*" + factor;

                    if( ( (VariableRole)var ).getQuantityType() == VariableRole.CONCENTRATION_TYPE )
                    {
                        Role role = ( (VariableRole)var ).getDiagramElement().getCompartment().getRole();
                        if( role instanceof VariableRole )
                            formula = "(" + formula + ")/" + ( (VariableRole)role ).getName();
                    }
                }
            }

            Equation eq = new Equation(null, Equation.TYPE_SCALAR, varName, formula);
            DiagramElement de = diagram.getType().getSemanticController().createInstance( diagram, Equation.class, new Point(), eq )
                    .getElement();
            diagram.put(de);
        }

        for( ExpressionOwner owner : diagram.recursiveStream().map(de -> de.getRole()).select(ExpressionOwner.class) )
        {
            String[] expressions = owner.getExpressions();
            for( int i = 0; i < expressions.length; i++ )
            {
                if( expressions[i] != null && expressions[i].contains("rateOf") )
                {
                    AstStart start = emodel.readMath(expressions[i], owner.getRole());
                    replaceRateOf(start);
                    expressions[i] = new LinearFormatter().format(start)[1];
                }
            }
            owner.setExpressions(expressions);
        }
        return diagram;
    }

    private String generateRateName(String varName)
    {
        return RATE_OF_PREFIX + varName.replace(".", "_").replace("$", "");
    }


    private void replaceRateOf(Node start)
    {
        if( start instanceof AstFunNode && "rateOf".equals( ( (AstFunNode)start ).getFunction().getName()) )
        {
            Node argNode = start.jjtGetChild(0);
            if( argNode instanceof AstVarNode )
            {
                String varName = ( (AstVarNode)argNode ).getName();
                start.jjtGetParent().jjtReplaceChild(start, Utils.createVariabl(generateRateName(varName)));
                return;
            }
        }

        for( int i = 0; i < start.jjtGetNumChildren(); i++ )
            replaceRateOf(start.jjtGetChild(i));
    }
}
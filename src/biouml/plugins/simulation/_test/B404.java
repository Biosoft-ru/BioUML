package biouml.plugins.simulation._test;



/*
 * This code is generated by BioUML FrameWork
 * for B404 diagram  at 2019.12.19 11:29:26
 */
import biouml.plugins.simulation.ae.AeSolver;
import biouml.plugins.simulation.java.JavaBaseModel;
import ru.biosoft.math.MathRoutines;
import java.util.Map;

public class B404 extends JavaBaseModel
{

    public double C;
    public double C1;
    public double C2;
    public double C3;
    public double C4;
    public double M0;
    public double M10;
    public double M20;
    public double M30;
    public double M40;
    public double RATE_OF_M;
    public double RATE_OF_M1;
    public double RATE_OF_M2;
    public double RATE_OF_M3;
    public double RATE_OF_M4;
    public double RATE_OF_Y;
    public double Y0;
    public double Yc;
    public double alpha;
    public double assignment;
    public double cell;
    public double ka;
    public double kappa;
    public double r1;
    public double r2;
    public double r3;
    public double r4;
    public double unknown;

     public double[] getY()
     {
         return x_values;
     }



    private void calculateParameters() throws Exception
    {
        double[] x_values = this.x_values;
        C = x_values[0]/cell;
        Yc = x_values[5]/cell;
        C1 = x_values[1]/cell;
        C2 = x_values[2]/cell;
        r2 = ka*(C1*Yc - 2.0*alpha*kappa/3.0*C2);
        C3 = x_values[3]/cell;
        r3 = ka*(C2*Yc - 3.0*alpha*alpha*kappa/2.0*C3);
        RATE_OF_M2 = r2 - r3;
        C4 = x_values[4]/cell;
        r4 = ka*(C3*Yc - 4.0*alpha*alpha*alpha*kappa*C4);
        r1 = ka*(C*Yc - kappa/4.0*C1);
    }


    private void calculateInitialParameters()
    {
        double[] x_values = this.x_values;
        x_values[1] = M10*cell;
        x_values[2] = M20*cell;
        x_values[3] = M30*cell;
        x_values[4] = M40*cell;
        x_values[0] = M0*cell;
        C = x_values[0]/cell;
        C1 = x_values[1]/cell;
        C2 = x_values[2]/cell;
        C3 = x_values[3]/cell;
        C4 = x_values[4]/cell;
        x_values[5] = Y0*cell;
        Yc = x_values[5]/cell;
        r2 = ka*(C1*Yc - 2.0*alpha*kappa/3.0*C2);
        r3 = ka*(C2*Yc - 3.0*alpha*alpha*kappa/2.0*C3);
        RATE_OF_M2 = r2 - r3;
        r4 = ka*(C3*Yc - 4.0*alpha*alpha*alpha*kappa*C4);
        RATE_OF_M3 = r3 - r4;
        RATE_OF_M4 = r4;
        r1 = ka*(C*Yc - kappa/4.0*C1);
        RATE_OF_M1 = r1 - r2;
        RATE_OF_M = -r1;
        RATE_OF_Y = -r1 - r2 - r3 - r4;
    }

 

    public final double[] dy_dt_slow(double time, double[] x_values) throws Exception
    {
        this.time = time;
        this.x_values = x_values;
        final double[] dydt = new double[6];
        calculateParameters();
        dydt[0] = -r1;  //  rate rule for of M
        dydt[1] = +r1 - r2;  //  rate rule for of M1
        dydt[2] = +r2 - r3;  //  rate rule for of M2
        dydt[3] = +r3 - r4;  //  rate rule for of M3
        dydt[4] = +r4;  //  rate rule for of M4
        dydt[5] = -r1 - r2 - r3 - r4;  //  rate rule for of Y
        return dydt;
    }





    @Override
    public final void init() throws Exception
    {
        CONSTRAINTS__VIOLATED = 0;
        C = 0.0; // initial value of C
        C1 = 0.0; // initial value of C1
        C2 = 0.0; // initial value of C2
        C3 = 0.0; // initial value of C3
        C4 = 0.0; // initial value of C4
        M0 = 6.24E-9; // initial value of M0
        M10 = 7.77E-10; // initial value of M10
        M20 = 2.99E-10; // initial value of M20
        M30 = 3.78E-10; // initial value of M30
        M40 = 2.31E-9; // initial value of M40
        RATE_OF_M = 0.0; // initial value of RATE_OF_M
        RATE_OF_M1 = 0.0; // initial value of RATE_OF_M1
        RATE_OF_M2 = 0.0; // initial value of RATE_OF_M2
        RATE_OF_M3 = 0.0; // initial value of RATE_OF_M3
        RATE_OF_M4 = 0.0; // initial value of RATE_OF_M4
        RATE_OF_Y = 0.0; // initial value of RATE_OF_Y
        Y0 = 7.0E-9; // initial value of Y0
        Yc = 0.0; // initial value of Yc
        alpha = 0.14; // initial value of alpha
        assignment = 0.0; // initial value of assignment
        cell = 1.41E-15; // initial value of cell
        ka = 0.1; // initial value of ka
        kappa = 2.25E-7; // initial value of kappa
        r1 = 0.0; // initial value of r1
        r2 = 0.0; // initial value of r2
        r3 = 0.0; // initial value of r3
        r4 = 0.0; // initial value of r4
        time = 0.0; // initial value of time
        unknown = 0.0; // initial value of unknown
        calculateInitialValues();
        this.isInit = true;
    }


    @Override
    public final void init(double[] initialValues, Map<String, Double> parameters) throws Exception
    {
        super.init(initialValues, parameters);
        x_values[0] = M0*cell;
        x_values[1] = M10*cell;
        x_values[2] = M20*cell;
        x_values[3] = M30*cell;
        x_values[4] = M40*cell;
        x_values[5] = Y0*cell;
        this.initialValues = x_values.clone();
    }


    private final void calculateInitialValues() throws Exception
    {
        double[] x_values = this.x_values = new double[6];
        this.time = 0.0;
        calculateInitialParameters();
        this.initialValues = x_values;
    }




    public final double[] extendResult(double time, double[] x_values) throws Exception
    {
        this.time = time;
        this.x_values = x_values;
        calculateParameters();
        return getCurrentState(); 
    }


    public final double[] getCurrentState()
    {
        return new double[] {
            C,
            C1,
            C2,
            C3,
            C4,
            x_values[0],
            M0,
            x_values[1],
            M10,
            x_values[2],
            M20,
            x_values[3],
            M30,
            x_values[4],
            M40,
            x_values[5],
            Y0,
            Yc,
            alpha,
            cell,
            ka,
            kappa,
            r1,
            r2,
            r3,
            r4,
            time,
            unknown,
        };
    }


    @Override
    public final void setCurrentValues(double[] values) throws Exception
    {
        CONSTRAINTS__VIOLATED = 0;
        C = values[0];        
        C1 = values[1];        
        C2 = values[2];        
        C3 = values[3];        
        C4 = values[4];        
        x_values[0] = values[5];        
        M0 = values[6];        
        x_values[1] = values[7];        
        M10 = values[8];        
        x_values[2] = values[9];        
        M20 = values[10];        
        x_values[3] = values[11];        
        M30 = values[12];        
        x_values[4] = values[13];        
        M40 = values[14];        
        x_values[5] = values[15];        
        Y0 = values[16];        
        Yc = values[17];        
        alpha = values[18];        
        cell = values[19];        
        ka = values[20];        
        kappa = values[21];        
        r1 = values[22];        
        r2 = values[23];        
        r3 = values[24];        
        r4 = values[25];        
        time = values[26];        
        unknown = values[27];        
        if ( time == 0 )
        {
           initialValues[0] = values[5];        
           initialValues[1] = values[7];        
           initialValues[2] = values[9];        
           initialValues[3] = values[11];        
           initialValues[4] = values[13];        
           initialValues[5] = values[15];        
           calculateInitialParameters();  
        }
        else
           calculateParameters();
    }
}

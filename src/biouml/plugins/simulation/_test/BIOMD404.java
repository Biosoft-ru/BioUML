package biouml.plugins.simulation._test;


/*
 * This code is generated by BioUML FrameWork
 * for BIOMD0000000404 diagram  at 2019.12.18 15:08:35
 */
import biouml.plugins.simulation.ae.AeSolver;
import biouml.plugins.simulation.java.JavaBaseModel;
import ru.biosoft.math.MathRoutines;
import java.util.Map;

public class BIOMD404 extends JavaBaseModel
{

    public double rate_motor_r1;
    public double rate_motor_r2;
    public double rate_motor_r3;
    public double rate_motor_r4;
    public double rate_phosphorylation_r1;
    public double rate_phosphorylation_r10;
    public double rate_phosphorylation_r2;
    public double rate_phosphorylation_r3;
    public double rate_phosphorylation_r4;
    public double rate_phosphorylation_r5;
    public double rate_phosphorylation_r6;
    public double rate_phosphorylation_r7;
    public double rate_phosphorylation_r8;
    public double rate_phosphorylation_r9;
    public double rate_reaction_1;
    public double rate_reaction_2;
    public double rate_reaction_3;
    public double rate_regulatory_r1;
    public double rate_regulatory_r10;
    public double rate_regulatory_r11;
    public double rate_regulatory_r12;
    public double rate_regulatory_r13;
    public double rate_regulatory_r14;
    public double rate_regulatory_r15;
    public double rate_regulatory_r16;
    public double rate_regulatory_r17;
    public double rate_regulatory_r18;
    public double rate_regulatory_r2;
    public double rate_regulatory_r3;
    public double rate_regulatory_r4;
    public double rate_regulatory_r5;
    public double rate_regulatory_r6;
    public double rate_regulatory_r7;
    public double rate_regulatory_r8;
    public double rate_regulatory_r9;
    public double cell;
    public double Bias;
    public double RATE_OF_cell_M;
    public double RATE_OF_cell_MYp;
    public double RATE_OF_cell_MYpYp;
    public double RATE_OF_cell_MYpYpYp;
    public double RATE_OF_cell_MYpYpYpYp;
    public double RATE_OF_cell_Yp;
    public double alpha;
    public double assignment;
    public double ka;
    public double kappa;
    public double unknown;
    public double x;

     public double[] getY()
     {
         return x_values;
     }



    private void calculateParameters() throws Exception
    {
        double[] x_values = this.x_values;
        RATE_OF_cell_MYpYp = (rate_motor_r2 - rate_motor_r3)/cell;
        RATE_OF_cell_MYp = (rate_motor_r1 - rate_motor_r2)/cell;
        RATE_OF_cell_MYpYpYpYp = rate_motor_r4/cell;
        RATE_OF_cell_Yp = (-rate_motor_r1 - rate_motor_r2 - rate_motor_r3 - rate_motor_r4)/cell;
        x = ka*(x_values[0]/cell*(x_values[5]/cell) - kappa/4.0*(x_values[1]/cell))/cell;
        RATE_OF_cell_MYpYpYp = (rate_motor_r3 - rate_motor_r4)/cell;
        RATE_OF_cell_M = -rate_motor_r1/cell;
    }


    private void calculateReactionRates()
    {
        double[] x_values = this.x_values;
        rate_motor_r4 = cell*function_4_motor_r4(x_values[3]/cell, x_values[4]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        rate_motor_r3 = cell*function_4_motor_r3(x_values[2]/cell, x_values[3]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        rate_motor_r2 = cell*function_4_motor_r2(x_values[1]/cell, x_values[2]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        rate_motor_r1 = cell*function_4_motor_r1(x_values[0]/cell, x_values[1]/cell, x_values[5]/cell, cell, ka, kappa);
    }


    private void calculateInitialParameters()
    {
        double[] x_values = this.x_values;
        x_values[1] = 7.77E-10*cell;
        x_values[2] = 2.99E-10*cell;
        x_values[5] = 7.0E-9*cell;
        rate_motor_r2 = cell*function_4_motor_r2(x_values[1]/cell, x_values[2]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        x_values[3] = 3.78E-10*cell;
        rate_motor_r3 = cell*function_4_motor_r3(x_values[2]/cell, x_values[3]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        RATE_OF_cell_MYpYp = (rate_motor_r2 - rate_motor_r3)/cell;
        x_values[0] = 6.24E-9*cell;
        rate_motor_r1 = cell*function_4_motor_r1(x_values[0]/cell, x_values[1]/cell, x_values[5]/cell, cell, ka, kappa);
        RATE_OF_cell_MYp = (rate_motor_r1 - rate_motor_r2)/cell;
        RATE_OF_cell_M = -rate_motor_r1/cell;
        x = ka*(x_values[0]/cell*(x_values[5]/cell) - kappa/4.0*(x_values[1]/cell))/cell;
        x_values[4] = 2.31E-9*cell;
        rate_motor_r4 = cell*function_4_motor_r4(x_values[3]/cell, x_values[4]/cell, x_values[5]/cell, alpha, cell, ka, kappa);
        RATE_OF_cell_Yp = (-rate_motor_r1 - rate_motor_r2 - rate_motor_r3 - rate_motor_r4)/cell;
        RATE_OF_cell_MYpYpYpYp = rate_motor_r4/cell;
        RATE_OF_cell_MYpYpYp = (rate_motor_r3 - rate_motor_r4)/cell;
    }
    protected double function_4_motor_r1(double M, double MYp, double Yp, double cell, double ka, double kappa)
    {
         return ka*(M*Yp - kappa/4.0*MYp)/cell;
    }

    protected double function_4_motor_r2(double MYp, double MYpYp, double Yp, double alpha, double cell, double ka, double kappa)
    {
         return ka*(MYp*Yp - 2.0*alpha*kappa/3.0*MYpYp)/cell;
    }

    protected double function_4_motor_r3(double MYpYp, double MYpYpYp, double Yp, double alpha, double cell, double ka, double kappa)
    {
         return ka*(MYpYp*Yp - 3.0*alpha*alpha*kappa/2.0*MYpYpYp)/cell;
    }

    protected double function_4_motor_r4(double MYpYpYp, double MYpYpYpYp, double Yp, double alpha, double cell, double ka, double kappa)
    {
         return ka*(MYpYpYp*Yp - 4.0*alpha*alpha*alpha*kappa*MYpYpYpYp)/cell;
    }


 

    public final double[] dy_dt_slow(double time, double[] x_values) throws Exception
    {
        this.time = time;
        this.x_values = x_values;
        final double[] dydt = new double[6];
        calculateParameters();
        calculateReactionRates();
        dydt[0] = -rate_motor_r1;  //  rate rule for of $cell.M
        dydt[1] = +rate_motor_r1-rate_motor_r2;  //  rate rule for of $cell.MYp
        dydt[2] = +rate_motor_r2-rate_motor_r3;  //  rate rule for of $cell.MYpYp
        dydt[3] = +rate_motor_r3-rate_motor_r4;  //  rate rule for of $cell.MYpYpYp
        dydt[4] = +rate_motor_r4;  //  rate rule for of $cell.MYpYpYpYp
        dydt[5] = -rate_motor_r1-rate_motor_r2-rate_motor_r3-rate_motor_r4;  //  rate rule for of $cell.Yp
        return dydt;
    }





    @Override
    public final void init() throws Exception
    {
        CONSTRAINTS__VIOLATED = 0;
        rate_motor_r1 = 0.0; // initial value of $$rate_motor_r1
        rate_motor_r2 = 0.0; // initial value of $$rate_motor_r2
        rate_motor_r3 = 0.0; // initial value of $$rate_motor_r3
        rate_motor_r4 = 0.0; // initial value of $$rate_motor_r4
        rate_phosphorylation_r1 = 0.0; // initial value of $$rate_phosphorylation_r1
        rate_phosphorylation_r10 = 0.0; // initial value of $$rate_phosphorylation_r10
        rate_phosphorylation_r2 = 0.0; // initial value of $$rate_phosphorylation_r2
        rate_phosphorylation_r3 = 0.0; // initial value of $$rate_phosphorylation_r3
        rate_phosphorylation_r4 = 0.0; // initial value of $$rate_phosphorylation_r4
        rate_phosphorylation_r5 = 0.0; // initial value of $$rate_phosphorylation_r5
        rate_phosphorylation_r6 = 0.0; // initial value of $$rate_phosphorylation_r6
        rate_phosphorylation_r7 = 0.0; // initial value of $$rate_phosphorylation_r7
        rate_phosphorylation_r8 = 0.0; // initial value of $$rate_phosphorylation_r8
        rate_phosphorylation_r9 = 0.0; // initial value of $$rate_phosphorylation_r9
        rate_reaction_1 = 0.0; // initial value of $$rate_reaction_1
        rate_reaction_2 = 0.0; // initial value of $$rate_reaction_2
        rate_reaction_3 = 0.0; // initial value of $$rate_reaction_3
        rate_regulatory_r1 = 0.0; // initial value of $$rate_regulatory_r1
        rate_regulatory_r10 = 0.0; // initial value of $$rate_regulatory_r10
        rate_regulatory_r11 = 0.0; // initial value of $$rate_regulatory_r11
        rate_regulatory_r12 = 0.0; // initial value of $$rate_regulatory_r12
        rate_regulatory_r13 = 0.0; // initial value of $$rate_regulatory_r13
        rate_regulatory_r14 = 0.0; // initial value of $$rate_regulatory_r14
        rate_regulatory_r15 = 0.0; // initial value of $$rate_regulatory_r15
        rate_regulatory_r16 = 0.0; // initial value of $$rate_regulatory_r16
        rate_regulatory_r17 = 0.0; // initial value of $$rate_regulatory_r17
        rate_regulatory_r18 = 0.0; // initial value of $$rate_regulatory_r18
        rate_regulatory_r2 = 0.0; // initial value of $$rate_regulatory_r2
        rate_regulatory_r3 = 0.0; // initial value of $$rate_regulatory_r3
        rate_regulatory_r4 = 0.0; // initial value of $$rate_regulatory_r4
        rate_regulatory_r5 = 0.0; // initial value of $$rate_regulatory_r5
        rate_regulatory_r6 = 0.0; // initial value of $$rate_regulatory_r6
        rate_regulatory_r7 = 0.0; // initial value of $$rate_regulatory_r7
        rate_regulatory_r8 = 0.0; // initial value of $$rate_regulatory_r8
        rate_regulatory_r9 = 0.0; // initial value of $$rate_regulatory_r9
        cell = 1.41E-15; // initial value of $cell
        Bias = 0.701419432227109; // initial value of Bias
        RATE_OF_cell_M = 0.0; // initial value of RATE_OF_cell_M
        RATE_OF_cell_MYp = 0.0; // initial value of RATE_OF_cell_MYp
        RATE_OF_cell_MYpYp = 0.0; // initial value of RATE_OF_cell_MYpYp
        RATE_OF_cell_MYpYpYp = 0.0; // initial value of RATE_OF_cell_MYpYpYp
        RATE_OF_cell_MYpYpYpYp = 0.0; // initial value of RATE_OF_cell_MYpYpYpYp
        RATE_OF_cell_Yp = 0.0; // initial value of RATE_OF_cell_Yp
        alpha = 0.14; // initial value of alpha
        assignment = 0.0; // initial value of assignment
        ka = 0.1; // initial value of ka
        kappa = 2.25E-7; // initial value of kappa
        time = 0.0; // initial value of time
        unknown = 0.0; // initial value of unknown
        x = 0.0; // initial value of x
        calculateInitialValues();
        this.isInit = true;
    }


    @Override
    public final void init(double[] initialValues, Map<String, Double> parameters) throws Exception
    {
        super.init(initialValues, parameters);
        this.initialValues = x_values.clone();
    }


    private final void calculateInitialValues() throws Exception
    {
        double[] x_values = this.x_values = new double[6];
        this.time = 0.0;
        x_values[0] = 6.24E-9; //  initial value of $cell.M
        x_values[1] = 7.77E-10; //  initial value of $cell.MYp
        x_values[2] = 2.99E-10; //  initial value of $cell.MYpYp
        x_values[3] = 3.78E-10; //  initial value of $cell.MYpYpYp
        x_values[4] = 2.31E-9; //  initial value of $cell.MYpYpYpYp
        x_values[5] = 7.0E-9; //  initial value of $cell.Yp
        calculateInitialParameters();
        this.initialValues = x_values;
    }




    public final double[] extendResult(double time, double[] x_values) throws Exception
    {
        this.time = time;
        this.x_values = x_values;
        calculateParameters();
        return getCurrentState(); 
    }


    public final double[] getCurrentState()
    {
        return new double[] {
            rate_motor_r1,
            rate_motor_r2,
            rate_motor_r3,
            rate_motor_r4,
            rate_phosphorylation_r1,
            rate_phosphorylation_r10,
            rate_phosphorylation_r2,
            rate_phosphorylation_r3,
            rate_phosphorylation_r4,
            rate_phosphorylation_r5,
            rate_phosphorylation_r6,
            rate_phosphorylation_r7,
            rate_phosphorylation_r8,
            rate_phosphorylation_r9,
            rate_reaction_1,
            rate_reaction_2,
            rate_reaction_3,
            rate_regulatory_r1,
            rate_regulatory_r10,
            rate_regulatory_r11,
            rate_regulatory_r12,
            rate_regulatory_r13,
            rate_regulatory_r14,
            rate_regulatory_r15,
            rate_regulatory_r16,
            rate_regulatory_r17,
            rate_regulatory_r18,
            rate_regulatory_r2,
            rate_regulatory_r3,
            rate_regulatory_r4,
            rate_regulatory_r5,
            rate_regulatory_r6,
            rate_regulatory_r7,
            rate_regulatory_r8,
            rate_regulatory_r9,
            cell,
            x_values[0]/cell,
            x_values[1]/cell,
            x_values[2]/cell,
            x_values[3]/cell,
            x_values[4]/cell,
            x_values[5]/cell,
            Bias,
            alpha,
            ka,
            kappa,
            time,
            unknown,
            x,
        };
    }


    @Override
    public final void setCurrentValues(double[] values) throws Exception
    {
        CONSTRAINTS__VIOLATED = 0;
        rate_motor_r1 = values[0];        
        rate_motor_r2 = values[1];        
        rate_motor_r3 = values[2];        
        rate_motor_r4 = values[3];        
        rate_phosphorylation_r1 = values[4];        
        rate_phosphorylation_r10 = values[5];        
        rate_phosphorylation_r2 = values[6];        
        rate_phosphorylation_r3 = values[7];        
        rate_phosphorylation_r4 = values[8];        
        rate_phosphorylation_r5 = values[9];        
        rate_phosphorylation_r6 = values[10];        
        rate_phosphorylation_r7 = values[11];        
        rate_phosphorylation_r8 = values[12];        
        rate_phosphorylation_r9 = values[13];        
        rate_reaction_1 = values[14];        
        rate_reaction_2 = values[15];        
        rate_reaction_3 = values[16];        
        rate_regulatory_r1 = values[17];        
        rate_regulatory_r10 = values[18];        
        rate_regulatory_r11 = values[19];        
        rate_regulatory_r12 = values[20];        
        rate_regulatory_r13 = values[21];        
        rate_regulatory_r14 = values[22];        
        rate_regulatory_r15 = values[23];        
        rate_regulatory_r16 = values[24];        
        rate_regulatory_r17 = values[25];        
        rate_regulatory_r18 = values[26];        
        rate_regulatory_r2 = values[27];        
        rate_regulatory_r3 = values[28];        
        rate_regulatory_r4 = values[29];        
        rate_regulatory_r5 = values[30];        
        rate_regulatory_r6 = values[31];        
        rate_regulatory_r7 = values[32];        
        rate_regulatory_r8 = values[33];        
        rate_regulatory_r9 = values[34];        
        cell = values[35];        
        x_values[0] = values[36];        
        x_values[1] = values[37];        
        x_values[2] = values[38];        
        x_values[3] = values[39];        
        x_values[4] = values[40];        
        x_values[5] = values[41];        
        Bias = values[42];        
        alpha = values[43];        
        ka = values[44];        
        kappa = values[45];        
        time = values[46];        
        unknown = values[47];        
        x = values[48];        
        if ( time == 0 )
        {
           initialValues[0] = values[36];        
           initialValues[1] = values[37];        
           initialValues[2] = values[38];        
           initialValues[3] = values[39];        
           initialValues[4] = values[40];        
           initialValues[5] = values[41];        
           calculateInitialParameters();  
        }
        else
           calculateParameters();
    }
}

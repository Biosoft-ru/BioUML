// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: WDLLexer.flex

/* $Id: RLexer.lex,v 1.1 2013/08/29 08:55:41 lan Exp $ */
/* RLexer.java is a generated file.  You probably want to
 * edit RLexer.lex to make changes.  Use JFlex to generate it.
 * To generate RLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main RLexer.lex</code><br>
 * You will then have a file called RLexer.java
 */

package biouml.plugins.wdl.colorer;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.Ostermiller.Syntax.Lexer.Lexer;
import com.Ostermiller.Syntax.Lexer.Token;


@SuppressWarnings("fallthrough")
public class WDLColorer implements Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  3,  4,  5,  0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 
    17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22, 23, 24, 
     0, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 27, 28,  6, 29, 
     0, 30, 25, 31, 32, 33, 34, 25, 35, 36, 25, 37, 38, 39, 40, 41, 
    42, 43, 44, 45, 46, 47, 48, 49, 25, 25, 25, 50,  6, 51, 52,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\3\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\16\25\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\0\1\37\1\0\1\40\1\41\1\40\1\42"+
    "\1\43\1\44\6\25\1\45\13\25\1\46\1\0\1\47"+
    "\22\25\1\50\1\25\1\51\4\25\1\52\6\25\1\53"+
    "\1\54\3\25\1\55\1\56\1\25\1\57\11\25\1\60"+
    "\1\61\4\25\1\62\2\25\1\63\2\25\1\64\1\65"+
    "\1\66\3\25\1\67\7\25\1\70\1\25\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u01dd"+
    "\0\u013e\0\u0212\0\u0247\0\u013e\0\u013e\0\u027c\0\u02b1\0\u02e6"+
    "\0\u013e\0\u031b\0\u013e\0\u013e\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u013e\0\u013e\0\u013e\0\u013e\0\u013e\0\u0636"+
    "\0\u013e\0\u066b\0\u013e\0\u06a0\0\u06d5\0\u0212\0\u070a\0\u013e"+
    "\0\u013e\0\u013e\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u013e\0\u0af9\0\u013e\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0350\0\u0ee8\0\u031b\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0350\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u0350"+
    "\0\u031b\0\u112f\0\u1164\0\u1199\0\u0350\0\u031b\0\u11ce\0\u031b"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\u13ab\0\u031b\0\u031b\0\u13e0\0\u1415\0\u144a\0\u147f\0\u031b"+
    "\0\u14b4\0\u14e9\0\u0350\0\u151e\0\u1553\0\u031b\0\u0350\0\u0350"+
    "\0\u1588\0\u15bd\0\u15f2\0\u031b\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u031b\0\u179a\0\u0350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\2\1\34\1\2\1\35\1\36\1\32"+
    "\1\37\1\40\1\41\1\42\2\32\1\43\1\32\1\44"+
    "\1\45\1\32\1\46\1\47\1\50\1\32\1\51\1\52"+
    "\1\53\1\54\1\55\1\2\4\0\1\2\11\0\1\2"+
    "\1\0\2\2\6\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\21\2\1\0\1\2\4\0\2\3\110\0\1\56"+
    "\36\0\2\5\1\0\1\5\1\57\26\5\1\60\31\5"+
    "\2\6\1\0\62\6\74\0\1\61\55\0\2\62\1\0"+
    "\5\62\1\63\22\62\1\64\31\62\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\2\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\21\32\1\35\1\32\3\0\1\2"+
    "\4\0\1\2\11\0\1\65\1\0\1\66\1\67\6\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\21\2\1\0"+
    "\1\2\3\0\1\2\4\0\1\2\11\0\1\65\1\0"+
    "\2\23\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\21\2\1\0\1\2\31\0\1\70\64\0\1\71\64\0"+
    "\1\72\36\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\21\32\1\35\1\32\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\25\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\73\12\32\1\74\6\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\7\32\1\75"+
    "\11\32\1\35\1\32\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\76\21\32\1\35\1\32\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\5\32\1\77\13\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\10\32\1\100\1\101\7\32\1\35\1\32\3\0\1\2"+
    "\4\0\1\2\11\0\1\32\1\0\2\32\6\0\1\32"+
    "\1\0\1\2\1\0\1\32\1\35\2\32\1\102\16\32"+
    "\1\35\1\32\3\0\1\2\4\0\1\2\11\0\1\32"+
    "\1\0\2\32\6\0\1\32\1\0\1\2\1\0\1\32"+
    "\1\35\20\32\1\103\1\35\1\32\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\104\21\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\2\32\1\105"+
    "\15\32\1\106\1\35\1\32\3\0\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\32\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\1\107\16\32\1\110\1\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\111"+
    "\15\32\1\112\3\32\1\35\1\32\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\4\35\1\113\20\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\12\32\1\114"+
    "\6\32\1\35\1\32\3\0\2\60\1\0\1\60\1\115"+
    "\60\60\2\116\1\0\5\116\1\117\22\116\1\64\33\116"+
    "\1\0\62\116\1\2\4\0\1\2\11\0\1\2\1\0"+
    "\2\65\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\21\2\1\0\1\2\3\0\1\2\4\0\1\2\11\0"+
    "\1\65\1\0\2\67\6\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\21\2\1\0\1\2\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\11\35\1\120\13\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\10\32\1\121"+
    "\10\32\1\35\1\32\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\16\32\1\122\2\32\1\35\1\32\22\0"+
    "\1\35\1\0\2\35\6\0\1\35\3\0\11\35\1\123"+
    "\13\35\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\11\32\1\124\7\32\1\35\1\32\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\13\32\1\125\5\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\13\32\1\126\5\32\1\35\1\32\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\17\32\1\127\1\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\17\32\1\130\1\32\1\35\1\32\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\17\35\1\131\5\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\14\32\1\132"+
    "\4\32\1\35\1\32\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\11\32\1\133\7\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\134\21\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\15\32\1\135\3\32\1\35\1\32\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\20\35\1\136\4\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\20\32\1\137"+
    "\1\35\1\32\22\0\1\35\1\0\2\35\6\0\1\35"+
    "\3\0\17\35\1\140\5\35\3\0\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\32\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\15\32\1\141\3\32\1\35\1\32"+
    "\3\0\2\116\1\0\5\116\1\63\22\116\1\64\31\116"+
    "\17\0\1\35\1\0\2\35\6\0\1\35\3\0\11\35"+
    "\1\142\13\35\3\0\1\2\4\0\1\2\11\0\1\32"+
    "\1\0\2\32\6\0\1\32\1\0\1\2\1\0\1\32"+
    "\1\35\10\32\1\143\10\32\1\35\1\32\3\0\1\2"+
    "\4\0\1\2\11\0\1\32\1\0\2\32\6\0\1\32"+
    "\1\0\1\2\1\0\1\32\1\35\2\32\1\144\16\32"+
    "\1\35\1\32\22\0\1\35\1\0\2\35\6\0\1\35"+
    "\3\0\20\35\1\145\4\35\3\0\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\32\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\17\32\1\146\1\32\1\35\1\32"+
    "\3\0\1\2\4\0\1\2\11\0\1\32\1\0\2\32"+
    "\6\0\1\32\1\0\1\2\1\0\1\32\1\35\12\32"+
    "\1\147\6\32\1\35\1\32\3\0\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\32\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\20\32\1\150\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\151\21\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\13\32\1\152\5\32\1\35\1\32\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\1\35\1\153\23\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\20\32\1\154"+
    "\1\35\1\32\3\0\1\2\4\0\1\2\11\0\1\32"+
    "\1\0\2\32\6\0\1\32\1\0\1\2\1\0\1\32"+
    "\1\35\17\32\1\155\1\32\1\35\1\32\22\0\1\35"+
    "\1\0\2\35\6\0\1\35\3\0\21\35\1\156\3\35"+
    "\3\0\1\2\4\0\1\2\11\0\1\32\1\0\2\32"+
    "\6\0\1\32\1\0\1\2\1\0\1\32\1\35\20\32"+
    "\1\157\1\35\1\32\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\10\35\1\160\14\35\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\2\32\1\161\16\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\20\35\1\162\4\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\6\32\1\163\12\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\164\21\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\4\35\1\165\20\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\16\32\1\166\2\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\15\32\1\167"+
    "\3\32\1\35\1\32\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\17\32\1\170\1\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\20\32\1\171"+
    "\1\35\1\32\22\0\1\35\1\0\2\35\6\0\1\35"+
    "\3\0\12\35\1\172\12\35\3\0\1\2\4\0\1\2"+
    "\11\0\1\32\1\0\2\32\6\0\1\32\1\0\1\2"+
    "\1\0\1\32\1\35\5\32\1\173\13\32\1\35\1\32"+
    "\3\0\1\2\4\0\1\2\11\0\1\32\1\0\2\32"+
    "\6\0\1\32\1\0\1\2\1\0\1\32\1\35\5\32"+
    "\1\174\13\32\1\35\1\32\22\0\1\35\1\0\2\35"+
    "\6\0\1\35\3\0\21\35\1\175\3\35\3\0\1\2"+
    "\4\0\1\2\11\0\1\32\1\0\2\32\6\0\1\32"+
    "\1\0\1\2\1\0\1\32\1\35\1\176\20\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\7\35\1\177\15\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\3\32\1\200\15\32\1\35\1\32\22\0"+
    "\1\35\1\0\2\35\6\0\1\35\3\0\13\35\1\201"+
    "\11\35\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\17\32\1\202\1\32\1\35\1\32\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\17\32\1\203\1\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\4\35\1\204\20\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\15\32\1\205\3\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\10\32\1\206"+
    "\10\32\1\35\1\32\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\4\35\1\207\20\35\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\17\32\1\210\1\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\14\35\1\211\10\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\7\32\1\212\11\32\1\35\1\32\22\0"+
    "\1\35\1\0\2\35\6\0\1\35\3\0\3\35\1\213"+
    "\21\35\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\21\35\1\214\3\35\3\0\1\2\4\0\1\2\11\0"+
    "\1\32\1\0\2\32\6\0\1\32\1\0\1\2\1\0"+
    "\1\32\1\35\2\32\1\215\16\32\1\35\1\32\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\2\32\1\216"+
    "\16\32\1\35\1\32\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\17\35\1\217\5\35\22\0\1\35\1\0"+
    "\2\35\6\0\1\35\3\0\13\35\1\220\11\35\3\0"+
    "\1\2\4\0\1\2\11\0\1\32\1\0\2\32\6\0"+
    "\1\32\1\0\1\2\1\0\1\32\1\35\12\32\1\221"+
    "\6\32\1\35\1\32\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\4\35\1\222\20\35\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\10\32\1\223\10\32\1\35"+
    "\1\32\3\0\1\2\4\0\1\2\11\0\1\32\1\0"+
    "\2\32\6\0\1\32\1\0\1\2\1\0\1\32\1\35"+
    "\21\32\1\35\1\224\22\0\1\35\1\0\2\35\6\0"+
    "\1\35\3\0\17\35\1\225\5\35\3\0\1\2\4\0"+
    "\1\2\11\0\1\32\1\0\2\32\6\0\1\32\1\0"+
    "\1\2\1\0\1\32\1\35\2\32\1\226\16\32\1\35"+
    "\1\32\22\0\1\35\1\0\2\35\6\0\1\35\3\0"+
    "\1\227\24\35\3\0\1\2\4\0\1\2\11\0\1\32"+
    "\1\0\2\32\6\0\1\32\1\0\1\2\1\0\1\32"+
    "\1\35\11\32\1\230\7\32\1\35\1\32\22\0\1\35"+
    "\1\0\2\35\6\0\1\35\3\0\12\35\1\231\12\35"+
    "\3\0\1\2\4\0\1\2\11\0\1\32\1\0\2\32"+
    "\6\0\1\32\1\0\1\2\1\0\1\32\1\35\17\32"+
    "\1\232\1\32\1\35\1\32\22\0\1\35\1\0\2\35"+
    "\6\0\1\35\3\0\4\35\1\233\20\35\3\0\1\2"+
    "\4\0\1\2\11\0\1\32\1\0\2\32\6\0\1\32"+
    "\1\0\1\2\1\0\1\32\1\35\16\32\1\234\2\32"+
    "\1\35\1\32\22\0\1\35\1\0\2\35\6\0\1\35"+
    "\3\0\21\35\1\235\3\35\22\0\1\35\1\0\2\35"+
    "\6\0\1\35\3\0\1\35\1\236\23\35\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6095];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\11\2\1\6\11\1\1\1\11\2\1"+
    "\2\11\3\1\1\11\1\1\2\11\16\1\5\11\1\1"+
    "\1\11\1\0\1\11\1\0\3\1\3\11\22\1\1\11"+
    "\1\0\1\11\117\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private int yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    int lastToken;

    private int nextState=YYINITIAL;
    
    protected Logger log = Logger.getLogger(WDLColorer.class.getName());
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }        
    
    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WDLColorer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token getNextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lastToken = WDLToken.ERROR_IDENTIFIER;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 58: break;
          case 2:
            { lastToken = WDLToken.WHITE_SPACE;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 59: break;
          case 3:
            { lastToken = WDLToken.OPERATOR_LOGICAL_NOT;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 60: break;
          case 4:
            { /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    lastToken = WDLToken.ERROR_UNCLOSED_STRING;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 61: break;
          case 5:
            { lastToken = WDLToken.COMMENT_HASH;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 62: break;
          case 6:
            { log.log(Level.SEVERE, ("Can't highlight illegal character <"+
                                                        yytext()+"> at line " + this.yyline));
            }
          // fall through
          case 63: break;
          case 7:
            { lastToken = WDLToken.SEPARATOR_LPAREN;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 64: break;
          case 8:
            { lastToken = WDLToken.SEPARATOR_RPAREN;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 65: break;
          case 9:
            { lastToken = WDLToken.OPERATOR_MULTIPLY;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 66: break;
          case 10:
            { lastToken = WDLToken.OPERATOR_ADD;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 67: break;
          case 11:
            { lastToken = WDLToken.SEPARATOR_COMMA;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 68: break;
          case 12:
            { lastToken = WDLToken.OPERATOR_SUBTRACT;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 69: break;
          case 13:
            { lastToken = WDLToken.OPERATOR_DIVIDE;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 70: break;
          case 14:
            { /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == WDLToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + yytext());
        } else {
            Integer.decode(yytext());
        }
        lastToken = WDLToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = WDLToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 71: break;
          case 15:
            { lastToken = WDLToken.OPERATOR_SEQUENCE;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 72: break;
          case 16:
            { lastToken = WDLToken.SEPARATOR_SEMICOLON;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 73: break;
          case 17:
            { lastToken = WDLToken.OPERATOR_LESS_THAN;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 74: break;
          case 18:
            { lastToken = WDLToken.OPERATOR_ASSIGN;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 75: break;
          case 19:
            { lastToken = WDLToken.OPERATOR_GREATER_THAN;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 76: break;
          case 20:
            { lastToken = WDLToken.OPERATOR_HELP;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 77: break;
          case 21:
            { lastToken = WDLToken.IDENTIFIER;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 78: break;
          case 22:
            { lastToken = WDLToken.SEPARATOR_LBRACKET;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 79: break;
          case 23:
            { lastToken = WDLToken.SEPARATOR_RBRACKET;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 80: break;
          case 24:
            { lastToken = WDLToken.SEPARATOR_LBRACE;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 81: break;
          case 25:
            { lastToken = WDLToken.SEPARATOR_RBRACE;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 82: break;
          case 26:
            { lastToken = WDLToken.OPERATOR_TILDE;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
            }
          // fall through
          case 83: break;
          case 27:
            { lastToken = WDLToken.OPERATOR_NOT_EQUAL;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
            }
          // fall through
          case 84: break;
          case 28:
            { lastToken = WDLToken.LITERAL_STRING;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 85: break;
          case 29:
            { lastToken = WDLToken.ERROR_MALFORMED_UNCLOSED_STRING;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 86: break;
          case 30:
            { lastToken = WDLToken.OPERATOR_LOGICAL_AND;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
            }
          // fall through
          case 87: break;
          case 31:
            { lastToken = WDLToken.ERROR_MALFORMED_CHARACTER;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 88: break;
          case 32:
            { Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(new Double(0d)) == 0){
            lastToken = WDLToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = WDLToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = WDLToken.ERROR_DOUBLE_SIZE;
    } 
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 89: break;
          case 33:
            { lastToken = WDLToken.LITERAL_DOUBLE;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 90: break;
          case 34:
            { lastToken = WDLToken.OPERATOR_LESS_THAN_OR_EQUAL;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
            }
          // fall through
          case 91: break;
          case 35:
            { lastToken = WDLToken.OPERATOR_EQUAL;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
            }
          // fall through
          case 92: break;
          case 36:
            { lastToken = WDLToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    WDLToken t = (new WDLToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
            }
          // fall through
          case 93: break;
          case 37:
            { lastToken = WDLToken.RESERVED_WORD_IN;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
            }
          // fall through
          case 94: break;
          case 38:
            { lastToken = WDLToken.ERROR_MALFORMED_STRING;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 95: break;
          case 39:
            { lastToken = WDLToken.LITERAL_CHARACTER;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
            }
          // fall through
          case 96: break;
          case 40:
            { lastToken = WDLToken.RESERVED_WORD_CALL;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
            }
          // fall through
          case 97: break;
          case 41:
            { lastToken = WDLToken.RESERVED_WORD_ELSE;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
            }
          // fall through
          case 98: break;
          case 42:
            { lastToken = WDLToken.RESERVED_WORD_META;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
            }
          // fall through
          case 99: break;
          case 43:
            { lastToken = WDLToken.RESERVED_WORD_TASK;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
            }
          // fall through
          case 100: break;
          case 44:
            { lastToken = WDLToken.LITERAL_BOOLEAN;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
            }
          // fall through
          case 101: break;
          case 45:
            { lastToken = WDLToken.LITERAL_BOOLEAN;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
            }
          // fall through
          case 102: break;
          case 46:
            { lastToken = WDLToken.RESERVED_WORD_HINTS;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
            }
          // fall through
          case 103: break;
          case 47:
            { lastToken = WDLToken.RESERVED_WORD_INPUT;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
            }
          // fall through
          case 104: break;
          case 48:
            { lastToken = WDLToken.RESERVED_WORD_IMPORT;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
            }
          // fall through
          case 105: break;
          case 49:
            { lastToken = WDLToken.RESERVED_WORD_OUTPUT;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
            }
          // fall through
          case 106: break;
          case 50:
            { lastToken = WDLToken.RESERVED_WORD_STRUCT;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
            }
          // fall through
          case 107: break;
          case 51:
            { lastToken = WDLToken.RESERVED_WORD_COMMAND;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
            }
          // fall through
          case 108: break;
          case 52:
            { lastToken = WDLToken.RESERVED_RUNTIME;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
            }
          // fall through
          case 109: break;
          case 53:
            { lastToken = WDLToken.RESERVED_WORD_SCATTER;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
            }
          // fall through
          case 110: break;
          case 54:
            { lastToken = WDLToken.RESERVED_WORD_VERSION;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
            }
          // fall through
          case 111: break;
          case 55:
            { lastToken = WDLToken.RESERVED_WORD_WORKFLOW;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+8, nextState));
    return (t);
            }
          // fall through
          case 112: break;
          case 56:
            { lastToken = WDLToken.RESERVED_WORD_REQUIREMENTS;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+12, nextState));
    return (t);
            }
          // fall through
          case 113: break;
          case 57:
            { lastToken = WDLToken.RESERVED_WORD_PARAMETER_META;
    WDLToken t = (new WDLToken(lastToken, yytext(), yyline, yychar, yychar+14, nextState));
    return (t);
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

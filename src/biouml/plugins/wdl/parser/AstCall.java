/* Generated By:JJTree: Do not edit this line. AstCall.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package biouml.plugins.wdl.parser;

import java.util.ArrayList;
import java.util.List;

public class AstCall extends SimpleNode
{
    private String name;

    public AstCall(int id)
    {
        super( id );
    }

    public AstCall(WDLParser p, int id)
    {
        super( p, id );
    }

    @Override
    public String toString()
    {
        return "call";
    }

    public String getName()
    {
        if( name != null )
            return name;

        for( Node node : children )
        {
            if( node instanceof AstSubSymbol )
            {
                return ( (AstSubSymbol)node ).firstToken + "." + ( (AstSubSymbol)node ).lastToken;
            }
        }
        return null;
    }

    public void setName(String name)
    {
        this.name = name;
    }
    
    public String getAlias()
    {
        for (Node node: children)
        {
            if (node instanceof AstAs)
            {
                return ((AstAs)node).getAlias();
            }
        }
        return null;
    }

    public AstSymbol[] getInputs()
    {
         List<AstSymbol> result = new ArrayList<>();
         for (int i=1; i<jjtGetNumChildren(); i++)
         {
        	 Node child = jjtGetChild( i );
        	 if (child instanceof AstSymbol)
        	 {
        		 result.add( (AstSymbol )child);
        	 }
         }
        return result.toArray(AstSymbol[]::new);
    }

}
/* JavaCC - OriginalChecksum=8aed95407f67db839f2014bd8a84629b (do not edit this line) */

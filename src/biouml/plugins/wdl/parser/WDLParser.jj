/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. WDLParser.jj */
/*@egen*//***************************************************************
                   OPTIONS
***************************************************************/
options
{
               
                           
  STATIC = false;
                      
  DEBUG_PARSER = false;
                    
}

/***************************************************************
                   PARSER BEGIN
***************************************************************/
PARSER_BEGIN(WDLParser)
package com.wdl.parser;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;


public class WDLParser/*@bgen(jjtree)*/implements WDLParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTWDLParserState jjtree = new JJTWDLParserState();

/*@egen*/
	protected Logger log = Logger.getLogger(WDLParser.class.getName());
	private String version;
	private boolean workflowExist = false;
    /** Default constructor. */
    public WDLParser()
    {
        this (new StringReader("0"));
    }

    public AstStart parse(Reader reader) throws ParseException
    {
        ReInit(reader);
        AstStart astStart = Start();
        return astStart;
    }
    
    public String getVersion()
    {
    	return version;
    }

}


PARSER_END(WDLParser)

/***************************************************************
                       SKIP & TOKENS
***************************************************************/

TOKEN_MGR_DECLS : {
	int prevLexState;
	int braceLevel = 0;
	boolean isHeredoc = false;
}

TOKEN :
{
< EOL :   ("\n" | "\r"  | "\r\n" ) >
}

<*> SPECIAL_TOKEN : /* instead of SKIP */
{
  <([" ", "\t"])+>
| <"#"> { prevLexState = curLexState; }: ML_COMMENT
}

<ML_COMMENT> SPECIAL_TOKEN :
{
  < ML_EOL : < EOL > > {SwitchTo(prevLexState);}
| <~["\n"]>
}


TOKEN : /* STATE SWITCHERS */
{
< COMMAND: "command" > : BASH_COMMAND

| < PARAMETER_META : "parameter_meta" > 

| < META : "meta" > 

| < RUNTIME: "runtime" > 

| < HINTS: "hints" > 

| < REQUIREMENTS:  "requirements" > 
}


< BASH_COMMAND > TOKEN:
{
< COMMAND_HEREDOC_START: "<<<" > {isHeredoc = true;}: BASH_STRING
| < COMMAND_START:  < BRACE_L > > 
{braceLevel+=1;}: BASH_STRING
}

< BASH_STRING > TOKEN:
{
< START : < BRACE_L > > {braceLevel+=1;}
| < COMMAND_END:  < BRACE_R > > 
{
	braceLevel-=1;
	if (braceLevel == 0 && !isHeredoc)
	{
		isHeredoc = false;
		SwitchTo(DEFAULT);
	}
}
| < COMMAND_HEREDOC_END: ">>>" > : DEFAULT
| < ANY : (~["{", "}"]) >
}

 TOKEN : /* RESERVED WORDS */
{
  < TASK : "task" >

| < WORKFLOW : "workflow" >

| < VERSION : "version" >

| < INPUT : "input" >

| < OUTPUT : "output" >

| < PRIMITIVE_TYPE :  "Boolean" | "File" |
                    "Float"| "Int"| "String" >
| < ARRAY : "Array">

| < NONE : "None" >

| < OBJECT_TYPE : "Object" >

| < PAIR : "Pair" >

| < MAP : "Map">

| < ALIAS : "alias" >

| < AS : "as" >

| < CALL : "call" >

| < ELSE : "else" >

| < TRUE_OR_FALSE : ("true"|"false") >

| < IF : "if" >

| < IN : "in" >

| < IMPORT : "import" >

| < OBJECT: "object" >

| < SCATTER : "scatter" >

| < STRUCT : "struct" >

| < THEN : "then" >

| < NULL : "null" >

| < DOT : ".">
/*
| < STANDARD_FUNCTION :( 
						"floor" | "ceil" | "round" | "sub" | "base_name" |
						"glob" | "size" | "stdout" | "stderr" | "read_string" |
						"read_int" | "read_float" | "read_boolean" | 
						"read_lines" | "write_lines" | "read_tsv" | 
						"write_tsv" | "read_map" | "write_map" | "read_json" | 
						"write_json" | "read_object" | "read_objects" | 
						"write_object" | "write_objects" | "prefix" | 
						"length" | "range" | "transpose" | "cross" | "zip" | 
						"flatten" | "select_first" | "select_all" | "defined" |
						
						"min" | "max" | "suffix" | "quote" | "squote" | "sep" |
						"unzip" | "as_map" | "as_pairs" | "keys" | 
						"collect_by_key" ) >
*/

| < AND: "&&">

| < OR : "||">

| < NOT : "!" >

| < BRAKET_L : "(">

| < BRAKET_R : ")">

| < COLON : ":">

| < EQUAL : "=" >

| < PLUS : "+">

| < MINUS : "-">

| < SEMICOLON : ";">

| < COMMA : "," >

}

TOKEN : /* SPECIAL SYMBOLS */
{
< QUESTION_MARK: "?" >
}

TOKEN : /* RESERVED FOR FUTURE VERSIONS */
{
 < DIRECTORY: "Directory" >
}

TOKEN : /* LITERALS */
{
  < TEXT_STRING : ("\""  ( ~[ "\"", "\n", "\t" ] )* "\"")
    | ("'" ( ~[ "'", "\n", "\t" ] )* "'")> //TODO: /"~"(?!{)/, /"$"(?!{)/
  | < OCTAL_ESCAPE : "\\" ((["0"-"7"]){1, 3}) >
  | < HEX_ESCAPE : "\\x" ((["0"-"9","a"-"f","A"-"F"]){2}) >
  | < UNICODE : ("\\u" ((["0"-"9","a"-"f","A"-"F"]){4}))
    | ("\\U" ((["0"-"9","a"-"f","A"-"F"]){8}))>
}

TOKEN : /* IDENTIFIERS */
{
  < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < SYMBOL : ( < LETTER > | "_" ) ( < LETTER > | < DIGIT > | "_" )* >
| < INTEGER: (<DIGIT>)+>
| < TRIANGULAR_BRACKET_L : "<" >
| < TRIANGULAR_BRACKET_R : ">" >
| < SQUARE_BRACKET_L : "[" >
| < SQUARE_BRACKET_R : "]" >
| < OPERATOR : [ "/", "%"] >
| < STAR : "*" >
| < #EXPONENT: ["e","E"] (< PLUS > | < MINUS >)? (["0"-"9"])+ >
| < FLOATING_POINT_LITERAL:
            (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
            | "." (["0"-"9"])+ (<EXPONENT>)?
            | (["0"-"9"])+ (<EXPONENT>)?
    >
| < BRACE_L: "{" >
| < BRACE_R: "}" >
}

/***************************************************************
                   GRAMMAR START
***************************************************************/
AstStart Start()       :
{/*@bgen(jjtree) Start */
  AstStart jjtn000 = new AstStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    version()

    (astElement())+
    
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void astElement():
{}
{
	( task()| workflow() | struct() | importWDL() | sepEol())
}

// version of WDL
void version()         :
{/*@bgen(jjtree) Version */
  AstVersion jjtn000 = new AstVersion(JJTVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Version */
    try {
/*@egen*/
    < VERSION > < FLOATING_POINT_LITERAL >/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
/*@egen*/ {this.version = token.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void task()      :
{/*@bgen(jjtree) Task */
  AstTask jjtn000 = new AstTask(JJTTASK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Task */
    try {
/*@egen*/
    < TASK >
    symbol() {jjtn000.setName(token.image);}
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol() | input() | 
    declaration(true) 
    | output() | command() 
    | runtime()  //deprecated at 1.2 and removed from 2.0
    | requirements() //introduced in 1.2
    | hints() // introduced in 1.2
    | meta() | parameter_meta())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void meta()      :
{/*@bgen(jjtree) Meta */
  AstMeta jjtn000 = new AstMeta(JJTMETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Meta */
        try {
/*@egen*/
	< META >
	(sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
    (sepEol())*
    metablock()
    (sepEol())+
    (
    metablock()
    (sepEol())+
    )*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void parameter_meta()      :
{/*@bgen(jjtree) Meta */
  AstMeta jjtn000 = new AstMeta(JJTMETA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Meta */
        try {
/*@egen*/
	< PARAMETER_META >
	(sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
    (sepEol())*
    metablock()
    (sepEol())+
    (
    metablock()
    (sepEol())+
    )*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void metablock():
{}
{
	symbol() 
	(sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    ( 
    	metadataFormulaElement()
		| metaArray()
		| metaMap()		
	)
}

void metadataFormulaElement()                    :
{/*@bgen(jjtree) MetaFormulaElement */
  AstMetaFormulaElement jjtn000 = new AstMetaFormulaElement(JJTMETAFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MetaFormulaElement */
        try {
/*@egen*/
	(< TRUE_OR_FALSE >
    | < TEXT_STRING >
    | < FLOATING_POINT_LITERAL > 
    | < NULL > )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void metaArray()       :
{/*@bgen(jjtree) Array */
  AstArray jjtn000 = new AstArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(	
		LOOKAHEAD(3)
		(sepEol())*
	    ( 
	    	metadataFormulaElement()
			| metaArray()
			| metaMap()		
		)
        (
        	LOOKAHEAD(3)
        	(sepEol())*
            (/*@bgen(jjtree) Comma */
             {
               AstComma jjtn002 = new AstComma(JJTCOMMA);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/       )
            (sepEol())*
            ( 
		    	metadataFormulaElement()
				| metaArray()
				| metaMap()		
			)
        )*
    )?
    (sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void metaMap()     :
{/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Map */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(sepEol())*
    metaKeyValue()
    (
    	LOOKAHEAD(3)
    	(sepEol())*
        (/*@bgen(jjtree) Comma */
         {
           AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
        (sepEol())*
        metaKeyValue()
    )*
    (sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void metaKeyValue()          :
{/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) KeyValue */
        try {
/*@egen*/
	< SYMBOL > {jjtn000.setKey(token.image);}
	(sepEol())*
	(/*@bgen(jjtree) Colon */
         {
           AstColon jjtn001 = new AstColon(JJTCOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       ) 
	(sepEol())*
	( 
    	metadataFormulaElement()
		| metaArray()
		| metaMap()		
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void workflow()          :
{/*@bgen(jjtree) Workflow */
        AstWorkflow jjtn000 = new AstWorkflow(JJTWORKFLOW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	if (workflowExist)
		throw new ParseException("The file can contain only one workflow declaration");
}
{/*@bgen(jjtree) Workflow */
    try {
/*@egen*/
    < WORKFLOW >
    symbol() {jjtn000.setName(token.image);}
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    ( sepEol()
    | input()
    | declaration(true)
    | output() | call() | scatter()
    | meta() | parameter_meta() | conditional())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {this.workflowExist = true;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void scatter()         :
{/*@bgen(jjtree) Scatter */
  AstScatter jjtn000 = new AstScatter(JJTSCATTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Scatter */
    try {
/*@egen*/
    < SCATTER > // TODO:
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    symbol()
    (sepEol())*
    (/*@bgen(jjtree) In */
     {
       AstIn jjtn002 = new AstIn(JJTIN);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< IN >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/     )
    (sepEol())*
    expression()
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (
    sepEol()
    | declaration(true)
    | call() | scatter() | conditional())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc005 = true;
       jjtree.openNodeScope(jjtn005);
       jjtn005.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn005, true);
                    jjtc005 = false;
                    jjtn005.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn005.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc005) {
         jjtree.closeNodeScope(jjtn005, true);
         jjtn005.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void conditional()             :
{/*@bgen(jjtree) Conditional */
  AstConditional jjtn000 = new AstConditional(JJTCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Conditional */
        try {
/*@egen*/
	< IF >
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(sepEol())*
	expression()
	(sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                         jjtn002.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
    (
    sepEol()
    | declaration(true) 
    | call() 
    | scatter() 
    | conditional())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
       jjtn004.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
         jjtn004.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void command()         :
{/*@bgen(jjtree) Command */
  AstCommand jjtn000 = new AstCommand(JJTCOMMAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Command */
    try {
/*@egen*/
    < COMMAND > 
    (
    (
		(/*@bgen(jjtree) RegularFormulaElement */
                 {
                   AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/(< COMMAND_HEREDOC_START >/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn001, true);
                                              jjtc001 = false;
                                              jjtn001.jjtSetLastToken(getToken(0));
                                            }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                       )
		(/*@bgen(jjtree) BashString */
                 {
                   AstBashString jjtn003 = new AstBashString(JJTBASHSTRING);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/(/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/(< ANY > | < START > | < COMMAND_END >/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002, true);
                                                          jjtc002 = false;
                                                          jjtn002.jjtSetLastToken(getToken(0));
                                                        }
/*@egen*/{jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )*/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/            )
		(/*@bgen(jjtree) RegularFormulaElement */
                 {
                   AstRegularFormulaElement jjtn004 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtn004.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/(< COMMAND_HEREDOC_END >/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn004, true);
                                            jjtc004 = false;
                                            jjtn004.jjtSetLastToken(getToken(0));
                                          }
/*@egen*/ {jjtn004.setElement(token.image);})/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                       )
	)
	|
    (
		(/*@bgen(jjtree) RegularFormulaElement */
                 {
                   AstRegularFormulaElement jjtn005 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                   jjtn005.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/(< COMMAND_START >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn005, true);
                                      jjtc005 = false;
                                      jjtn005.jjtSetLastToken(getToken(0));
                                    }
/*@egen*/ {jjtn005.setElement(token.image);})/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtn005.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                       )
		(/*@bgen(jjtree) BashString */
                  {
                    AstBashString jjtn006 = new AstBashString(JJTBASHSTRING);
                    boolean jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
                    jjtn006.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ (bashString())*/*@bgen(jjtree)*/
                  } catch (Throwable jjte006) {
                    if (jjtc006) {
                      jjtree.clearNodeScope(jjtn006);
                      jjtc006 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                      throw (RuntimeException)jjte006;
                    }
                    if (jjte006 instanceof ParseException) {
                      throw (ParseException)jjte006;
                    }
                    throw (Error)jjte006;
                  } finally {
                    if (jjtc006) {
                      jjtree.closeNodeScope(jjtn006, true);
                      jjtn006.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/            )
		(/*@bgen(jjtree) RegularFormulaElement */
                 {
                   AstRegularFormulaElement jjtn007 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                   boolean jjtc007 = true;
                   jjtree.openNodeScope(jjtn007);
                   jjtn007.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/(< COMMAND_END >/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn007, true);
                                    jjtc007 = false;
                                    jjtn007.jjtSetLastToken(getToken(0));
                                  }
/*@egen*/ {jjtn007.setElement(token.image);})/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc007) {
                     jjtree.closeNodeScope(jjtn007, true);
                     jjtn007.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                       )
	))/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void bashString():
{}
{
	placeholder() 
	| (/*@bgen(jjtree) RegularFormulaElement */
           {
             AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/(< ANY >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/                       )
	| (/*@bgen(jjtree) RegularFormulaElement */
           {
             AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtn002.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/(< COMMAND_HEREDOC_END >/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn002, true);
                                     jjtc002 = false;
                                     jjtn002.jjtSetLastToken(getToken(0));
                                   }
/*@egen*/{jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtn002.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/                       )
}

void placeholder():
{}
{
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< START >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(bashString())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< COMMAND_END >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                            jjtn002.jjtSetLastToken(getToken(0));
                          }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       ) 
}

void call()      :
{/*@bgen(jjtree) Call */
  AstCall jjtn000 = new AstCall(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Call */
    try {
/*@egen*/
    < CALL >
    (LOOKAHEAD(2)
    subSymbol()
    |
    (/*@bgen(jjtree) Symbol */
     {
       AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< SYMBOL >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/        )
    {jjtn000.setName(token.image);}) 
    (
        as()
    )?
    (
    LOOKAHEAD(3)
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
    {
      AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (< BRACE_L >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                   jjtn002.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                       )
	    (sepEol())*
	    (
	        (/*@bgen(jjtree) Input */
                 {
                   AstInput jjtn003 = new AstInput(JJTINPUT);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/< INPUT >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/       )
	        (sepEol())*
	        (/*@bgen(jjtree) Colon */
                 {
                   AstColon jjtn004 = new AstColon(JJTCOLON);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtn004.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtn004.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/       )
	        (sepEol())* 
	        equationSymbol()
	        (
	        	LOOKAHEAD(3)
		        (sepEol())*
		        (/*@bgen(jjtree) Comma */
                         {
                           AstComma jjtn005 = new AstComma(JJTCOMMA);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
                           jjtn005.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005, true);
                             jjtn005.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/       ) 
		        (sepEol())*
		        equationSymbol()
	        )*
	    	(sepEol())*
	    )?
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn006 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc006 = true;
       jjtree.openNodeScope(jjtn006);
       jjtn006.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn006, true);
                    jjtc006 = false;
                    jjtn006.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn006.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc006) {
         jjtree.closeNodeScope(jjtn006, true);
         jjtn006.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void subSymbol()           :
{/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SubSymbol */
        try {
/*@egen*/
	<SYMBOL> ( < DOT > < SYMBOL >)+/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void equationSymbol()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Symbol */
        try {
/*@egen*/
	< SYMBOL > { jjtn000.setName(token.image); }
	((/*@bgen(jjtree) Equal */
          {
            AstEqual jjtn001 = new AstEqual(JJTEQUAL);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/< EQUAL >/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/       )
	expression())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void runtime()         :
{/*@bgen(jjtree) Runtime */
        AstRuntime jjtn000 = new AstRuntime(JJTRUNTIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	switch (this.version) {
		case ("1.2"):
			log.log(Level.WARNING, "The runtime section is deprecated and will be removed in WDL 2.0.");
			break;
		default:
			break;
	}
}
{/*@bgen(jjtree) Runtime */
    try {
/*@egen*/
    < RUNTIME > 
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    execEngineBlock()
    (sepEol())+
    (
    execEngineBlock()
    (sepEol())+
    )*
    
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void requirements()         :
{/*@bgen(jjtree) Runtime */
        AstRuntime jjtn000 = new AstRuntime(JJTRUNTIME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	switch (this.version) {
		case ("1.0"):
		case ("1.1"):
			throw new ParseException("The requirements section was introduced in WDL 1.2. Use \"runtime\" instead.");
		default:
			break;
	}
}
{/*@bgen(jjtree) Runtime */
    try {
/*@egen*/
    < REQUIREMENTS >
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    execEngineBlock()
    (sepEol())+
    (
    execEngineBlock()
    (sepEol())+
    )*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void hints()       :
{/*@bgen(jjtree) Hints */
        AstHints jjtn000 = new AstHints(JJTHINTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	switch (this.version) {
		case ("1.0"):
		case ("1.1"):
			throw new ParseException("The hints section was introduced in WDL 1.2. Specify attributes in \"runtime\" instead.");
		default:
			break;
	}
}
{/*@bgen(jjtree) Hints */
    try {
/*@egen*/
    < HINTS >
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    execEngineBlock()
    (sepEol())+
    (
    execEngineBlock()
    (sepEol())+
    )*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void execEngineBlock():
{}
{
	symbol()
	(sepEol())* 
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol())*
    expression()
}

void sepEol()     :
{/*@bgen(jjtree) EOL */
  AstEOL jjtn000 = new AstEOL(JJTEOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EOL */
        try {
/*@egen*/
	< EOL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
void input()       :
{/*@bgen(jjtree) Input */
  AstInput jjtn000 = new AstInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Input */
    try {
/*@egen*/
    < INPUT >
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol() | declaration(true))*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void output()        :
{/*@bgen(jjtree) Output */
  AstOutput jjtn000 = new AstOutput(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Output */
    try {
/*@egen*/
    < OUTPUT >
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol() | declaration(true))*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void struct()        :
{/*@bgen(jjtree) Struct */
  AstStruct jjtn000 = new AstStruct(JJTSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Struct */
    try {
/*@egen*/
    < STRUCT >
    symbol() {jjtn000.setStructName(token.image);}
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (sepEol() | declaration(false))*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void declaration(boolean canBeInitialized)             :
{/*@bgen(jjtree) Declaration */
  AstDeclaration jjtn000 = new AstDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    type() {jjtn000.setType(token.image.replace(" ", ""));}

    (< SYMBOL >/*@bgen(jjtree) Symbol */
                {
                  AstSymbol jjtn001 = new AstSymbol(JJTSYMBOL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                  jjtn001.jjtSetLastToken(getToken(0));
                }
/*@egen*/ { jjtn001.setName(token.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/	       )
    
    
    
    (
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< EQUAL >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.jjtSetLastToken(getToken(0));
    }
/*@egen*/ 
    {
    	if (!canBeInitialized)
    		throw new ParseException("Variable can not be initialized at line " + token.beginLine);
    	jjtn002.setElement(token.image);
    }
    )/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       ) 
    expression()
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
    
}

void type():
{
}
{
	(
	    (/*@bgen(jjtree) Type */
             {
               AstType jjtn001 = new AstType(JJTTYPE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/(< PRIMITIVE_TYPE > | < OBJECT_TYPE > | < SYMBOL >)/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/
	         )
	    | arrayType()
	    | mapType() 
	    | pairType()
	    )
    (
        < QUESTION_MARK > // parameter can be undefined
    )? 
}

void arrayType()           :
{/*@bgen(jjtree) ArrayType */
  AstArrayType jjtn000 = new AstArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayType */
    try {
/*@egen*/
    < ARRAY >
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    type()
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn002, true);
                             jjtc002 = false;
                             jjtn002.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn002.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    ((/*@bgen(jjtree) RegularFormulaElement */
      {
        AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/( < PLUS >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn003, true);
                   jjtc003 = false;
                   jjtn003.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/                       ) {jjtn000.setNonEmpty(true);})?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/ 
}

void pairType()          : // TODO: values accessed via left and right
{/*@bgen(jjtree) PairType */
  AstPairType jjtn000 = new AstPairType(JJTPAIRTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PairType */
    try {
/*@egen*/
    < PAIR >
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    type()
    (/*@bgen(jjtree) Comma */
     {
       AstComma jjtn002 = new AstComma(JJTCOMMA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/       )
    type()
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                             jjtn003.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void mapType()         :
{/*@bgen(jjtree) MapType */
  AstMapType jjtn000 = new AstMapType(JJTMAPTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MapType */
    try {
/*@egen*/
    < MAP >
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    type()
    (/*@bgen(jjtree) Comma */
     {
       AstComma jjtn002 = new AstComma(JJTCOMMA);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/       )
    type()
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                             jjtn003.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ternary()         :
{/*@bgen(jjtree) Ternary */
  AstTernary jjtn000 = new AstTernary(JJTTERNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Ternary */
    try {
/*@egen*/
    < IF >
    expression()
    (/*@bgen(jjtree) Then */
     {
       AstThen jjtn001 = new AstThen(JJTTHEN);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< THEN >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/      )
    expression()
    (/*@bgen(jjtree) Else */
     {
       AstElse jjtn002 = new AstElse(JJTELSE);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
       jjtn002.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< ELSE >/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
         jjtn002.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/      )
    expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void expression()            :
{/*@bgen(jjtree) Expression */
  AstExpression jjtn000 = new AstExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    (LOOKAHEAD(10) subsymbolChain()
    | LOOKAHEAD(10) constructor()
    | LOOKAHEAD(10) expressionInBrackets() 
    | text()
    | array()
    | map()
    | pair()
    | LOOKAHEAD(5) containerElement()
    | LOOKAHEAD(5)function()
    | (/*@bgen(jjtree) None */
       {
         AstNone jjtn001 = new AstNone(JJTNONE);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtn001.jjtSetFirstToken(getToken(1));
       }
       try {
/*@egen*/< NONE >/*@bgen(jjtree)*/
       } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
           jjtn001.jjtSetLastToken(getToken(0));
         }
       }
/*@egen*/      )
    | regularFormulaElement()
    | ternary())+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void expressionInBrackets()            :
{/*@bgen(jjtree) Expression */
  AstExpression jjtn000 = new AstExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    (< BRAKET_L >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )
    (sepEol())*
    expression()
    (sepEol())*
    (< BRAKET_R >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn002 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn002.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void containerElement()                  :
{/*@bgen(jjtree) ContainerElement */
  AstContainerElement jjtn000 = new AstContainerElement(JJTCONTAINERELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContainerElement */
    try {
/*@egen*/
    < SYMBOL > {jjtn000.setContainerName(token.image);}
    < SQUARE_BRACKET_L >
    (sepEol())*
    (
    LOOKAHEAD(2) subsymbolChain() | symbol() | text() | (/*@bgen(jjtree) RegularFormulaElement */
                                                         {
                                                           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                           jjtn001.jjtSetFirstToken(getToken(1));
                                                         }
                                                         try {
/*@egen*/< INTEGER >/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                             jjtn001.jjtSetLastToken(getToken(0));
                                                           }
                                                         }
/*@egen*/                       )
    )
    (sepEol())*
    < SQUARE_BRACKET_R >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void subsymbolChain()           :
{/*@bgen(jjtree) SubSymbol */
  AstSubSymbol jjtn000 = new AstSubSymbol(JJTSUBSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SubSymbol */
        try {
/*@egen*/
	(LOOKAHEAD(5) containerElement() | symbol()) (< DOT > (LOOKAHEAD(5) containerElement() | symbol()))+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void constructor()             :
{/*@bgen(jjtree) Constructor */
  AstConstructor jjtn000 = new AstConstructor(JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Constructor */
    try {
/*@egen*/
    (< OBJECT > | < SYMBOL >) {jjtn000.setName(token.image);}
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )
    (
    	LOOKAHEAD(3) (sepEol())*
        constructorKeyValue()
        (
        	LOOKAHEAD(3) (sepEol())*
	        (/*@bgen(jjtree) Comma */
                 {
                   AstComma jjtn002 = new AstComma(JJTCOMMA);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/       )
	        (sepEol())*
	        constructorKeyValue()
        )*
    )?
    (sepEol())*
    (/*@bgen(jjtree) RegularFormulaElement */
     {
       AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
       jjtn003.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
         jjtn003.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                       )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void constructorKeyValue()          :
{/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) KeyValue */
        try {
/*@egen*/
	< SYMBOL > {jjtn000.setKey(token.image);}
	(sepEol())*
	(/*@bgen(jjtree) Colon */
         {
           AstColon jjtn001 = new AstColon(JJTCOLON);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       ) 
	(sepEol())*
	expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void importWDL()        :
{/*@bgen(jjtree) Import */
  AstImport jjtn000 = new AstImport(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Import */
    try {
/*@egen*/
    < IMPORT >
    text()
    (LOOKAHEAD(2) (sepEol())? as())?
    (LOOKAHEAD(2) (sepEol())? alias())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void alias()       :
{/*@bgen(jjtree) Alias */
  AstAlias jjtn000 = new AstAlias(JJTALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Alias */
        try {
/*@egen*/
	< ALIAS >
	symbol()
	(sepEol())*
	as()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void text()      :
{/*@bgen(jjtree) Text */
  AstText jjtn000 = new AstText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Text */
    try {
/*@egen*/
    < TEXT_STRING >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {jjtn000.setText(token.image.substring(1, token.image.length() - 1));}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void function()          :
{/*@bgen(jjtree) Function */
  AstFunction jjtn000 = new AstFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    (< SYMBOL >){jjtn000.setName(token.image); }
    (< BRAKET_L >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn001.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )
    (
    	LOOKAHEAD(3) (sepEol())*
        expression()
        (
        	LOOKAHEAD(3) (sepEol())*
            (/*@bgen(jjtree) Comma */
             {
               AstComma jjtn002 = new AstComma(JJTCOMMA);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/       )
            (sepEol())*
            expression()
        )*
    )?
    (sepEol())*
    <  BRAKET_R >/*@bgen(jjtree) RegularFormulaElement */
                  {
                    AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtn003.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
                  }
/*@egen*/ {jjtn003.setElement(token.image);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtn003.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/

}

void regularFormulaElement()                       :
{/*@bgen(jjtree) RegularFormulaElement */
  AstRegularFormulaElement jjtn000 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) RegularFormulaElement */
    try {
/*@egen*/
    (
            < SYMBOL > {jjtn000.setVariable(true);}
            | < TRUE_OR_FALSE >
            | < STAR >
            | < OPERATOR > |  < TRIANGULAR_BRACKET_L > | < TRIANGULAR_BRACKET_R >
            | < NOT > | < EQUAL >
            | < PLUS > | < MINUS > | <AND> | <OR>
            | < FLOATING_POINT_LITERAL > {jjtn000.setNumber(true);}
            | < INTEGER > {jjtn000.setNumber(true);}

    )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/{jjtn000.setElement(token.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}




void as()    :
{/*@bgen(jjtree) As */
  AstAs jjtn000 = new AstAs(JJTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) As */
    try {
/*@egen*/
    < AS >
    (sepEol())*
    symbol()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void symbol()        :
{/*@bgen(jjtree) Symbol */
  AstSymbol jjtn000 = new AstSymbol(JJTSYMBOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Symbol */
  try {
/*@egen*/
  < SYMBOL >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
             }
/*@egen*/ { jjtn000.setName(token.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void array()       :
{/*@bgen(jjtree) Array */
  AstArray jjtn000 = new AstArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_L >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(
		LOOKAHEAD(3) (sepEol())*
	    expression()
        (
        	LOOKAHEAD(3) (sepEol())*
            (/*@bgen(jjtree) Comma */
             {
               AstComma jjtn002 = new AstComma(JJTCOMMA);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtn002.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtn002.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/       )
            (sepEol())*
            expression()
        )*
    )?
    (sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< SQUARE_BRACKET_R >/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                 jjtn003.jjtSetLastToken(getToken(0));
                               }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void map()     :
{/*@bgen(jjtree) Map */
  AstMap jjtn000 = new AstMap(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Map */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_L >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(sepEol())*
    keyValue()
    (
    	LOOKAHEAD(3) (sepEol())*
        (/*@bgen(jjtree) Comma */
         {
           AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
        (sepEol())*
        keyValue()
    )*
    (sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRACE_R >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.jjtSetLastToken(getToken(0));
                      }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void keyValue()          :
{/*@bgen(jjtree) KeyValue */
  AstKeyValue jjtn000 = new AstKeyValue(JJTKEYVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) KeyValue */
        try {
/*@egen*/
	primitiveType() {jjtn000.setKey(token.image);}
	(sepEol())*
    (/*@bgen(jjtree) Colon */
     {
       AstColon jjtn001 = new AstColon(JJTCOLON);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/< COLON >/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/       )
    (sepEol())*
    expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void primitiveType():
{}
{
    < TRUE_OR_FALSE >
    | < FLOATING_POINT_LITERAL > 
    | < INTEGER >
    | < TEXT_STRING > 
}

void pair()      :
{/*@bgen(jjtree) Pair */
  AstPair jjtn000 = new AstPair(JJTPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Pair */
        try {
/*@egen*/
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn001 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRAKET_L >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn001.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )
	(sepEol())*
	    expression()
	    (sepEol())*
        (/*@bgen(jjtree) Comma */
         {
           AstComma jjtn002 = new AstComma(JJTCOMMA);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/< COMMA >/*@bgen(jjtree)*/
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/       )
        (sepEol())*
        expression()
        (sepEol())*
	(/*@bgen(jjtree) RegularFormulaElement */
         {
           AstRegularFormulaElement jjtn003 = new AstRegularFormulaElement(JJTREGULARFORMULAELEMENT);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
           jjtn003.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/(< BRAKET_R >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtc003 = false;
                         jjtn003.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn003.setElement(token.image);})/*@bgen(jjtree)*/
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003, true);
             jjtn003.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                       )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}
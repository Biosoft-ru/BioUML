/* Generated By:JJTree&JavaCC: Do not edit this line. WDLParserConstants.java */
package biouml.plugins.wdl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WDLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 1;
  /** RegularExpression Id. */
  int ML_EOL = 4;
  /** RegularExpression Id. */
  int COMMAND = 6;
  /** RegularExpression Id. */
  int PARAMETER_META = 7;
  /** RegularExpression Id. */
  int META = 8;
  /** RegularExpression Id. */
  int RUNTIME = 9;
  /** RegularExpression Id. */
  int HINTS = 10;
  /** RegularExpression Id. */
  int REQUIREMENTS = 11;
  /** RegularExpression Id. */
  int COMMAND_HEREDOC_START = 12;
  /** RegularExpression Id. */
  int COMMAND_START = 13;
  /** RegularExpression Id. */
  int START = 14;
  /** RegularExpression Id. */
  int COMMAND_END = 15;
  /** RegularExpression Id. */
  int COMMAND_HEREDOC_END = 16;
  /** RegularExpression Id. */
  int ANY = 17;
  /** RegularExpression Id. */
  int TASK = 18;
  /** RegularExpression Id. */
  int WORKFLOW = 19;
  /** RegularExpression Id. */
  int VERSION = 20;
  /** RegularExpression Id. */
  int INPUT = 21;
  /** RegularExpression Id. */
  int OUTPUT = 22;
  /** RegularExpression Id. */
  int PRIMITIVE_TYPE = 23;
  /** RegularExpression Id. */
  int ARRAY = 24;
  /** RegularExpression Id. */
  int NONE = 25;
  /** RegularExpression Id. */
  int OBJECT_TYPE = 26;
  /** RegularExpression Id. */
  int PAIR = 27;
  /** RegularExpression Id. */
  int MAP = 28;
  /** RegularExpression Id. */
  int ALIAS = 29;
  /** RegularExpression Id. */
  int AS = 30;
  /** RegularExpression Id. */
  int CALL = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int TRUE_OR_FALSE = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int IN = 35;
  /** RegularExpression Id. */
  int IMPORT = 36;
  /** RegularExpression Id. */
  int OBJECT = 37;
  /** RegularExpression Id. */
  int SCATTER = 38;
  /** RegularExpression Id. */
  int STRUCT = 39;
  /** RegularExpression Id. */
  int THEN = 40;
  /** RegularExpression Id. */
  int NULL = 41;
  /** RegularExpression Id. */
  int DOT = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int OR = 44;
  /** RegularExpression Id. */
  int NOT = 45;
  /** RegularExpression Id. */
  int BRAKET_L = 46;
  /** RegularExpression Id. */
  int BRAKET_R = 47;
  /** RegularExpression Id. */
  int COLON = 48;
  /** RegularExpression Id. */
  int EQUAL = 49;
  /** RegularExpression Id. */
  int PLUS = 50;
  /** RegularExpression Id. */
  int MINUS = 51;
  /** RegularExpression Id. */
  int SEMICOLON = 52;
  /** RegularExpression Id. */
  int COMMA = 53;
  /** RegularExpression Id. */
  int QUESTION_MARK = 54;
  /** RegularExpression Id. */
  int DIRECTORY = 55;
  /** RegularExpression Id. */
  int TEXT_STRING = 56;
  /** RegularExpression Id. */
  int OCTAL_ESCAPE = 57;
  /** RegularExpression Id. */
  int HEX_ESCAPE = 58;
  /** RegularExpression Id. */
  int UNICODE = 59;
  /** RegularExpression Id. */
  int LETTER = 60;
  /** RegularExpression Id. */
  int DIGIT = 61;
  /** RegularExpression Id. */
  int SYMBOL = 62;
  /** RegularExpression Id. */
  int INTEGER = 63;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_L = 64;
  /** RegularExpression Id. */
  int TRIANGULAR_BRACKET_R = 65;
  /** RegularExpression Id. */
  int SQUARE_BRACKET_L = 66;
  /** RegularExpression Id. */
  int SQUARE_BRACKET_R = 67;
  /** RegularExpression Id. */
  int OPERATOR = 68;
  /** RegularExpression Id. */
  int STAR = 69;
  /** RegularExpression Id. */
  int EXPONENT = 70;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 71;
  /** RegularExpression Id. */
  int BRACE_L = 72;
  /** RegularExpression Id. */
  int BRACE_R = 73;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int BASH_STRING = 1;
  /** Lexical state. */
  int BASH_COMMAND = 2;
  /** Lexical state. */
  int ML_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<EOL>",
    "<token of kind 2>",
    "\"#\"",
    "<ML_EOL>",
    "<token of kind 5>",
    "\"command\"",
    "\"parameter_meta\"",
    "\"meta\"",
    "\"runtime\"",
    "\"hints\"",
    "\"requirements\"",
    "\"<<<\"",
    "<COMMAND_START>",
    "<START>",
    "<COMMAND_END>",
    "\">>>\"",
    "<ANY>",
    "\"task\"",
    "\"workflow\"",
    "\"version\"",
    "\"input\"",
    "\"output\"",
    "<PRIMITIVE_TYPE>",
    "\"Array\"",
    "\"None\"",
    "\"Object\"",
    "\"Pair\"",
    "\"Map\"",
    "\"alias\"",
    "\"as\"",
    "\"call\"",
    "\"else\"",
    "<TRUE_OR_FALSE>",
    "\"if\"",
    "\"in\"",
    "\"import\"",
    "\"object\"",
    "\"scatter\"",
    "\"struct\"",
    "\"then\"",
    "\"null\"",
    "\".\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"Directory\"",
    "<TEXT_STRING>",
    "<OCTAL_ESCAPE>",
    "<HEX_ESCAPE>",
    "<UNICODE>",
    "<LETTER>",
    "<DIGIT>",
    "<SYMBOL>",
    "<INTEGER>",
    "\"<\"",
    "\">\"",
    "\"[\"",
    "\"]\"",
    "<OPERATOR>",
    "\"*\"",
    "<EXPONENT>",
    "<FLOATING_POINT_LITERAL>",
    "\"{\"",
    "\"}\"",
  };

}

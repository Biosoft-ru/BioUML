/* WDLParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. WDLParserTokenManager.java */
package biouml.plugins.wdl.parser;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;

/** Token Manager. */
@SuppressWarnings ("unused")
public class WDLParserTokenManager implements WDLParserConstants {
        int prevLexState;
        int braceLevel = 0;
        boolean isHeredoc = false;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8002fdff780fc0L) != 0L)
         {
            jjmatchedKind = 62;
            return 39;
         }
         if ((active0 & 0x40000000000L) != 0L)
            return 42;
         if ((active0 & 0x10000040000L) != 0L)
         {
            jjmatchedKind = 62;
            return 22;
         }
         return -1;
      case 1:
         if ((active0 & 0x8003f1bf5c0fc0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active0 & 0xc40200000L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0x10000000L) != 0L)
            return 39;
         if ((active0 & 0x8003f1af7c0fc0L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000f025780ec0L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
            return 39;
         }
         if ((active0 & 0x3018a040100L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x8000f004580ac0L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 39;
         }
         if ((active0 & 0x21200400L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active0 & 0x80004000180ac0L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
            return 39;
         }
         if ((active0 & 0xb004400000L) != 0L)
            return 39;
         return -1;
      case 6:
         if ((active0 & 0x4000100240L) != 0L)
            return 39;
         if ((active0 & 0x80000000080880L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 39;
         }
         return -1;
      case 7:
         if ((active0 & 0x80000000000880L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 39;
         }
         if ((active0 & 0x80000L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active0 & 0x880L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
            return 39;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active0 & 0x880L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
            return 39;
         }
         return -1;
      case 10:
         if ((active0 & 0x880L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 10;
            return 39;
         }
         return -1;
      case 11:
         if ((active0 & 0x800L) != 0L)
            return 39;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 11;
            return 39;
         }
         return -1;
      case 12:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 12;
            return 39;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 45);
      case 35:
         return jjStopAtPos(0, 3);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         return jjStopAtPos(0, 69);
      case 43:
         return jjStopAtPos(0, 50);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         return jjStopAtPos(0, 51);
      case 46:
         return jjStartNfaWithStates_0(0, 42, 42);
      case 58:
         return jjStopAtPos(0, 48);
      case 59:
         return jjStopAtPos(0, 52);
      case 60:
         return jjStopAtPos(0, 64);
      case 61:
         return jjStopAtPos(0, 49);
      case 62:
         return jjStopAtPos(0, 65);
      case 63:
         return jjStopAtPos(0, 54);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 91:
         return jjStopAtPos(0, 66);
      case 93:
         return jjStopAtPos(0, 67);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000040L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1c00200000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000400000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xa00L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000040000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x98040080L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2004000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100900L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000400L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080040L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000400200L);
      case 124:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20080000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000600L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80008001180080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x21000080L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 39);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x80002004000000L);
      case 107:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 39);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 39);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 39);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000600L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000a004000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100a00L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 39);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 39);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000080L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 39);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 39);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 39);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 39);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 39);
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 39);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000080000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 39);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 119:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L);
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 11, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 7, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 82;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(39); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if ((0x802000000000L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAdd(3); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(42); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(32, 33); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(29, 30); }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAdd(3); }
                  break;
               case 28:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 29:
                  if ((0xfffffffbfffff9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 31:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 32:
                  if ((0xffffff7ffffff9ffL & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 56)
                     kind = 56;
                  break;
               case 35:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 40:
                  if ((0x802000000000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 41:
                  if (curChar == 46)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddTwoStates(42, 43); }
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(45); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(71); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if (curChar != 46)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(77); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 80:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(81); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  { jjCheckNAdd(81); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(39); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     { jjCheckNAdd(39); }
                  }
                  else if (curChar == 92)
                     { jjAddStates(5, 7); }
                  if (curChar == 70)
                     { jjAddStates(8, 9); }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 4:
                  if (curChar == 110 && kind > 23)
                     kind = 23;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 116 && kind > 23)
                     kind = 23;
                  break;
               case 12:
                  if (curChar == 110)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 103 && kind > 23)
                     kind = 23;
                  break;
               case 15:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101 && kind > 33)
                     kind = 33;
                  break;
               case 21:
                  if (curChar == 117)
                     { jjCheckNAdd(20); }
                  break;
               case 23:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 115)
                     { jjCheckNAdd(20); }
                  break;
               case 25:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  { jjAddStates(10, 11); }
                  break;
               case 32:
                  { jjAddStates(12, 13); }
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  { jjCheckNAdd(39); }
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 46:
                  if (curChar == 70)
                     { jjAddStates(8, 9); }
                  break;
               case 47:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 48:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 97)
                     { jjCheckNAdd(11); }
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 92)
                     { jjAddStates(5, 7); }
                  break;
               case 54:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 57:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(61); }
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 62:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(16, 17); }
                  break;
               case 79:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(18, 19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(10, 11); }
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0xfffffffffffffbffL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 5)
                     kind = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 3);
      case 60:
         return jjMoveStringLiteralDfa1_2(0x1000L);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  kind = 2;
                  { jjCheckNAdd(0); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (curChar == 123)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 17;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 3);
      case 62:
         return jjMoveStringLiteralDfa1_1(0x10000L);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 17)
                     kind = 17;
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAdd(0); }
                  break;
               case 3:
                  if (kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  break;
               case 2:
                  if (curChar == 125)
                     kind = 15;
                  break;
               case 3:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\143\157\155\155\141\156\144", 
"\160\141\162\141\155\145\164\145\162\137\155\145\164\141", "\155\145\164\141", "\162\165\156\164\151\155\145", "\150\151\156\164\163", 
"\162\145\161\165\151\162\145\155\145\156\164\163", "\74\74\74", null, null, null, "\76\76\76", null, "\164\141\163\153", 
"\167\157\162\153\146\154\157\167", "\166\145\162\163\151\157\156", "\151\156\160\165\164", 
"\157\165\164\160\165\164", null, "\101\162\162\141\171", "\116\157\156\145", "\117\142\152\145\143\164", 
"\120\141\151\162", "\115\141\160", "\141\154\151\141\163", "\141\163", "\143\141\154\154", 
"\145\154\163\145", null, "\151\146", "\151\156", "\151\155\160\157\162\164", 
"\157\142\152\145\143\164", "\163\143\141\164\164\145\162", "\163\164\162\165\143\164", 
"\164\150\145\156", "\156\165\154\154", "\56", "\46\46", "\174\174", "\41", "\50", "\51", "\72", 
"\75", "\53", "\55", "\73", "\54", "\77", "\104\151\162\145\143\164\157\162\171", 
null, null, null, null, null, null, null, null, "\74", "\76", "\133", "\135", null, 
"\52", null, null, "\173", "\175", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   71, 72, 73, 78, 79, 54, 57, 62, 49, 52, 29, 30, 32, 33, 44, 45, 
   76, 77, 80, 81, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          prevLexState = curLexState;
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        SwitchTo(prevLexState);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                                  isHeredoc = true;
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
 braceLevel+=1;
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         braceLevel+=1;
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        braceLevel-=1;
        if (braceLevel == 0 && !isHeredoc)
        {
                isHeredoc = false;
                SwitchTo(DEFAULT);
        }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public WDLParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public WDLParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 82; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "BASH_STRING",
   "BASH_COMMAND",
   "ML_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, 3, -1, -1, 2, -1, -1, -1, -1, -1, 1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xcfffffffffffffc3L, 0x3bfL, 
};
static final long[] jjtoSkip = {
   0x3cL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3cL, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[82];
    private final int[] jjstateSet = new int[2 * 82];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}

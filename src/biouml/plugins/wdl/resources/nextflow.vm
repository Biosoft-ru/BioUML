#######################################################################################
#####################################CONSTANTS#########################################
#######################################################################################
#set ($BR = "
")
#set ($INDENT = "  ")
#set ($QUOTE = '"')
#######################################################################################
#####################################MACROS############################################
#######################################################################################
#macro(comma $list)
#if($velocityCount < $list.size()),#end
#end
#######################################################################################
#macro(callNF $call)
#set ($inputs = $helper.getInputs($call))
#if ($inputs.size()> 0)
  $helper.getResultName($call) = $helper.getCallName($call)(#foreach($input in $inputs)$helper.getInputName($input)#comma($inputs)#end)
#else
  $helper.getResultName($call) = $helper.getCallName($call)()
#end
#end
#######################################################################################
#macro(scatterNF $scatter)
  $helper.createChannelFromArrray($scatter)
#foreach( $n in $helper.orderCalls($scatter))
#if ($helper.isCycle($n))#scatterNF($n)
#elseif ($helper.isCall($n))#callNF($n)
#end 
#end
#end
#######################################################################################
#######################################START###########################################
#######################################################################################
nextflow.enable.dsl=2
#######################################################################################
#set($functions = $helper.getFunctions())
#if (!$functions.isEmpty())
include { $functions } from './biouml_function.nf'
#end
#######################################################################################
#foreach ($c in $helper.getImportedCalls())include { $helper.getTaskRef($c) as $helper.getImportedAlias($c) } from './$helper.getImportedDiagram($c)'$BR#end$BR
#######################################################################################
#set ($externalParameters = $helper.getExternalParameters())
#if ($externalParameters.size() > 0)
#foreach( $externalParameter in $externalParameters )
$helper.getExternalInput($externalParameter)
#end
#end
#if($externalParameters.size() > 0)$BR#end
#######################################################################################
#######################################TASKS###########################################
#######################################################################################
#foreach( $task in $helper.getTasks())
process $task.getName() {
#set ($inputs = $helper.getInputs($task))
#if ($inputs.size() > 0)
$BR  input :
#foreach( $input in $inputs )
  $helper.getDeclaration($input)
#end
#end
#set ($container = $helper.getContainer($task))
#if($container)  container '$container'#end
$BR  publishDir "$task.getName()", mode: 'copy'
$BR  script:
  """
  $helper.getCommand($task).trim()
  """
#set ($outputs = $helper.getOutputs($task))
#if ($outputs.size() > 0)
$BR  output:
#foreach( $output in $outputs )
  $helper.getType($output) $helper.getExpression($output), emit: $helper.getName($output) 
#end
#end
}$BR
#end
#######################################################################################
###################################WORKFLOW############################################
#######################################################################################
workflow {
  main:
#foreach( $n in $helper.orderCalls($diagram))
#if ($helper.isCycle($n))#scatterNF($n)
#elseif ($helper.isCall($n))#callNF($n)
#end 
#end
}
<tool id="dindel_main" name="Dindel Main" version="1.0beta">
        <command>/bin/bash -v "$script_main"</command>
        <inputs>
		<param name="input_bam" type="data" format="bam" label="BAM file" />
                <param name="candidates" type="data" format="txt" label="Dindel candidates" help="Dindel candidates which were received from Dindel Extract"/>
                <param name="libfile" type="data" format="txt" label="Dindel libraries file" help="Dindels ﬁle with library insert histograms generated by Dindel Extract"/>

                <param name="refGenome" type="select" label="Reference genome">
                        <options from_data_table="gatk_picard_indexes">
                                <filter type="sort_by" column="2" />
                                <validator type="no_options" message="No genomes are available for GATK" />
                        </options>
                </param>
                <conditional name="sample_type">
                        <param name="condValue" type="select" label="Type of the sample"
                                help="-doDiploid: Assume all input BAM ﬁles are from a single diploid individual. The Bayesian model explicitly assumes two haplotypes.

-doPooled Assumes the number of haplotypes is unlimited. Dindel estimates haplotype frequencies using a Bayesian EM algorithm.

Note that in this case, Dindel assumes that if the --bamFiles option is used, each BAM ﬁle corresponds to a seperate individual.
In the output ﬁle, Dindel will report genotype likelihoods for each BAM ﬁle/individual, assuming that the data from each BAM ﬁle corresponds to a diploid individual.
This step is performed after the Bayesian EM haplotype frequency estimation, and is equivalent to the genotype likelihood estimation of the --doDiploid option.">
                                <option value="--doDiploid" selected="True">Diploid</option>
                                <option value="--doPooled">Pooled</option>
                        </param>
                        <when value="--doDiploid">
                        </when>
                        <when value="--doPooled">
                                <param name="bayesa" type="float" label="Dirichlet a0 parameter haplotype frequency prior" value="0.001"
                                        help="Dirichlet a0 parameter haplotype frequency prior [0.001]"/>
                                <param name="bayesType" type="select" label="Bayesian EM program type"
                                        help="Bayesian EM program type [singlevariant]">
                                        <option value="singlevariant" selected="True">Single Variant</option>
                                        <option value="all">All</option>
                                        <option value="priorpersite">Prior per Site</option>
                                </param>
                        </when>
                </conditional>

                <param name="maxRead" type="integer" label="max Reads per window to align" value="1000"
                        help="This option limits the number of reads that is allowed per realignment window.
This value should be adapted to something that is reasonable for your data set.
Dindel will skip a realignment when this value is exceeded (and will say so in the output ﬁles).[1000]" />
                <param name="filterHaplotypes" type="integer" label="preﬁlter haplotypes based on coverage" value="5"
                        help="This options applies ﬁltering to the set of candidate haplotypes, after realignment of reads to each candidate haplotype.
Essentially, all haplotypes that have an indel that is not covered by at least x high-mapping quality reads 5 bp to the left and the right of region that deﬁnes the indel,
are ﬁltered and not considered in the Bayesian EM algorithm or diploid phasing algorithm. This option reduces sensitivity, but in some cases avoids artefacts.
One example is when the two reads in a mate-pair must be aligned with a very small insert size.[5]" />
                <param name="maxHap" type="integer" label="maximum number of haplotypes in likelihood computation"  value="8"
                        help="This option controls the number of candidate haplotypes against which each candidate variant is tested.
With --maxHap 1, each candidate indel is tested only against the reference haplotype.
In this case, Dindel would create two candidate haplotypes: one being the reference haplotype, the other one being the reference haplotype with the indel added to it.
Therefore, the total number of candidate haplotypes is equal to the number of candidate variants times the number speciﬁed after --maxHap.
The default and strongly recommended value for --maxHap is 8. This gives higher sensitivity and lower false-discovery rates on simulated data for longer indels.
However, reasonable results may be obtained with --maxHap 1, but it will produce false indel calls near SNPs"/>

                <param name="varFileIsOneBased" type="boolean" label="coordinates in varFile are one-based" truevalue="--varFileIsOneBased" falsevalue="" checked="False"
                        help="coordinates in varFile are one-based.[unchecked]"/>

                <conditional name="fast">
                        <param name="condValue" type="select" label="use faster but less accurate alignment model"
                              help="use faster but less accurate (ungapped) read-haplotype alignment model [No]">
                                <option value="No">No</option>
                                <option value="Yes">Yes</option>
                        </param>
                        <when value="Yes">
                           <param name="capMapQualFast" type="integer" value="40" label="cap mapping quality in alignment using fast ungapped method"
                                help="cap mapping quality in alignment using fast ungapped method (WARNING: setting it too high (&gt;50) might result in signiﬁcant overcalling!)" />
                        </when>
                        <when value="No" />
                </conditional>



                <param name="priorSNP" type="float" label="prior probability of a SNP site" value="0.001"
                        help="prior probability of a SNP site [0.001]"/>
                <param name="priorIndel" type="float" label="prior probability of an Indel site" value="0.0001"
                        help="prior probability of an Indel site [0.0001]"/>
                <param name="mapQualThreshold" type="float" label="lower limit for read mapping quality" value="0.01"
                        help="lower limit for read mapping quality [0.01]"/>
                <param name="capMapQualThreshold" type="integer" label="upper limit for read mapping quality" value="100"
                        help="upper limit for read mapping quality in observationmodelold (phred units)[100]"/>
                <param name="skipMaxHap" type="integer" label="skip computation if number of haplotypes exceeds this number" value="200"
                        help="skip computation if number of haplotypes exceeds this number [200]"/>
                <param name="maxReadLength" type="integer" label="maximum length of reads" value="500"
                        help="maximum length of reads [500]"/>
                <param name="maxHapReadProd" type="integer" label="skip if number of reads*haplotypes exceeds this value" value="100000"
                        help="skip if product of number of reads and haplotypes exceeds this value" />
                <param name="pMut" type="float" label="probability of a mutation in the read" value="1e-05"
                        help="probability of a mutation in the read [1e-05]"/>
                <param name="maxLengthIndel" type="integer" label="maximum length of a sequencing error indel in read" value="5"
                        help="maximum length of a sequencing error indel in read" />

                <param name="wind_per_file" type="integer" label="Number of Windows per file" value="1000"
                        help="Number of Windows per file. This option helpful for parallel execution as each window analized separately. It has influence on amount of memory required per thread"/>
                <param name="nThreads" type="integer" label="Number of threads" value="30" />
        </inputs>
        <outputs>
                <data format="txt" name="output_log" label="Log file"/>
                <!--data format="bam" name="Result" /-->
        </outputs>
<configfiles>
<configfile name="dindel_starter">#!/bin/bash -v
VARFILE=$1
err="stage2_windows_logs/err.pipe.\$VARFILE"
out="stage2_windows_logs/out.pipe.\$VARFILE"
mkfifo "\$err" "\$out"
trap 'cat \$VARFILE.err \$VARFILE.out &gt;&gt; \$VARFILE.log; rm \$VARFILE.err \$VARFILE.out "\$err"  "\$out"'
tee \$VARFILE.err &lt; "\$err" &gt;&amp;2 &amp;
tee \$VARFILE.out &lt; "\$out" &gt;&amp;1 &amp;


dindel --analysis indels $sample_type.condValue --bamFile $input_bam --ref "${ refGenome.fields.path }" \
        --varFile "windows/\$VARFILE" --libFile "$libfile" --outputFile "stage2_windows/\$VARFILE" \
        --maxRead $maxRead  --ﬁlterHaplotypes $ﬁlterHaplotypes --maxHap $maxHap $varFileIsOneBased \
#if str( $fast.condValue ) == "Yes"
  --faster --capMapQualFast $capMapQualFast \
#end if
#if str( $sample_type.condValue ) == "--doPooled"
   --bayesa $bayesa --bayesType $bayesType \
#end if
        --priorSNP $priorSNP --priorIndel $priorIndel --mapQualThreshold $mapQualThreshold \
        --capMapQualThreshold $capMapQualThreshold --skipMaxHap $skipMaxHap --maxReadLength $maxReadLength \
        --maxHapReadProd $maxHapReadProd --pMut $pMut --maxLengthIndel $maxLengthIndel \
        &gt; "\$out" 2&gt;"\$err"
</configfile>
        <configfile name="script_main">#!/bin/bash -v

sleep 100000000000000000000000
DEST=`dirname ${output_log}`
cd \$DEST
err="err.pipe"
out="out.pipe"
mkfifo "\$err" "\$out"
trap 'cat ${ output_log }.err &gt;&gt; ${ output_log }; echo "output-log: \n" &gt;&gt; ${ output_log }; cat ${ output_log }.out &gt;&gt; ${ output_log }; rm -f "\$err"  "\$out"' EXIT
tee ${ output_log }.err &lt; "\$err" &gt;&amp;2 &amp;
tee ${ output_log }.out &lt; "\$out" &gt;&amp;1 &amp;

PREFIX="windows/window"
mkdir -p windows

time makeWindows.py --inputVarFile $candidates \
--windowFilePrefix \$PREFIX --numWindowsPerFile $wind_per_file &gt;"\$out" 2&gt;"\$err"

mkdir -p stage2_windows
mkdir -p stage2_windows_logs
ls windows | xargs -n 1 -P nThreads -t $dindel_starter

        </configfile>
  </configfiles>

        <help>
        </help>
</tool>


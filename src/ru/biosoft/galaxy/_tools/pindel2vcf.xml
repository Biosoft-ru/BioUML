<tool id="pindel2vcf049" name="Pindel2VCF" version="0.4.9">
<command>/bin/bash -v "$script"</command>
<inputs>
    <param name="refGenome" type="select" label="Reference genome">
                        <options from_data_table="gatk_picard_indexes">
                                <filter type="sort_by" column="2" />
                                <validator type="no_options" message="No genomes are available for GATK" />
                        </options>
   </param>

	<conditional name="input_type">
		<param name="condValue" type="select" label="Create from one/multiple files" 
                       help="Create VCF file from one or all pindel files">
                                <option value="One">One</option>
                                <option value="Multiple">Multiple</option>
                </param>
		<when value="One">
			<param name="the_one" type="data" label="One pindel file" help="Enter one of files from pindel. File can be bz2 compressed"/>
		</when>
		<when value="Multiple">
			<param name="the_folder" type="data-multi" label="Folder with pindel files" 
				help="Enter a folder with Pindel files. The files should be in format name_BP, name_SI.... Names shoudl contain only one character '_'. Files could be bz2 compressed.  this will result in one big output file containing deletions, short and long insertions, tandem duplications and inversions"/>
                </when>
	</conditional>
	<param name="chromosome" type="text" label="Chromosome" value="All"
		help="-c/--chromosome  The name of the chromosome ([All] SVs on all chromosomes are processed)" />
	<param name="window_size" type="integer" label="Window Size" value="300" 
		help="-w/--window_size  Memory saving option: the size of the genomic region in a chromosome of which structural variants are calculated separately, in millions of bases (default 300, for memory saving 100 or 50 recommended)"/>
	<param name="min_size" type="integer" label="The minimum size of events" value="1" 
		help="-is/--min_size  The minimum size of events to be reported [1]"/>
	<param name="max_size" type="integer" label="The maximum size of events [0=infinite]" value="0"                                                                                    
                help="-as/--max_size  The maximum size of events to be reported [0=infinite]"/>
	<param name="both_strands_supported" type="boolean" label="Only report events that are detected on both strands" truevalue="--both_strands_supported" falsevalue="" checked="False" 
                help="-b/--both_strands_supported  Only report events that are detected on both strands [false]"/>
	<param name="min_supporting_samples" type="integer" label="The minimum number of samples an event" value="0" 
                help="-m/--min_supporting_samples  The minimum number of samples an event needs to occur in with sufficient support to be reported [0]"/>
	<param name="min_supporting_reads" type="integer" label="The minimum number of supporting reads" value="1"
		help="-e/--min_supporting_reads  The minimum number of supporting reads required for an event to be reported [1]"/>
	<param name="max_supporting_reads" type="integer" label="The maximum number of supporting reads [0=infinite]" value="0" 
                help="-f/--max_supporting_reads  The maximum number of supporting reads allowed for an event to be reported, allows protection against miscalls in due to segmental duplications or poorly mapped regions [0=infinite]"/>
	<param name="region_start" type="integer" label="The start of the region" value="0" 
                help="-sr/--region_start  The start of the region of which events are to be reported [0]"/>
	<param name="region_end" type="integer" label="The end of the region" value="0" 
                help="-er/--region_end  The end of the region of which events are to be reported [0=infinite]"/>
	<param name="max_internal_repeats" type="integer" label="Filter out a long homopolymer/microsatellite longer X repeats [0=infinite]" value="0" 
                help="-ir/--max_internal_repeats  Filters out all indels where the inserted/deleted sequence is a homopolymer/microsatellite of more than X repetitions [0=infinite]. For example: T-&gt;TCACACA has CACACA as insertion, which is a microsattelite of 3 repeats; this would be filtered out by setting -ir to 2"/>
	<param name="max_internal_repeatlength" type="integer" label="Filter out a long homopolymer/microsatellite with an unit size of more than Y [0=infinite]" value="0" 
                help="-il/--max_internal_repeatlength  Filters out all indels where the inserted/deleted sequence is a homopolymers/microsatellite with an unit size of more than Y, combine with the option -ir. Default value of -il is infinite. For example: T-&gt;TCAGCAG has CAGCAG as insertion, which has the fundamental repetitive unit CAG of length 3. This would be filtered out if -il has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -il is 2"/>
	<param name="max_postindel_repeats" type="integer" label="max postindel repeats [0=infinite]" value="0" 
                help="-pr/--max_postindel_repeats  Filters out all indels where the inserted/deleted sequence is followed by a repetition (of over X times) of the fundamental repeat unit of the inserted/deleted sequence. For example, T-&gt;TCACA would usually be a normal insertion, which is not filtered out, but if the real sequence change is TCACACA-&gt;TCACACACACA, it will be filtered out by -pr of 1 or above, as the fundamental repeat unit of the inserted sequence (CA) is repeated more than one time in the postindel sequence [indel sequence CACA, postindel sequence CACACA]. Note: when CAC is inserted next to ACACAC, the repeat sequence is recognized as CA, even though the 'postrepeat' sequence is ACACAC"/>
	<param name="max_postindel_repeatlength" type="integer" label="max postindel repeatlength [0=infinite]" value="0" 
                help="-pl/--max_postindel_repeatlength  Filters out all indels where the inserted/deleted sequence is followed by a repetition of  the fundamental repeat unit of the inserted/deleted sequence; the maximum size of that 'fundamental unit' given by the value of -pl (default infinite) For example: TCAG-&gt;TCAGCAG has insertion CAG and post-insertion sequence CAG. This insertion would be filtered out if -pl has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -pl is 2"/>

	<param name="only_balanced_samples" type="boolean" label="only balanced samples" truevalue="--only_balanced_samples" falsevalue="" checked="False" 
            help="-sb/--only_balanced_samples  Only count a sample as supporting an event if it is supported by reads on both strands, minimum reads per strand given by the -ss parameter.[unchecked]"/>
	<param name="minimum_strand_support" type="integer" label="minimum strand support" value="1" 
                help="-ss/--minimum_strand_support  Only count a sample as supporting an event if at least one of its strands is supported by X reads [1]"/>
	<param name="gatk_compatible" type="boolean" label="gatk compatible" truevalue="--gatk_compatible" falsevalue="" checked="True" 
            help="-G/--gatk_compatible  calls genotypes which could either be homozygous or heterozygous not as ./1 but as 0/1, to ensure compatibility with GATK [checked]"/>
</inputs>

<outputs>
	<data format="txt" name="log" label="Execution Log" />
	<data format="vcf" name="vcf" label="output vcf-file" help="The name of the output vcf-file"/>
</outputs>
<configfiles>
    <configfile name="script">#!/bin/bash -v
export PATH=\$PATH:/opt/tools/pindel/default

DEST=`dirname $log`
cd \$DEST
err="\$DEST/err.pipe"
out="\$DEST/out.pipe"
echo \$err
mkfifo "\$err" "\$out"
trap 'cat "$log".err "$log".out &gt;&gt; "$log" ; rm -f "\$err" "\$out"' EXIT
tee "$log".err &lt; "\$err" &gt;&amp;2 &amp;
tee "$log".out &lt; "\$out" &gt;&amp;2 &amp;

#if str( $input_type.condValue ) == "Multiple" :
   file1=`echo $input_type.the_folder | awk 'NR==1{print \$1}'`
   source=`dirname \$file1`
   cd \$source

#### fix for bug with extensions. need to remove later. 
   ls *_bz2. | sed -e 's/_bz2.//'|xargs -n 1 -P 1 -t -I {} mv {}_bz2. {}.bz2

   filename=`ls | awk 'NR==1{print \$1}'`
   bname=`echo \$filename | sed -e 's/_.*\$//'`
   echo basename is \$bname for multifile mode
#end if

ls *.bz2 | xargs -n 1 -P 10 -t pbzip2 -d -m900


pindel2vcf --reference "${ refGenome.fields.path }" \
	--reference_name "${ refGenome.fields.name }" \
	--reference_date `stat -c "%y" "${ refGenome.fields.path }" | awk '{print \$1}'` \
#if str( $input_type.condValue ) == "One" : 
	--pindel_output "${ input_type.the_one }" \
#else :
	--pindel_output_root \$bname \
#end if
	--vcf "$vcf" \
#if str( $chromosome ) != "All" :
	--chromosome $chromosome \
#end if
	--window_size $window_size \
	--min_size $min_size \
#if str( $max_size ) != "0" :
	--max_size $max_size \
#end if
	$both_strands_supported --min_supporting_reads $min_supporting_reads  \
#if str( $max_supporting_reads ) != "0" :
	--max_supporting_reads $max_supporting_reads \
#end if
	--region_start $region_start \
#if str( $region_end ) != "0" :
	--region_end $region_end \
#end if
#if str( $max_internal_repeats ) != "0" :
        --max_internal_repeats $max_internal_repeats \
#end if
#if str( $max_internal_repeatlength ) != "0" :
        --max_internal_repeatlength $max_internal_repeatlength \
#end if
#if str( $max_postindel_repeats ) != "0" :
        --max_postindel_repeats $max_postindel_repeats \
#end if
#if str( $max_postindel_repeatlength ) != "0" :
        --max_postindel_repeatlength $max_postindel_repeatlength \
#end if
	$only_balanced_samples $gatk_compatible --minimum_strand_support $minimum_strand_support &gt;"\$out" 2&gt;"\$err"

  </configfile>
</configfiles>

<help>
Program:   pindel2vcf (conversion of Pindel output to VCF format)
Version:   0.4.9
Contact:   Eric-Wubbo Lameijer e.m.w.lameijer@lumc.nl

Usage:     pindel2vcf -p pindel_output_file -r reference_file
              -R name_and_version_of_reference_genome -d date_of_reference_genome_version
              [-v vcf_output_file]

           the -v parameter is optional; when no output file name is given, output is written
           to a file with the name pindel_output_file.vcf.

Example:   pindel2vcf -p sample3chr20_D -r human_g1k_v36.fasta -R 1000GenomesPilot-NCBI36   -d 20101123-v sample3chr20_D.vcf

Note:      -is only guaranteed to work correctly on output files produced by pindel version 0.2.3 and above.
           -LI and BP files (long insertion and break point files) have a different type of header and are not supported yet.

-r/--reference  The name of the file containing the reference genome: required parameter

-R/--reference_name  The name and version of the reference genome: required parameter

-d/--reference_date  The date of the version of the reference genome used: required parameter

-p/--pindel_output  The name of the pindel output file containing the SVs

-P/--pindel_output_root  The root-name of the pindel output file; this will result in one big output file containing deletions, short and long insertions, tandem duplications and inversions

-v/--vcf  The name of the output vcf-file (default: name of pindel output file +".vcf"

-c/--chromosome  The name of the chromosome (default: SVs on all chromosomes are processed)

-w/--window_size  Memory saving option: the size of the genomic region in a chromosome of which structural variants are calculated separately, in millions of bases (default 300, for memory saving 100 or 50 recommended)

-is/--min_size  The minimum size of events to be reported (default 1)

-as/--max_size  The maximum size of events to be reported (default infinite)

-b/--both_strands_supported  Only report events that are detected on both strands (default false)

-m/--min_supporting_samples  The minimum number of samples an event needs to occur in with sufficient support to be reported (default 0)

-e/--min_supporting_reads  The minimum number of supporting reads required for an event to be reported (default 1)

-f/--max_supporting_reads  The maximum number of supporting reads allowed for an event to be reported, allows protection against miscalls in due to segmental duplications or poorly mapped regions (default infinite)

-sr/--region_start  The start of the region of which events are to be reported (default 0)

-er/--region_end  The end of the region of which events are to be reported (default infinite)

-ir/--max_internal_repeats  Filters out all indels where the inserted/deleted sequence is a homopolymer/microsatellite of more than X repetitions (default infinite). For example: T-&gt;TCACACA has CACACA as insertion, which is a microsattelite of 3 repeats; this would be filtered out by setting -ir to 2

-il/--max_internal_repeatlength  Filters out all indels where the inserted/deleted sequence is a homopolymers/microsatellite with an unit size of more than Y, combine with the option -ir. Default value of -il is infinite. For example: T-&gt;TCAGCAG has CAGCAG as insertion, which has the fundamental repetitive unit CAG of length 3. This would be filtered out if -il has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -il is 2

-pr/--max_postindel_repeats  Filters out all indels where the inserted/deleted sequence is followed by a repetition (of over X times) of the fundamental repeat unit of the inserted/deleted sequence. For example, T-&gt;TCACA would usually be a normal insertion, which is not filtered out, but if the real sequence change is TCACACA-&gt;TCACACACACA, it will be filtered out by -pr of 1 or above, as the fundamental repeat unit of the inserted sequence (CA) is repeated more than one time in the postindel sequence [indel sequence CACA, postindel sequence CACACA]. Note: when CAC is inserted next to ACACAC, the repeat sequence is recognized as CA, even though the 'postrepeat' sequence is ACACAC

-pl/--max_postindel_repeatlength  Filters out all indels where the inserted/deleted sequence is followed by a repetition of  the fundamental repeat unit of the inserted/deleted sequence; the maximum size of that 'fundamental unit' given by the value of -pl (default infinite) For example: TCAG-&gt;TCAGCAG has insertion CAG and post-insertion sequence CAG. This insertion would be filtered out if -pl has been set to 3 or above, but would be deemed 'sufficiently unrepetitive' if -pl is 2

-sb/--only_balanced_samples  Only count a sample as supporting an event if it is supported by reads on both strands, minimum reads per strand given by the -ss parameter. (default false)

-ss/--minimum_strand_support  Only count a sample as supporting an event if at least one of its strands is supported by X reads (default 1)

-G/--gatk_compatible  calls genotypes which could either be homozygous or heterozygous not as ./1 but as 0/1, to ensure compatibility with GATK

-h/--help  Print the help of this converter

</help>


</tool>

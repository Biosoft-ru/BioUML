<tool id="gatk_Somatic_Indel_Detector" name="Somatic Indel Detector" version="0.0.6">
  <description>SNP and indel caller</description>
  <requirements>
      <requirement type="package" version="1.4">gatk</requirement>
      <requirement type="package">samtools</requirement>
  </requirements>
        <command>/bin/bash -v "$script" </command>
<inputs>
 <conditional name="reference_source">

      <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
	<param name="normal_bam" type="data" format="bam" label="BAM file for normal sample" help="-I:normal &lt;input_file&gt;">
		<!--validator type="unspecified_build" />
		<validator type="dataset_metadata_in_data_table" table_name="gatk_picard_indexes"
                        metadata_name="dbkey" metadata_column="dbkey"
                        message="Sequences are not currently available for the specified build." /-->
        </param>
	<param name="tumor_bam" type="data" format="bam" label="BAM file for Tumor sample" help="-I:tumor &lt;input_file&gt;">
	        <!--validator type="unspecified_build" />
                <validator type="dataset_metadata_in_data_table" table_name="gatk_picard_indexes"
                metadata_name="dbkey" metadata_column="dbkey" message="Sequences are not currently available  for the specified build." /-->
	</param>
	<param name="ref_file" type="select" label="Using reference genome" help="-R,--reference_sequence &lt;reference_sequence&gt;">
          <options from_data_table="gatk_picard_indexes">
            <!-- <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/> does not yet work in a repeat...-->
          </options>
          <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
	<param name="normal_bam" type="data" format="bam" label="BAM file for normal sample" help="-I:normal &lt;input_file&gt;">
                <validator type="unspecified_build" />
                <validator type="dataset_metadata_in_data_table" table_name="gatk_picard_indexes"
                        metadata_name="dbkey" metadata_column="dbkey"
                        message="Sequences are not currently available for the specified build." />
        </param>                                                                                                                                                                               
        <param name="tumor_bam" type="data" format="bam" label="BAM file for Tumor sample" help="-I:tumor &lt;input_file&gt;">
                <validator type="unspecified_build" />
                <validator type="dataset_metadata_in_data_table" table_name="gatk_picard_indexes"
                metadata_name="dbkey" metadata_column="dbkey" message="Sequences are not currently available  for the specified build." />
        </param>
	<param name="ref_file" type="data" format="fasta" label="Using reference file" help="-R,--reference_sequence &lt;reference_sequence&gt;" />
      </when>
    </conditional>

    <param name="maxNumberOfReads" type="integer" value="10000"
      label="Maximum number of reads to cache in the window"
      help="--maxNumberOfReads. Maximum number of reads to cache in the window; if number of reads exceeds this number,                                                                        
                the window will be skipped and no calls will be made from it." />
    <param name="window_size"  type="integer" value="200" label="Size (bp) of the sliding window"
        help="--window_size; Size (bp) of the sliding window used for accumulating the coverage.
                May need to be increased to accomodate longer reads or longer deletions.
                A read can be fit into the window if its length on the reference (i.e. read length + length of deletion gap(s) if any)
                is smaller than the window size. Reads that do not fit will be ignored, so long deletions can not be called if window is too small.[200]"/>
    <param name="filter_expressions" type="text" value="T_COV&lt;6||N_COV&lt;4||T_INDEL_F&lt;0.3||T_INDEL_CF&lt;0.7" label="filter_expressions"
        help="--filter_expressionsOne or more logical expressions. If any of the expressions is TRUE,
                putative indel will be discarded and nothing will be printed into the output
                (unless genotyping at the specific position is explicitly requested, see -genotype).
                [ T_COV&lt;6||N_COV&lt;4||T_INDEL_F&lt;0.3||T_INDEL_CF&lt;0.7 ]" />

	<param name="numThreads" type="integer" label="Number of threads" value="60" />

    <conditional name="gatk_param_type">
      <param name="gatk_param_type_selector" type="select" label="Basic or Advanced GATK options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
	<param name="numThreads" type="integer" label="Number of threads" value="60" />
        <repeat name="pedigree" title="Pedigree file" help="-ped,--pedigree &lt;pedigree&gt;">
            <param name="pedigree_file" type="data" format="txt" label="Pedigree files for samples"/>
        </repeat>
        <repeat name="pedigree_string_repeat" title="Pedigree string" help="-pedString,--pedigreeString &lt;pedigreeString&gt;">
            <param name="pedigree_string" type="text" value="" label="Pedigree string for samples"/>
        </repeat>
        <param name="pedigree_validation_type" type="select" label="How strict should we be in validating the pedigree information"
            help="-pedValidationType,--pedigreeValidationType &lt;pedigreeValidationType&gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter" help="-rf,--read_filter &lt;read_filter&gt;">
            <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option value="MaxReadLength" selected="True">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <!-- no extra options -->
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer" value="10"
                  label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer" value="1000000"
                  label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" value="76" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text" value="" label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param name="readName" type="text" value="" label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean" truevalue="--filterPositive" falsevalue=""
                  label="Discard reads on the forward strand"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer" value="60" label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text" value="" label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer" value="76" label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat name="input_interval_repeat" title="Operate on Genomic intervals" help="-L,--intervals &lt;intervals&gt;">
          <param name="input_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>
        <repeat name="input_exclude_interval_repeat" title="Exclude Genomic intervals" help="-XL,--excludeIntervals &lt;excludeIntervals&gt;">
          <param name="input_exclude_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>

        <param name="interval_set_rule" type="select" label="Interval set rule" help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;">
          <option value="UNION" selected="True">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>

        <conditional name="downsampling_type">
          <param name="downsampling_type_selector" type="select" label="Type of reads downsampling to employ at a given locus"
                help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;">
            <option value="NONE" selected="True">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1"
                        help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0"
                        help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1"
                        help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0"
                        help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param name="baq" type="select" label="Type of BAQ calculation to apply in the engine" help="-baq,--baq &amp;lt;baq&amp;gt;">
          <option value="OFF" selected="True">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param name="baq_gap_open_penalty" type="float" label="BAQ gap open penalty (Phred Scaled)" value="40"
                help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" />
        <param name="use_original_qualities" type="boolean" truevalue="--useOriginalQualities" falsevalue=""
                label="Use the original base quality scores from the OQ tag" help="-OQ,--useOriginalQualities" />
        <param name="default_base_qualities" type="integer" label="Value to be used for all base quality scores, when some are missing" value="-1"
                help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"/>
        <param name="validation_strictness" type="select" label="How strict should we be with validation" help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param name="interval_merging" type="select" label="Interval merging rule" help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;">
          <option value="ALL" selected="True">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>

        <repeat name="read_group_black_list_repeat" title="Read group black list" help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;">
          <conditional name="read_group_black_list_type">
            <param name="read_group_black_list_type_selector" type="select" label="Type of reads read group black list">
              <option value="file" selected="True">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param name="read_group_black_list" type="data" format="txt" label="Read group black list file" />
            </when>
            <when value="text">
              <param name="read_group_black_list" type="text" value="tag:string" label="Read group black list tag:string" />
            </when>
          </conditional>
        </repeat>

        <param name="disable_experimental_low_memory_sharding" type="boolean" truevalue="--disable_experimental_low_memory_sharding" falsevalue=""
                label="Disable experimental low-memory sharding functionality." checked="False" help="--disable_experimental_low_memory_sharding"/>
        <param name="non_deterministic_random_seed" type="boolean" truevalue="--nonDeterministicRandomSeed" falsevalue=""
                label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" checked="False"
                help="-ndrs,--nonDeterministicRandomSeed"/>

      </when>
    </conditional>

</inputs>
  <outputs>
    <data format="vcf" name="output_vcf" label="${tool.name} on ${on_string} (VCF)" />
    <data format="txt" name="output_metrics" label="${tool.name} on ${on_string} (metrics)" />
    <data format="txt" name="output_log" label="${tool.name} on ${on_string} (log)" />
  </outputs>

<configfiles>
    <configfile name="script">#!/bin/bash -v
DEST=`dirname ${output_log}`
cp gatk_wrapper.py \$DEST
cd \$DEST
err="err.pipe"
out="out.pipe"
mkfifo "\$err" "\$out"
trap 'cat ${ output_log }.err &gt;&gt; ${ output_log }; echo "output-log: \n" &gt;&gt; ${ output_log }; cat ${ output_log }.out &gt;&gt; ${ output_log }; rm -f "\$err"  "\$out"' EXIT
tee ${ output_log }.err &lt; "\$err" &gt;&amp;2 &amp;
tee ${ output_log }.out &lt; "\$out" &gt;&amp;1 &amp;

/usr/bin/python gatk_wrapper.py \
   --max_jvm_heap_fraction "1" \
   ### --stdout "${output_log}" \ ### we are checking out end std in this script
   -d "-I:normal" "${normal_bam}" "${normal_bam.ext}" "gatk_input_1" \
   #if str( $normal_bam.metadata.bam_index ) != "None":
      -d "" "${normal_bam.metadata.bam_index}" "bam_index" "gatk_input_1" \
        ##hardcode galaxy ext type as bam_index
   #end if
   -d "-I:tumor" "${tumor_bam}" "${tumor_bam.ext}" "gatk_input_2" \
   #if str( $tumor_bam.metadata.bam_index ) != "None":
      -d "" "${tumor_bam.metadata.bam_index}" "bam_index" "gatk_input_2" \
        ##hardcode galaxy ext type as bam_index
   #end if   
   -p 'java -jar "${GALAXY_DATA_INDEX_DIR}/shared/jars/gatk/GenomeAnalysisTK.jar"' \
   -p ' -T "SomaticIndelDetector" --out "${output_vcf}"' \
###   does not supported : -p ' -nt "$numThreads" ' \
   -p ' --metrics_file "${output_metrics}" ' \
    #### -et "NO_ET" ##ET no phone home
    ##-log "${output_log}" ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != "history":
        -p ' -R "${reference_source.ref_file.fields.path}" ' \
    #end if
    -p ' --filter_expressions "$filter_expressions" --maxNumberOfReads $maxNumberOfReads --window_size $window_size ' \
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == "advanced":
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree "${pedigree.pedigree_file}"' \
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString "${pedigree_string.pedigree_string}"' \
        #end for
        -p '--pedigreeValidationType "${gatk_param_type.pedigree_validation_type}"' \
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter "${read_filter.read_filter_type.read_filter_type_selector}"' \
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ "__current_case__", "read_filter_type_selector" ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        -p '${param}' \
                    #else:
                        -p '--${name} "${param}" ' \
                    #end if
                #end if
            #end for
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d "--intervals" "${input_intervals.input_intervals}" "${input_intervals.input_intervals.ext}" "input_intervals_${interval_count}" \
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d "--excludeIntervals" "${input_intervals.input_exclude_intervals}" "${input_intervals.input_exclude_intervals.ext}" "input_exlude_intervals_${interval_count}" \
        #end for
        -p '--interval_set_rule "${gatk_param_type.interval_set_rule}"' \
        -p '--downsampling_type "${gatk_param_type.downsampling_type.downsampling_type_selector}"' \
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != "NONE":
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} "${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}"' \
        #end if
        -p '--baq "${gatk_param_type.baq}" --baqGapOpenPenalty "${gatk_param_type.baq_gap_open_penalty}" ${gatk_param_type.use_original_qualities}' \
        -p '--defaultBaseQualities "${gatk_param_type.default_base_qualities}" --validation_strictness "${gatk_param_type.validation_strictness}"' \
        -p ' --interval_merging "${gatk_param_type.interval_merging}" ${gatk_param_type.disable_experimental_low_memory_sharding} ${gatk_param_type.non_deterministic_random_seed}' \
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == "file":
                -d "--read_group_black_list" "${rg_black_list.read_group_black_list_type.read_group_black_list}" "txt" "input_read_group_black_list_${rg_black_list_count}" \
            #else
                -p '--read_group_black_list "${rg_black_list.read_group_black_list_type.read_group_black_list}"' \
            #end if
        #end for
    #end if
    #if $reference_source.reference_source_selector == "history":
        -d "-R" "${reference_source.ref_file}" "${reference_source.ref_file.ext}" "gatk_input" \
    #end if
    ##end standard gatk options
    &gt;\$out 2&gt;\$err
##        #if str( $analysis_param_type.snpEff_rod_bind_type.snpEff_rod_bind_type_selector ) == 'set_snpEff':
##            -p '--annotation "SnpEff"'
##            -d "--snpEffFile:${analysis_param_type.snpEff_rod_bind_type.snpEff_rod_name},%(file_type)s" "${analysis_param_type.snpEff_rod_bind_type.snpEff_input_rod}" "${analysis_param_typ$
##        #else:
##            -p '--excludeAnnotation "SnpEff"'
##        #end if

  </configfile>
  </configfiles>
<tests>
      <test>
      </test>
  </tests>
<help>
SomaticIndelDetectorWalker

Tool for calling indels in Tumor-Normal paired sample mode; this tool supports single-sample mode as well, but this latter functionality is now superceded by UnifiedGenotyper.

Introduction

This is a simple, counts-and-cutoffs based tool for calling indels from aligned (preferrably MSA cleaned) sequencing data. Supported output formats are: BED format, extended verbose output (tab separated), and VCF. The latter two outputs include additional statistics such as mismatches and base qualitites around the calls, read strandness (how many forward/reverse reads support ref and indel alleles) etc. It is highly recommended to use these additional statistics to perform post-filtering of the calls as the tool is tuned for sensitivity (in other words it will attempt to "call" anything remotely reasonable based only on read counts and will generate all the additional metrics for the post-processing tools to make the final decision). The calls are performed by default from a matched tumor-normal pair of samples. In this case, two (sets of) input bam files must be specified using tagged -I command line arguments: normal and tumor bam(s) must be passed with -I:normal and -I:tumor arguments, respectively. Indels are called from the tumor sample and annotated as germline if even a weak evidence for the same indel, not necessarily a confident call, exists in the normal sample, or as somatic if normal sample has coverage at the site but no indication for an indel. Note that strictly speaking the calling is not even attempted in normal sample: if there is an indel in normal that is not detected/does not pass a threshold in tumor sample, it will not be reported. To make indel calls and associated metrics for a single sample, this tool can be run with --unpaired flag (input bam tagging is not required in this case, and tags are completely ignored if still used: all input bams will be merged on the fly and assumed to represent a single sample - this tool does not check for sample id in the read groups). Which (putative) calls will make it into the output file(s) is controlled by an expression/list of expressions passed with -filter flag: if any of the expressions evaluate to TRUE, the site will be discarded. Otherwise the putative call and all the associated statistics will be printed into the output. Expressions recognize the following variables(in paired-sample somatic mode variables are prefixed with T_ and N_ for Tumor and Normal, e.g. N_COV and T_COV are defined instead of COV): COV for coverage at the site, INDEL_F for fraction of reads supporting consensus indel at the site (wrt total coverage), INDEL_CF for fraction of reads with consensus indel wrt all reads with an indel at the site, CONS_CNT for the count of reads supporting the consensus indel at the site. Conventional arithmetic and logical operations are supported. For instance, N_COV&lt;4||T_COV&lt;6||T_INDEL_F&lt;0.3||T_INDEL_CF&lt;0.7 instructs the tool to only output indel calls with at least 30% observed allelic fraction and with consensus indel making at least 70% of all indel observations at the site, and only at the sites where tumor coverage and normal coverage are at least 6 and 4, respectively.

Input

Tumor and normal bam files (or single sample bam file(s) in --unpaired mode).

Output

Indel calls with associated metrics.

http://www.broadinstitute.org/gsa/gatkdocs/release/org_broadinstitute_sting_gatk_walkers_indels_SomaticIndelDetectorWalker.html
  
</help>

</tool>


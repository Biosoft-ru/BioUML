<tool id="gatk_variant_annotator" name="Variant Annotator" version="0.0.5">
  <description></description>
  <requirements>
      <requirement type="package" version="1.4">gatk</requirement>
      <requirement type="package">samtools</requirement>
  </requirements>
  <command>/bin/bash -v "$script" </command>
  <inputs>
    <conditional name="reference_source">
      <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
	<conditional name="vcf_source">
		<param name="vcf_selector" type="select" label="Source of VCF file">
			<option value="new">New File</option>
			<option value="build_in">Build In Databases</option>
		</param>
		<when value="new">
			<param name="input_variant" type="data" format="vcf" label="Variant file to annotate" help="-V,--variant &lt;variant&gt;"/>
		</when>
		<when value="build_in">
			<param name="input_variant" type="select" multiple="False" label="Choose VCF to annotate" help="-V,--variant &lt;variant&gt;" >
				<options from_data_table="gatk_vcf_files">
					<filter type="sort_by" column="1" />
				</options>
			</param>
		</when>
	</conditional>
        <param name="input_variant_bti" type="boolean" truevalue="-BTI variant" falsevalue="" label="Increase efficiency for small variant files." checked="False" help="--intervals"/>
        <param name="input_bam" type="data" format="bam" label="BAM file" optional="True" help="Not needed for all annotations. (-I,--input_file &amp;lt;input_file&amp;gt;)" >
          <!--validator type="unspecified_build" /-->
          <!-- validator type="dataset_metadata_in_data_table" table_name="gatk_picard_indexes" metadata_name="dbkey" metadata_column="dbkey" message="Sequences are not currently available for the specified build." /--> <!-- fixme!!! this needs to be a select -->
        </param>
        <param name="ref_file" type="select" label="Using reference genome" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;">
          <options from_data_table="gatk_picard_indexes">
            <!-- filter type="data_meta" key="dbkey" ref="input_variant" column="dbkey"/-->
          </options>
          <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <conditional name="vcf_source">
                <param name="vcf_selector" type="select" label="Source of VCF file">
                        <option value="new">New File</option>
                        <option value="build_in">Build In Databases</option>
                </param>
                <when value="new">
                        <param name="input_variant" type="data" format="vcf" label="Variant file to annotate" help="-V,--variant &lt;variant&gt;"/>
                </when>
                <when value="build_in">
                        <param name="input_variant" type="select" multiple="False" label="Choose VCF to annotate" help="-V,--variant &lt;variant&gt;" >
                                <options from_data_table="gatk_vcf_files">
                                        <filter type="sort_by" column="1" />
                                </options>
                        </param>
                </when>
        </conditional>
        <param name="input_variant_bti" type="boolean" truevalue="-BTI variant" falsevalue="" label="Increase efficiency for small variant files." checked="False" help="--intervals"/>
        <param name="input_bam" type="data" format="bam" label="BAM file" optional="True" help="Not needed for all annotations. (-I,--input_file &amp;lt;input_file&amp;gt;)" >
        </param>
        <param name="ref_file" type="data" format="fasta" label="Using reference file" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" />
      </when>
    </conditional>
    <conditional name="annotations_type">
      <param name="annotations_type_selector" type="select" label="Use all possible annotations">
        <option value="use_all_annotations">Use all</option>
        <option value="choose" selected="True">Use selected</option>
      </param>
      <when value="use_all_annotations">
          <!-- no extra options here -->
      </when>
      <when value="choose">
        <param name="annotations" type="select" multiple="True" display="checkboxes" label="Annotations to apply" help="-A,--annotation &amp;lt;annotation&amp;gt;" >
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk_annotations">
            <filter type="multiple_splitter" column="tools_valid_for" separator=","/>
            <filter type="static_value" value="VariantAnnotator" column="tools_valid_for"/>
          </options>
        </param>
      </when>
    </conditional>
    
    <repeat name="additional_annotations" title="Additional annotation" help="-A,--annotation &amp;lt;annotation&amp;gt;">
      <param name="additional_annotation_name" type="text" value="" label="Annotation name" />
    </repeat>
    
    <repeat name="comp_rod_bind" title="Binding for reference-ordered comparison data" help="-comp,--comp &amp;lt;comp&amp;gt;">
      <param name="comp_input_rod" type="data" format="vcf" label="ROD file" />
      <param name="comp_rod_name" type="text" value="Unnamed" label="ROD Name"/>
    </repeat>
    
    <conditional name="setDbSNP">
      <param name="cond" type="select" label="Set dbSNP">
          <option value="yes">yes</option>
          <option value="no">no</option>
      </param>
      <when value="no" />
      <when value="yes" >
        <param name="dbSNP" type="select" multiple="False" label="Provide a dbSNP reference-ordered data file" help="-D,--dbsnp" >
          <options from_data_table="gatk_vcf_files">
            <filter type="sort_by" column="1" />
          </options>
        </param>
      </when>
    </conditional>
    
    <repeat name="resource_rod_bind" title="Binding for reference-ordered resource data" help="-resource,--resource &amp;lt;resource&amp;gt;">
      <param name="resource_input_rod" type="data" format="vcf" label="ROD file" />
      <param name="resource_rod_name" type="text" value="Unnamed" label="ROD Name"/>
    </repeat>
    
    <conditional name="snpEff_rod_bind_type">
      <param name="snpEff_rod_bind_type_selector" type="select" label="Provide a snpEff reference-ordered data file" help="-snpEffFile,--snpEffFile &amp;lt;snpEffFile&amp;gt;">
        <option value="set_snpEff">Set snpEff</option>
        <option value="exclude_snpEff" selected="True">Don't set snpEff</option>
      </param>
      <when value="exclude_snpEff">
        <!-- Do nothing here -->
      </when>
      <when value="set_snpEff">
        <param name="snpEff_input_rod" type="data" format="vcf" label="ROD file" />
        <param name="snpEff_rod_name" type="hidden" value="snpEff" label="ROD Name"/>
      </when>
    </conditional>
    
    <repeat name="expressions" title="Expression" help="-E,--expression &amp;lt;expression&amp;gt;">
      <param name="expression" type="text" value="" label="Expression"/>
    </repeat>
    
    <param name="numThreads" type="integer" label="Number of threads" value="60" />
    <conditional name="gatk_param_type">
      <param name="gatk_param_type_selector" type="select" label="Basic or Advanced GATK options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat name="pedigree" title="Pedigree file" help="-ped,--pedigree &amp;lt;pedigree&amp;gt;">
            <param name="pedigree_file" type="data" format="txt" label="Pedigree files for samples"/>
        </repeat>
        <repeat name="pedigree_string_repeat" title="Pedigree string" help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;">
            <param name="pedigree_string" type="text" value="" label="Pedigree string for samples"/>
        </repeat>
        <param name="pedigree_validation_type" type="select" label="How strict should we be in validating the pedigree information" help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter" help="-rf,--read_filter &amp;lt;read_filter&amp;gt;">
            <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option value="MaxReadLength" selected="True">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <!-- no extra options -->
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer" value="10" label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer" value="1000000" label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" value="76" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text" value="" label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param name="readName" type="text" value="" label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean" truevalue="--filterPositive" falsevalue="" label="Discard reads on the forward strand"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer" value="60" label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text" value="" label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer" value="76" label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat name="input_interval_repeat" title="Operate on Genomic intervals" help="-L,--intervals &amp;lt;intervals&amp;gt;">
          <param name="input_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>
        <repeat name="input_exclude_interval_repeat" title="Exclude Genomic intervals" help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;">
          <param name="input_exclude_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>
        
        <param name="interval_set_rule" type="select" label="Interval set rule" help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;">
          <option value="UNION" selected="True">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param name="downsampling_type_selector" type="select" label="Type of reads downsampling to employ at a given locus" help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;">
            <option value="NONE" selected="True">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param name="baq" type="select" label="Type of BAQ calculation to apply in the engine" help="-baq,--baq &amp;lt;baq&amp;gt;">
          <option value="OFF" selected="True">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param name="baq_gap_open_penalty" type="float" label="BAQ gap open penalty (Phred Scaled)" value="40" help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" />
        <param name="use_original_qualities" type="boolean" truevalue="--useOriginalQualities" falsevalue="" label="Use the original base quality scores from the OQ tag" help="-OQ,--useOriginalQualities" />
        <param name="default_base_qualities" type="integer" label="Value to be used for all base quality scores, when some are missing" value="-1" help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"/>
        <param name="validation_strictness" type="select" label="How strict should we be with validation" help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param name="interval_merging" type="select" label="Interval merging rule" help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;">
          <option value="ALL" selected="True">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat name="read_group_black_list_repeat" title="Read group black list" help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;">
          <conditional name="read_group_black_list_type">
            <param name="read_group_black_list_type_selector" type="select" label="Type of reads read group black list">
              <option value="file" selected="True">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param name="read_group_black_list" type="data" format="txt" label="Read group black list file" />
            </when>
            <when value="text">
              <param name="read_group_black_list" type="text" value="tag:string" label="Read group black list tag:string" />
            </when>
          </conditional>
        </repeat>
        
        <param name="disable_experimental_low_memory_sharding" type="boolean" truevalue="--disable_experimental_low_memory_sharding" falsevalue="" label="Disable experimental low-memory sharding functionality." checked="False" help="--disable_experimental_low_memory_sharding"/>
        <param name="non_deterministic_random_seed" type="boolean" truevalue="--nonDeterministicRandomSeed" falsevalue="" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" checked="False"  help="-ndrs,--nonDeterministicRandomSeed"/>
        
      </when>
    </conditional>
    
    <param name="annotation_group" type="select" multiple="True" display="checkboxes" label="annotation interfaces/groups to apply to variant calls" help="-G,--group &amp;lt;group&amp;gt;">
      <option value="RodRequiringAnnotation">RodRequiringAnnotation</option>
      <option value="Standard">Standard</option>
      <option value="Experimental">Experimental</option>
      <option value="WorkInProgress">WorkInProgress</option>
      <option value="RankSumTest">RankSumTest</option>
    </param>
    <param name="family_string" type="text" value="" label="Family String" help="--family_string"/>
    <param name="mendel_violation_genotype_quality_threshold" type="float" value="0.0" label="genotype quality treshold in order to annotate mendelian violation ratio." help="-mvq,--MendelViolationGenotypeQualityThreshold &amp;lt;MendelViolationGenotypeQualityThreshold&amp;gt;"/>
    <param name="exclude_annotations" type="select" multiple="True" display="checkboxes" label="Annotations to exclude" help="-XA,--excludeAnnotation &amp;lt;excludeAnnotation&amp;gt;" >
      <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
      <options from_data_table="gatk_annotations">
        <filter type="multiple_splitter" column="tools_valid_for" separator=","/>
        <filter type="static_value" value="VariantAnnotator" column="tools_valid_for"/>
      </options>
    </param>
    
  </inputs>
  <outputs>
    <data format="vcf" name="output_vcf" label="${tool.name} on ${on_string} (Variant File)" />
    <data format="txt" name="output_log" label="${tool.name} on ${on_string} (log)" />
  </outputs>

<configfiles>
    <configfile name="script">#!/bin/bash -v
DEST=`dirname ${output_log}`
cp gatk_wrapper.py \$DEST
cd \$DEST
err="err.pipe"  
out="out.pipe"
mkfifo "\$err" "\$out"
trap 'cat ${ output_log }.err &gt;&gt; ${ output_log }; echo "output-log: \n" &gt;&gt; ${ output_log }; cat ${ output_log }.out &gt;&gt; ${ output_log }; rm -f "\$err"  "\$out"' EXIT
tee ${ output_log }.err &lt; "\$err" &gt;&amp;2 &amp;
tee ${ output_log }.out &lt; "\$out" &gt;&amp;1 &amp; 


/usr/bin/python gatk_wrapper.py \
   --max_jvm_heap_fraction "1" \
   ### --stdout "${output_log}" \ ### we are checking out end std in this script
    -p 'java -jar "${GALAXY_DATA_INDEX_DIR}/shared/jars/gatk/GenomeAnalysisTK.jar"' \
    ##-p '--list' \
    -p '-T "VariantAnnotator" ' \
   #if str( $reference_source.input_bam ) != "":
       -d "-I" "${reference_source.input_bam}" "${reference_source.input_bam.ext}" "gatk_input" \
       #if str( $reference_source.input_bam.metadata.bam_index ) != "":
           -d "" "${reference_source.input_bam.metadata.bam_index}" "bam_index" "gatk_input" \
##hardcode galaxy ext type as bam_index
       #end if
   #end if
   #if str( $reference_source.vcf_source.vcf_selector ) == "new":
	-d "--variant" "${reference_source.vcf_source.input_variant}" "${reference_source.vcf_source.input_variant.ext}" "input_variant" \
   #end if
   #if str( $reference_source.vcf_source.vcf_selector ) == "build_in":
	-p ' --variant "${reference_source.vcf_source.input_variant.fields.path}" ' \
   #end if
    ##-et "NO_ET" ##ET no phone home (From ivan: I disable it because it requires private key file from broad institute)
    ##-log "${output_log}" ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != "history":
        -p ' -R "${reference_source.ref_file.fields.path}" ' \
    #end if
    -p ' -o "${output_vcf}" ' \
    #if str( $annotations_type.annotations_type_selector ) == "use_all_annotations":
       -p ' --useAllAnnotations ' \
    #else:
        #if $annotations_type.annotations:
            ##for $annotation in str( $annotations_type.annotations.fields.gatk_value ).split( ',' ):
	    #for $annotation in $annotations_type.annotations.fields.gatk_value :
                -p ' --annotation "${annotation}" ' \
            #end for
        #end if
    #end if
    #if $exclude_annotations:
        ##for $annotation in str( $exclude_annotations.fields.gatk_value ).split( ',' ):
	#for $annotation in $exclude_annotations.fields.gatk_value :
            -p ' --excludeAnnotation "${annotation}" ' \
        #end for
    #end if
    #for $additional_annotation in $additional_annotations:
        -p ' --annotation "${additional_annotation.additional_annotation_name}" ' \
    #end for
    #if str( $reference_source.input_variant_bti ) !="" :
        #if str( $reference_source.vcf_source.vcf_selector ) == "new":
             -d "--intervals" "${reference_source.vcf_source.input_variant}" "${reference_source.vcf_source.input_variant.ext}" "input_variant_bti" \
        #end if
        #if str( $reference_source.vcf_source.vcf_selector ) == "build_in":
           -p ' --intervals "${reference_source.vcf_source.input_variant.fields.path}" ' \
        #end if
    #end if
    #for $rod_binding in $comp_rod_bind:
        -d "--comp:${rod_binding.comp_rod_name},%(file_type)s" "${rod_binding.comp_input_rod}" "${rod_binding.comp_input_rod.ext}" "input_comp_${rod_binding.comp_rod_name}" \
    #end for
    #if str( $setDbSNP.cond ) == 'yes':
        -d "--dbsnp:${setDbSNP.dbSNP.fields.name},%(file_type)s" "${setDbSNP.dbSNP.fields.path}" "vcf" "input_dbsnp_${setDbSNP.dbSNP.fields.name}" \
    #end if
    #for $rod_binding in $resource_rod_bind:
        -d "--resource:${rod_binding.resource_rod_name},%(file_type)s" "${rod_binding.resource_input_rod}" "${rod_binding.resource_input_rod.ext}" "input_resource_${rod_binding.resource_rod_name}" \
    #end for
    #if str( $snpEff_rod_bind_type.snpEff_rod_bind_type_selector ) == 'set_snpEff':
        -p '--annotation "SnpEff"' \
        -d "--snpEffFile:${snpEff_rod_bind_type.snpEff_rod_name},%(file_type)s" "${snpEff_rod_bind_type.snpEff_input_rod}" "${snpEff_rod_bind_type.snpEff_input_rod.ext}" "input_snpEff_${snpEff_rod_bind_type.snpEff_rod_name}" \
    #else:
        -p '--excludeAnnotation "SnpEff"' \
    #end if
    #for $expression in $expressions:
        -p '--expression "${expression.expression}"' \
    #end for
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == "advanced":
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree "${pedigree.pedigree_file}"' \
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString "${pedigree_string.pedigree_string}"' \
        #end for
        -p '--pedigreeValidationType "${gatk_param_type.pedigree_validation_type}" ' \
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter "${read_filter.read_filter_type.read_filter_type_selector}" ' \
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ "__current_case__", "read_filter_type_selector" ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        -p ' ${param} ' \
                    #else:
                        -p ' --${name} "${param}" ' \
                    #end if
                #end if
            #end for
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d "--intervals" "${input_intervals.input_intervals}" "${input_intervals.input_intervals.ext}" "input_intervals_${interval_count}" \
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d "--excludeIntervals" "${input_intervals.input_exclude_intervals}" "${input_intervals.input_exclude_intervals.ext}" "input_exlude_intervals_${interval_count}" \
        #end for
        -p '--interval_set_rule "${gatk_param_type.interval_set_rule}"' \
        -p '--downsampling_type "${gatk_param_type.downsampling_type.downsampling_type_selector}"' \
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != "NONE":
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} "${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}"' \
        #end if
        -p '--baq "${gatk_param_type.baq}" --baqGapOpenPenalty "${gatk_param_type.baq_gap_open_penalty}" ${gatk_param_type.use_original_qualities} ' \
        -p ' --defaultBaseQualities "${gatk_param_type.default_base_qualities}" --validation_strictness "${gatk_param_type.validation_strictness}" ' \
        -p ' --interval_merging "${gatk_param_type.interval_merging}" ${gatk_param_type.disable_experimental_low_memory_sharding} ${gatk_param_type.non_deterministic_random_seed} ' \
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == "file":
                -d "--read_group_black_list" "${rg_black_list.read_group_black_list_type.read_group_black_list}" "txt" "input_read_group_black_list_${rg_black_list_count}" \
            #else
                -p '--read_group_black_list "${rg_black_list.read_group_black_list_type.read_group_black_list}"' \
            #end if
        #end for
    #end if
    #if str( $reference_source.reference_source_selector ) == "history":
        -d "-R" "${reference_source.ref_file}" "${reference_source.ref_file.ext}" "gatk_input" \
    #end if
    ##end standard gatk options
    #if str( $annotation_group ) != "None":
        #for $group in str( $annotation_group ).split( ',' ):
            -p ' --group "${group}" ' \
        #end for
    #end if
    #if str( $family_string ) != "":
        -p '--family_string "${family_string}" ' \
    #end if
    -p '--MendelViolationGenotypeQualityThreshold "${mendel_violation_genotype_quality_threshold}" ' \
    &gt;\$out 2&gt;\$err

  </configfile>
  </configfiles>


  <tests>
      <test>
          <param name="reference_source_selector" value="history" />
          <param name="ref_file" value="phiX.fasta" ftype="fasta" />
          <param name="input_bam" value="gatk/gatk_table_recalibration/gatk_table_recalibration_out_1.bam" ftype="bam" />
          <param name="input_variant" value="gatk/gatk_unified_genotyper/gatk_unified_genotyper_out_1.vcf" ftype="vcf" />
          <param name="input_variant_bti" />
          <param name="annotations_type_selector" value="choose" />
          <param name="annotations" value="AlleleBalance,BaseQualityRankSumTest,DepthOfCoverage,HomopolymerRun,MappingQualityRankSumTest,MappingQualityZero,QualByDepth,RMSMappingQuality,SpanningDeletions,HaplotypeScore" />
          <param name="additional_annotations" value="0" />
          <param name="dbsnp_rod_bind_type_selector" value="set_dbsnp" />
          <param name="dbsnp_input_rod" value="gatk/fake_phiX_variant_locations.vcf" ftype="vcf" />
          <param name="snpEff_rod_bind_type_selector" value="exclude_snpEff" />
          <param name="gatk_param_type_selector" value="basic" />
          <output name="output_vcf" file="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf" lines_diff="4" /> 
          <output name="output_log" file="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.log.contains" compare="contains" />
          <param name="comp_rod_bind" value="0" />
          <param name="resource_rod_bind" value="0" />
          <param name="expressions" value="0" />
          <!-- <param name="annotation_group" /> -->
      </test>
  </tests>
  <help>
**What it does**

Annotates variant calls with context information.  Users can specify which of the available annotations to use.

For more information on using the VariantAnnotator, see this `tool specific page &lt;http://www.broadinstitute.org/gsa/wiki/index.php/VariantAnnotator&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Best_Practice_Variant_Detection_with_the_GATK_v3&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Frequently_Asked_Questions&gt;`_.

------


**Inputs**

GenomeAnalysisTK: VariantAnnotator accepts a variant input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Input_files_for_the_GATK&gt;`_ for details on GATK file formats.

-------

**Settings**::


 sampleName           The sample (NA-ID) corresponding to the variant input (for non-VCF input only)
 annotation           One or more specific annotations to apply to variant calls
 group                One or more classes/groups of annotations to apply to variant calls
 expression           One or more specific expressions to apply to variant calls; see documentation for more details
 useAllAnnotations    Use all possible annotations (not for the faint of heart)

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </help>
</tool>

<tool id="gatk_variant_recalibrator" name="Variant Recalibrator" version="0.0.4">
  <description></description>
  <requirements>
      <requirement type="package" version="1.4">gatk</requirement>
  </requirements>
  <command>/bin/bash -v "$script" </command>
  <inputs>
    <conditional name="reference_source">
      <param name="reference_source_selector" type="select" label="Choose the source for the reference list">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <repeat name="variants" title="Variant" min="1" help="-input,--input &amp;lt;input&amp;gt;">
          <param name="input_variants" type="data" format="vcf" label="Variant file to recalibrate" />
        </repeat>
        <param name="ref_file" type="select" label="Using reference genome" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;">
          <options from_data_table="gatk_picard_indexes">
          <!--  <filter type="data_meta" key="dbkey" ref="variants[0].input_variants" column="dbkey"/> -->
          </options>
          <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <repeat name="variants" title="Variant" min="1" help="-input,--input &amp;lt;input&amp;gt;">
          <param name="input_variants" type="data" format="vcf" label="Variant file to recalibrate" />
        </repeat>
        <param name="ref_file" type="data" format="fasta" label="Using reference file" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" />
      </when>
    </conditional>
    
    <repeat name="rod_bind" title="Binding for reference-ordered data" help="-resource,--resource &amp;lt;resource&amp;gt;">
        <conditional name="rod_bind_type">
          <param name="rod_bind_type_selector" type="select" label="Binding Type">
            <option value="dbsnp" selected="True">dbSNP</option>
            <option value="variant">Variants</option>
            <option value="snps">SNPs</option>
            <option value="indels">INDELs</option>
            <option value="hapmap">HapMap</option>
            <option value="omni">OMNI</option>
            <option value="mask">Mask</option>
            <option value="custom">Custom</option>
            <option value="comp">Comp</option>
          </param>
          <when value="variant">
              <param name="input_rod" type="data" format="vcf" label="Variant ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="comp">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <param name="custom_rod_name" type="text" value="Unnamed" label="ROD Name"/>
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="mask">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>          
          <when value="dbsnp">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="snps">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="hapmap">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="omni">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="indels">
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
          <when value="custom">
              <param name="custom_rod_name" type="text" value="Unknown" label="ROD Name"/>
              <param name="input_rod" type="data" format="vcf" label="ROD file" />
              <conditional name="rod_training_type">
                  <param name="rod_training_type_selector" type="select" label="Use as training/truth/known sites">
                      <option value="is_training_truth_known">Set training/truth/known sites</option>
                      <option value="not_training_truth_known" selected="True">Don't Set options</option>
                  </param>
                  <when value="not_training_truth_known">
                      <!-- do nothing here -->
                  </when>
                  <when value="is_training_truth_known">
                      <param name="known" type="boolean" label="Is Known Site" truevalue="true" falsevalue="false"/>
                      <param name="training" type="boolean" label="Is Training Site" truevalue="true" falsevalue="false"/>
                      <param name="truth" type="boolean" label="Is Truth Site" truevalue="true" falsevalue="false"/>
                      <param name="bad" type="boolean" label="Is Bad Site" truevalue="true" falsevalue="false"/>
                      <param name="prior" type="float" label="prior probability of being true" value="12.0"/>
                  </when>
              </conditional>
          </when>
        </conditional>
    </repeat>
    
    <param name="annotations" type="select" multiple="True" display="checkboxes" label="annotations which should used for calculations" help="-an,--use_annotation &amp;lt;use_annotation&amp;gt;">
      <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
      <options from_data_table="gatk_annotations">
        <filter type="multiple_splitter" column="tools_valid_for" separator=","/>
        <filter type="static_value" value="VariantRecalibrator" column="tools_valid_for"/>
      </options>
    </param>
    
    <repeat name="additional_annotations" title="Additional annotation" help="-an,--use_annotation &amp;lt;use_annotation&amp;gt;">
      <param name="additional_annotation_name" type="text" value="" label="Annotation name" />
    </repeat>
    
    <param name="mode" type="select" label="Recalibration mode" help="-mode,--mode &amp;lt;mode&amp;gt;">
        <option value="SNP" selected="True">SNP</option>
        <option value="INDEL">INDEL</option>
        <option value="BOTH">BOTH</option>
    </param>
    
    <conditional name="gatk_param_type">
      <param name="gatk_param_type_selector" type="select" label="Basic or Advanced GATK options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat name="pedigree" title="Pedigree file" help="-ped,--pedigree &amp;lt;pedigree&amp;gt;">
            <param name="pedigree_file" type="data" format="txt" label="Pedigree files for samples"/>
        </repeat>
        <repeat name="pedigree_string_repeat" title="Pedigree string" help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;">
            <param name="pedigree_string" type="text" value="" label="Pedigree string for samples"/>
        </repeat>
        <param name="pedigree_validation_type" type="select" label="How strict should we be in validating the pedigree information" help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter" help="-rf,--read_filter &amp;lt;read_filter&amp;gt;">
            <conditional name="read_filter_type">
              <param name="read_filter_type_selector" type="select" label="Read Filter Type">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option value="MaxReadLength" selected="True">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <!-- no extra options -->
              </when>
              <when value="MappingQuality">
                  <param name="min_mapping_quality_score" type="integer" value="10" label="Minimum read mapping quality required to consider a read for calling"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param name="maxInsertSize" type="integer" value="1000000" label="Discard reads with insert size greater than the specified value"/>
              </when>
              <when value="MaxReadLength">
                  <param name="maxReadLength" type="integer" value="76" label="Max Read Length"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param name="PLFilterName" type="text" value="" label="Discard reads with RG:PL attribute containing this string"/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param name="readName" type="text" value="" label="Filter out all reads except those with this read name"/>
              </when>
              <when value="ReadStrand">
                  <param name="filterPositive" type="boolean" truevalue="--filterPositive" falsevalue="" label="Discard reads on the forward strand"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param name="default_mapping_quality" type="integer" value="60" label="Default read mapping quality to assign to all reads"/>
              </when>
              <when value="Sample">
                  <param name="sample_to_keep" type="text" value="" label="The name of the sample(s) to keep, filtering out all others"/>
              </when>
              <when value="SingleReadGroup">
                  <param name="read_group_to_keep" type="integer" value="76" label="The name of the read group to keep, filtering out all others"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat name="input_interval_repeat" title="Operate on Genomic intervals" help="-L,--intervals &amp;lt;intervals&amp;gt;">
          <param name="input_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>
        <repeat name="input_exclude_interval_repeat" title="Exclude Genomic intervals" help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;">
          <param name="input_exclude_intervals" type="data" format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" />
        </repeat>
        
        <param name="interval_set_rule" type="select" label="Interval set rule" help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;">
          <option value="UNION" selected="True">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param name="downsampling_type_selector" type="select" label="Type of reads downsampling to employ at a given locus" help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;">
            <option value="NONE" selected="True">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param name="downsample_to_type_selector" type="select" label="Downsample method">
                      <option value="downsample_to_fraction" selected="True">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param name="downsample_to_value" type="float" label="Fraction [0.0-1.0] of reads to downsample to" value="1" min="0" max="1" help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param name="downsample_to_value" type="integer" label="Coverage to downsample to at any given locus" value="0" help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param name="baq" type="select" label="Type of BAQ calculation to apply in the engine" help="-baq,--baq &amp;lt;baq&amp;gt;">
          <option value="OFF" selected="True">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param name="baq_gap_open_penalty" type="float" label="BAQ gap open penalty (Phred Scaled)" value="40" help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" />
        <param name="use_original_qualities" type="boolean" truevalue="--useOriginalQualities" falsevalue="" label="Use the original base quality scores from the OQ tag" help="-OQ,--useOriginalQualities" />
        <param name="default_base_qualities" type="integer" label="Value to be used for all base quality scores, when some are missing" value="-1" help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;"/>
        <param name="validation_strictness" type="select" label="How strict should we be with validation" help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;">
          <option value="STRICT" selected="True">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param name="interval_merging" type="select" label="Interval merging rule" help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;">
          <option value="ALL" selected="True">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat name="read_group_black_list_repeat" title="Read group black list" help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;">
          <conditional name="read_group_black_list_type">
            <param name="read_group_black_list_type_selector" type="select" label="Type of reads read group black list">
              <option value="file" selected="True">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param name="read_group_black_list" type="data" format="txt" label="Read group black list file" />
            </when>
            <when value="text">
              <param name="read_group_black_list" type="text" value="tag:string" label="Read group black list tag:string" />
            </when>
          </conditional>
        </repeat>
        
        <param name="disable_experimental_low_memory_sharding" type="boolean" truevalue="--disable_experimental_low_memory_sharding" falsevalue="" label="Disable experimental low-memory sharding functionality." checked="False" help="--disable_experimental_low_memory_sharding"/>
        <param name="non_deterministic_random_seed" type="boolean" truevalue="--nonDeterministicRandomSeed" falsevalue="" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" checked="False"  help="-ndrs,--nonDeterministicRandomSeed"/>
        
      </when>
    </conditional>
    
    <conditional name="analysis_param_type">
      <param name="analysis_param_type_selector" type="select" label="Basic or Advanced Analysis options">
        <option value="basic" selected="True">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <param name="max_gaussians" type="integer" label="maximum number of Gaussians to try during variational Bayes Algorithm" value="10" help="-mG,--maxGaussians &amp;lt;maxGaussians&amp;gt;"/>
        <param name="max_iterations" type="integer" label="maximum number of maximum number of VBEM iterations to be performed in variational Bayes Algorithm" value="100" help="-mI,--maxIterations &amp;lt;maxIterations&amp;gt;"/>
        <param name="num_k_means" type="integer" label="number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model" value="30" help="-nKM,--numKMeans &amp;lt;numKMeans&amp;gt;"/>
        <param name="std_threshold" type="float" label="If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model." value="8.0" help="-std,--stdThreshold &amp;lt;stdThreshold&amp;gt;"/>
        <param name="qual_threshold" type="float" label="If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model." value="80.0" help="-qual,--qualThreshold &amp;lt;qualThreshold&amp;gt;"/>
        <param name="shrinkage" type="float" label="shrinkage parameter in variational Bayes algorithm" value="1.0" help="-shrinkage,--shrinkage &amp;lt;shrinkage&amp;gt;"/>
        <param name="dirichlet" type="float" label="dirichlet parameter in variational Bayes algorithm" value="0.001" help="-dirichlet,--dirichlet &amp;lt;dirichlet&amp;gt;"/>
        <param name="prior_counts" type="float" label="number of prior counts to use in variational Bayes algorithm" value="20.0" help="-priorCounts,--priorCounts &amp;lt;priorCounts&amp;gt;"/>
        <conditional name="bad_variant_selector">
          <param name="bad_variant_selector_type" type="select" label="How to specify bad variants">
            <option value="percent" selected="True">Percent</option>
            <option value="min_num">Number</option>
          </param>
          <when value="percent">
            <param name="percent_bad_variants" type="float" label="percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent." value="0.03" help="-percentBad,--percentBadVariants &amp;lt;percentBadVariants&amp;gt;"/>
          </when>
          <when value="min_num">
            <param name="min_num_bad_variants" type="integer" label="minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad arugment if necessary" value="2000" help="-minNumBad,--minNumBadVariants &amp;lt;minNumBadVariants&amp;gt;"/>
          </when>
        </conditional>
        <param name="target_titv" type="float" label="expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!" value="2.15" help="-titv,--target_titv &amp;lt;target_titv&amp;gt;"/>
        <param name="ts_tranche" type="text" label="levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent)" value="100.0, 99.9, 99.0, 90.0" help="-tranche,--TStranche &amp;lt;TStranche&amp;gt;"/>
        <repeat name="ignore_filters" title="Ignore Filter" help="-ignoreFilter,--ignore_filter &amp;lt;ignore_filter&amp;gt;">
          <conditional name="ignore_filter_type">
            <param name="ignore_filter_type_selector" type="select" label="Filter Type">
              <option value="HARD_TO_VALIDATE">HARD_TO_VALIDATE</option>
              <option value="LowQual" >LowQual</option>
              <option value="custom" selected="True">Other</option>
            </param>
            <when value="custom">
              <param name="filter_name" type="text" value="" label="Filter name"/>
            </when>
            <when value="HARD_TO_VALIDATE" />
            <when value="LowQual" />
          </conditional>
        </repeat>
        <param name="ts_filter_level" type="float" label="truth sensitivity level at which to start filtering, used here to indicate filtered variants in plots" value="99.0" help="-ts_filter_level,--ts_filter_level &amp;lt;ts_filter_level&amp;gt;"/>
      </when>
    </conditional>
	<param name="numThreads" type="integer" label="Number of threads" value="60" />
  </inputs>
  <outputs>
    <data format="gatk_recal" name="output_recal" label="${tool.name} on ${on_string} (Recalibration File)" />
    <data format="gatk_tranche" name="output_tranches" label="${tool.name} on ${on_string} (Tranches File)" />
    <data format="txt" name="output_rscript" label="${tool.name} on ${on_string} (RScript File)" />
    <data format="pdf" name="output_tranches_pdf" label="${tool.name} on ${on_string} (PDF File)" />
    <data format="txt" name="output_log" label="${tool.name} on ${on_string} (log)" />
  </outputs>
<configfiles>
    <configfile name="script">#!/bin/bash -v
GATK_XML=`pwd`
DEST=`dirname ${output_log}`
cp gatk_wrapper.py \$DEST
cd \$DEST
err="err.pipe"  
out="out.pipe"
mkfifo "\$err" "\$out"
trap 'cat ${ output_log }.err &gt;&gt; ${ output_log }; echo "output-log: \n" &gt;&gt; ${ output_log }; cat ${ output_log }.out &gt;&gt; ${ output_log }; rm -f "\$err"  "\$out"' EXIT
tee ${ output_log }.err &lt; "\$err" &gt;&amp;2 &amp;
tee ${ output_log }.out &lt; "\$out" &gt;&amp;1 &amp;

\$GATK_XML/gatk_wrapper.py \
   --max_jvm_heap_fraction "1" \
   #### --stdout "${output_log}"
   #for $var_count, $variant in enumerate( $reference_source.variants ):
      -d "--input:input_${var_count},%(file_type)s" "${variant.input_variants}" "${variant.input_variants.ext}" "input_variants_${var_count}" \
   #end for
   -p 'java -jar "${GALAXY_DATA_INDEX_DIR}/shared/jars/gatk/GenomeAnalysisTK.jar" -T "VariantRecalibrator" --num_threads $numThreads ' \
    ###-et "NO_ET" ##ET no phone home
    ##-log "${output_log}" ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != "history":
        -p '-R "${reference_source.ref_file.fields.path}" ' \
    #end if
    -p ' --recal_file "${output_recal}" --tranches_file "${output_tranches}" --rscript_file "${output_rscript}" ' \
    #set $rod_binding_names = dict()
    #for $rod_binding in $rod_bind:
        #if str( $rod_binding.rod_bind_type.rod_bind_type_selector ) == 'custom':
            #set $rod_bind_name = $rod_binding.rod_bind_type.custom_rod_name
        #elif str( $rod_binding.rod_bind_type.rod_bind_type_selector ) == 'comp':
            #set $rod_bind_name = "comp" + $rod_binding.rod_bind_type.custom_rod_name
        #else
            #set $rod_bind_name = $rod_binding.rod_bind_type.rod_bind_type_selector
        #end if
        #set $rod_binding_names[$rod_bind_name] = $rod_binding_names.get( $rod_bind_name, -1 ) + 1
        #if $rod_binding.rod_bind_type.rod_training_type.rod_training_type_selector == "not_training_truth_known":
            -d "--resource:${rod_bind_name},%(file_type)s" "${rod_binding.rod_bind_type.input_rod}" "${rod_binding.rod_bind_type.input_rod.ext}" "input_${rod_bind_name}_${rod_binding_names[$rod_bind_name]}" \
        #else:
            -d "--resource:${rod_bind_name},%(file_type)s,known=${rod_binding.rod_bind_type.rod_training_type.known},training=${rod_binding.rod_bind_type.rod_training_type.training},truth=${rod_binding.rod_bind_type.rod_training_type.truth},bad=${rod_binding.rod_bind_type.rod_training_type.bad},prior=${rod_binding.rod_bind_type.rod_training_type.prior}" "${rod_binding.rod_bind_type.input_rod}" "${rod_binding.rod_bind_type.input_rod.ext}" "input_${rod_bind_name}_${rod_binding_names[$rod_bind_name]}" \
        #end if
    #end for
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == "advanced":
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree "${pedigree.pedigree_file}"' \
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString "${pedigree_string.pedigree_string}"' \
        #end for
        -p '--pedigreeValidationType "${gatk_param_type.pedigree_validation_type}"' \
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter "${read_filter.read_filter_type.read_filter_type_selector}" ' \
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ "__current_case__", "read_filter_type_selector" ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        -p ' ${param} ' \
                    #else:
                        -p ' --${name} "${param}" ' \
                    #end if
                #end if
            #end for
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d "--intervals" "${input_intervals.input_intervals}" "${input_intervals.input_intervals.ext}" "input_intervals_${interval_count}" \
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d "--excludeIntervals" "${input_intervals.input_exclude_intervals}" "${input_intervals.input_exclude_intervals.ext}" "input_exlude_intervals_${interval_count}" \
        #end for
        -p '--interval_set_rule "${gatk_param_type.interval_set_rule}"' \
        -p '--downsampling_type "${gatk_param_type.downsampling_type.downsampling_type_selector}"' \
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != "NONE":
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} "${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}"' \
        #end if
        -p ' --baq "${gatk_param_type.baq}" --baqGapOpenPenalty "${gatk_param_type.baq_gap_open_penalty}" ${gatk_param_type.use_original_qualities} ' \
        -p ' --defaultBaseQualities "${gatk_param_type.default_base_qualities}" --validation_strictness "${gatk_param_type.validation_strictness}" ' \
        -p ' --interval_merging "${gatk_param_type.interval_merging}" ${gatk_param_type.disable_experimental_low_memory_sharding} ${gatk_param_type.non_deterministic_random_seed} ' \
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == "file":
                -d "--read_group_black_list" "${rg_black_list.read_group_black_list_type.read_group_black_list}" "txt" "input_read_group_black_list_${rg_black_list_count}" \
            #else
                -p '--read_group_black_list "${rg_black_list.read_group_black_list_type.read_group_black_list}"' \
            #end if
        #end for
    #end if
    #if str( $reference_source.reference_source_selector ) == "history":
        -d "-R" "${reference_source.ref_file}" "${reference_source.ref_file.ext}" "gatk_input" \
    #end if
    ##end standard gatk options
    ##start analysis specific options
    #if str( $annotations ) != "None":
        ###for $annotation in str( $annotations.fields.gatk_value ).split( ',' ):
        #for $annotation in $annotations.fields.gatk_value :
            -p ' --use_annotation "${annotation}" ' \
        #end for
    #end if
    #for $additional_annotation in $additional_annotations:
        -p ' --use_annotation "${additional_annotation.additional_annotation_name}" ' \
    #end for
    -p ' --mode "${mode}" ' \
    #if $analysis_param_type.analysis_param_type_selector == "advanced":
        -p ' --maxGaussians "${analysis_param_type.max_gaussians}" --maxIterations "${analysis_param_type.max_iterations}" ' \
        -p ' --numKMeans "${analysis_param_type.num_k_means}" --stdThreshold "${analysis_param_type.std_threshold}" ' \
        -p ' --qualThreshold "${analysis_param_type.qual_threshold}" --shrinkage "${analysis_param_type.shrinkage}" ' \
        -p ' --dirichlet "${analysis_param_type.dirichlet}" --priorCounts "${analysis_param_type.prior_counts}" ' \
        #if str( $analysis_param_type.bad_variant_selector.bad_variant_selector_type ) == 'percent':
           -p ' --percentBadVariants "${analysis_param_type.bad_variant_selector.percent_bad_variants}" ' \
        #else:
            -p ' --minNumBadVariants "${analysis_param_type.bad_variant_selector.min_num_bad_variants}" ' \
        #end if
        -p '--target_titv "${analysis_param_type.target_titv}" ' \
        #for $tranche in [ $tranche.strip() for $tranche in str( $analysis_param_type.ts_tranche ).split( ',' ) if $tranche.strip() ]
            -p ' --TStranche "${tranche}" ' \
        #end for
        #for $ignore_filter in $analysis_param_type.ignore_filters:
            #set $ignore_filter_name = str( $ignore_filter.ignore_filter_type.ignore_filter_type_selector )
            #if $ignore_filter_name == "custom":
              #set $ignore_filter_name = str( $ignore_filter.ignore_filter_type.filter_name )
            #end if
            -p ' --ignore_filter "${ignore_filter_name}" ' \
        #end for
        -p ' --ts_filter_level "${analysis_param_type.ts_filter_level}" ' \
    #end if
&gt;\$out 2&gt;\$err

STATUS=\$?

if [[ "\$STATUS" != "0" ]]
   then echo "Variant Recallibrator finished with error. All temproary files stores \$DEST . Exit status \$STATUS";
   exit \$STATUS
fi


 mv "${output_rscript}.pdf" "${output_tranches_pdf}"

  </configfile>
  </configfiles>

  <tests>
      <!-- ADD TESTS -->
  </tests>
  <help>
**What it does**

Takes variant calls as .vcf files, learns a Gaussian mixture model over the variant annotations and evaluates the variant -- assigning an informative lod score

For more information on using the VariantRecalibrator module, see this `tool specific page &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Variant_quality_score_recalibration&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Best_Practice_Variant_Detection_with_the_GATK_v3&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Frequently_Asked_Questions&gt;`_.

------

**Inputs**

GenomeAnalysisTK: VariantRecalibrator accepts a variant input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Input_files_for_the_GATK&gt;`_ for details on GATK file formats.

-------

**Settings**::


 tranches_file         The output tranches file used by ApplyRecalibration
 use_annotation        The names of the annotations which should used for calculations
 mode                  Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously. (SNP|INDEL|BOTH)
 maxGaussians          The maximum number of Gaussians to try during variational Bayes algorithm
 maxIterations         The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.
 numKMeans             The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.
 stdThreshold          If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.
 qualThreshold         If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.
 shrinkage             The shrinkage parameter in variational Bayes algorithm.
 dirichlet             The dirichlet parameter in variational Bayes algorithm.
 priorCounts           The number of prior counts to use in variational Bayes algorithm.
 percentBadVariants    What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.
 minNumBadVariants     The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad arugment if necessary.
 recal_file            The output recal file used by ApplyRecalibration
 target_titv           The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!
 TStranche             The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent)
 ignore_filter         If specified the optimizer will use variants even if the specified filter name is marked in the input VCF file
 path_to_Rscript       The path to your implementation of Rscript. For Broad users this is maybe /broad/tools/apps/R-2.6.0/bin/Rscript
 rscript_file          The output rscript file generated by the VQSR to aid in visualization of the input data and learned model
 path_to_resources     Path to resources folder holding the Sting R scripts.
 ts_filter_level       The truth sensitivity level at which to start filtering, used here to indicate filtered variants in plots

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </help>
</tool>

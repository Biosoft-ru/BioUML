/* Generated By:JJTree: Do not edit this line. AstFunNode.java */
package ru.biosoft.math.model;

/**
 * Any function or operator.
 *
 * @pending - refine priorities.
 */
public class AstFunNode extends SimpleNode
{
    /////////////////////////////////////////////////////////////////
    // Function and operators priorities
    //
    // pending: refine
    public static final int LOGICAL_PRIORITY    = 1;  // and, or, xor
    public static final int RELATIONAL_PRIORITY = 2 ; // eq, neq, gt, lt, geq, leq
    public static final int PLUS_PRIORITY       = 3 ; // plus, minus
    public static final int TIMES_PRIORITY      = 4 ; // times, divide
    public static final int UNARY_PRIORITY      = 5 ; // not, unary minus
    public static final int POWER_PRIORITY      = 6 ; // power
    public static final int FUNCTION_PRIORITY   = 7 ; // misc: sqrt, sin, cos, ...

    public AstFunNode(int id)
    {
        super(id);
    }

    /////////////////////////////////////////////////////////////////
    // Properties
    //

    private Function function;
    public Function getFunction()
    {
        return function;
    }

    /**
     * Sets the function for a node.
     *
     * It is parser responsibility to check the function validness.
     */
    public void setFunction(Function function)
    {
        this.function = function;
    }

    /**
     * Returns a string containing the function name.
     */
    @Override
    public String toString()
    {
        return "Function \"" + function.getName() + "\"";
    }
    
    @Override
    public AstFunNode cloneAST()
    {
        AstFunNode funNode = new AstFunNode(id);
        funNode.function = function;
        return funNode;
    }

    @Override
    public boolean equals(Object obj)
    {
        if( this == obj )
            return true;
        if( obj == null )
            return false;
        if( getClass() != obj.getClass() )
            return false;
        final AstFunNode other = (AstFunNode)obj;
        if( function == null )
        {
            if( other.function != null )
                return false;
        }
        else if( !function.equals(other.function) )
            return false;
        return true;
    }

    @Override
    public int hashCode()
    {
        final int PRIME = 31;
        int result = 1;
        result = PRIME * result + ( ( function == null ) ? 0 : function.hashCode() );
        return result;
    }
}

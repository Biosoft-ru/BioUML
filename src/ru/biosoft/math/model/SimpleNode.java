/* Generated By:JJTree: Do not edit this line. SimpleNode.java */
package ru.biosoft.math.model;

public abstract class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;

  public SimpleNode(int i) {
    id = i;
  }

  public int getId() {
        return id;
      }
  
  @Override
public void jjtOpen() {
  }

  @Override
public void jjtClose() {
  }

  @Override
public void jjtSetParent(Node n) { parent = n; }
  @Override
public Node jjtGetParent() { return parent; }

  @Override
public void jjtAddChild(Node n, int i)
  {
    if (children == null)
    {
      children = new Node[i + 1];
    }
    else if (i >= children.length)
    {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }

    children[i] = n;
    n.jjtSetParent(this);
  }

  @Override
public Node jjtGetChild(int i) {
    return children[i];
  }

  @Override
public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  @Override
public void jjtReplaceChild(Node oldChild, Node newChild)
  {
      for (int i = 0; i < jjtGetNumChildren(); i++)
      {
          if (jjtGetChild(i) == oldChild)
          {
              oldChild.jjtSetParent(null);
              children[i] = newChild;
              newChild.jjtSetParent(this);
              break;
          }
      }
  }

    /** Stroes dump message in the specified string buffer. */
    public void dump(StringBuffer msg, String prefix)
    {
        msg.append( toString(prefix) );
        msg.append( "\r\n" );
        if( children != null )
        {
            prefix += "  ";
            for(int i = 0; i < children.length; ++i)
            {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null)
                    n.dump(msg, prefix);
            }
        }
    }
}


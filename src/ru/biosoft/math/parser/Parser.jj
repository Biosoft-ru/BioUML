/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/


/***************************************************************
                   OPTIONS
***************************************************************/

options 
{
                 
                             
    STATIC = false;

                        
    DEBUG_PARSER = false;
}


/***************************************************************
                   PARSER BEGIN
***************************************************************/

PARSER_BEGIN(Parser)
package ru.biosoft.math.parser;

import java.io.StringReader;
import java.util.Vector;
import ru.biosoft.math.model.*;

public class Parser extends AbstractParser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/


    /** Default constructor. */
    public Parser()
    {    
        this(new StringReader("0"));
    }

    public int parse(String expression)
    {
        reinit();

        try
        {
            ReInit( new StringReader(expression) );
            astStart = Start();
        }
        catch(Throwable t)
        {
            fatalError(t.toString());
            astStart = new AstStart(JJTSTART);
        }

        astStart.setStatus(status);
        astStart.setMessages(messages);

        return status;
    }

}

PARSER_END(Parser)


/***************************************************************
                   SKIP
***************************************************************/

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
                   TOKENS
***************************************************************/

TOKEN : /* RESERVED WORDS AND LITERALS */
{
   < FUNCTION:  "function"  >
|  < DIFF:      "diff"      >
|  < PIECEWISE: "piecewise" >
|  < XOR:       "xor"       >
}


TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL:
            <DECIMAL_LITERAL>
    >
|
    < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
    < FLOATING_POINT_LITERAL:
            (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
            | "." (["0"-"9"])+ (<EXPONENT>)?
            | (["0"-"9"])+ <EXPONENT>
    >
|
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
    < STRING_LITERAL:
            "\""
            ( (~["\"","\\","\n","\r"])
            | ("\\" ["n","t","b","r","f","\\","'","\""]     )
            )*
            "\""
    >
}



TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ( ("$" <STRING_LITERAL>) | 
                  ( <LETTER> (<LETTER>|<DIGIT>)* ( "." <LETTER> (<LETTER>|<DIGIT>)* )* )
                )>
|
  < #LETTER: ["_", "a"-"z","A"-"Z","$"] >
|
  < #DIGIT: ["0"-"9"] >
}



/* OPERATORS */
TOKEN:
{
        < GT:   ">"  >
|       < LT:   "<"  >
|       < EQ:   "==" >
|       < LE:   "<=" >
|       < GE:   ">=" >
|       < NE:   "!=" >
|       < AND:  "&&" >
|       < OR:   "||" >
|       < PLUS: "+"  >
|       < MINUS:"-"  >
|       < MUL:  "*"  >
|       < DIV:  "/"  >
|       < NOT:  "!"  >
|       < POWER:"^"  >

|       < ASSIGNMENT:  "="  >
}

/***************************************************************
                   GRAMMAR START
***************************************************************/

AstStart Start()        : {/*@bgen(jjtree) Start */
  AstStart jjtn000 = new AstStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (
        FunctionDeclaration()  
        |
        ( 
            DiffEquation() 
            |    
            (
                LOOKAHEAD(2)
                Assignment()
                |
                Expression() 
            )

        )
    )

    (";")? 

    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}


/***************************************************************
                   ASSIGNMENT
***************************************************************/

void Assignment() : {}
{/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Variable()

        <ASSIGNMENT>
        {
            setOperator(jjtn001, tokenImage[ASSIGNMENT]);
        }

        ( Expression() )

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/            
}

/***************************************************************
                   FUNCTION DECLARATION
***************************************************************/

void FunctionDeclaration() :
{
    String identString = "";
    ParserContext parent = context;
    VariableResolver oldResolver = variableResolver;
}
{/*@bgen(jjtree) FunctionDeclaration */
        {
          AstFunctionDeclaration jjtn001 = new AstFunctionDeclaration(JJTFUNCTIONDECLARATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        (
            <FUNCTION>

            // set up the local context
            {
                jjtn001.init(parent);
                context = (ParserContext)jjtn001;
                variableResolver = jjtn001.getVariableResolver();
            }

            identString = Identifier()
            {
                jjtn001.setName(identString);
            }

            "("
                 (
                     ArgumentDeclaration()
                     ( "," ArgumentDeclaration() )*
                 )?
             ")"

            <ASSIGNMENT>

            Expression()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/

            // return to global context
            {
                context = parent;
                context.declareFunction( (AstFunctionDeclaration)jjtn001 );
                variableResolver = oldResolver;
            }

        )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/                     
}

void ArgumentDeclaration() :
{
        String identString = "";
}
{/*@bgen(jjtree) VarNode */
        {
          AstVarNode jjtn001 = new AstVarNode(JJTVARNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        (identString = Identifier()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001, true);
              jjtc001 = false;
            }
/*@egen*/
            {
                jjtn001.setName(identString);
                context.declareVariable(identString, new Double(0));
            }
        )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/         
}


/***************************************************************
                   DIFFERENTIATION
***************************************************************/

void DiffEquation() :  {}
{/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        <DIFF>
        {
            setOperator(jjtn001, "=");

        }

        Diff()

        <ASSIGNMENT>

        ( Expression() )

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/           
}

void Diff() :
{
    int reqArguments = 2;
    String identString = "diff";
}
{/*@bgen(jjtree) FunNode */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        {
            Function function = context.getFunction(identString);

            if( function == null )
            {
                error("Unknown function '" + identString + "'.");
                function = new UndeclaredFunction(identString, Function.FUNCTION_PRIORITY);
            }

            jjtn001.setFunction(function);
            reqArguments = function.getNumberOfParameters();
         }

      "("ArgumentList(reqArguments, identString)")"

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         
}

/***************************************************************
                   PIECEWISE
***************************************************************/

void Piecewise() : {}
{/*@bgen(jjtree) Piecewise */
    {
      AstPiecewise jjtn001 = new AstPiecewise(JJTPIECEWISE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        <PIECEWISE>
        "("
            Piece()  ( ";" PieceOrOtherwise() )*
        ")"
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/          
}

void Piece() :  {}
{/*@bgen(jjtree) Piece */
    {
      AstPiece jjtn001 = new AstPiece(JJTPIECE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Expression() "=>" Expression()
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
}

void PieceOrOtherwise() :  {}
{/*@bgen(jjtree) Piece */
    {
      AstPiece jjtn001 = new AstPiece(JJTPIECE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Expression() ("=>" Expression())?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
        {
            // check that otherwise is last
            Node current  = jjtree.popNode();
            Node previous = jjtree.popNode();

            if( previous.jjtGetNumChildren() == 1 )
            {
                error("Piecewise syntax error - incorrect otherwise_value location." +
                      "\r\nPiecewise syntax: " +
                      "\r\n  piecewise( logical_codition => value (; logical_codition => value)* (; otherwise_value)? )" );
            }

            jjtree.pushNode(previous);
            jjtree.pushNode(current);
        }

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/      
}

/***************************************************************
                   EXPRESSION
***************************************************************/

void Expression() : {}
{
    OrExpression()
}


void OrExpression() :
{
}
{
        XorExpression()
        (/*@bgen(jjtree) #FunNode( 2) */
          {
            AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
          ( <OR> XorExpression()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    setOperator(jjtn001, tokenImage[OR]);
                }
          )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/            
        )*
}


void XorExpression() :
{
}
{
        AndExpression()
        (/*@bgen(jjtree) #FunNode( 2) */
          {
            AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
          ( <XOR> AndExpression()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    setOperator(jjtn001, tokenImage[XOR]);
                }
          )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/            
        )*
}

void AndExpression() :
{
}
{
        EqualExpression()
        (/*@bgen(jjtree) #FunNode( 2) */
          {
            AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
          ( <AND> EqualExpression()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
                {
                    setOperator(jjtn001, tokenImage[AND]);
                }
          )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/            
        )*
}



void EqualExpression() :
{
}
{
        RelationalExpression()
        (/*@bgen(jjtree) #FunNode( 2) */
          {
            AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/
          ( <NE> RelationalExpression()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
            }
/*@egen*/
            {
                setOperator(jjtn001, tokenImage[NE]);
            }
          )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/            
        |/*@bgen(jjtree) #FunNode( 2) */
          {
            AstFunNode jjtn002 = new AstFunNode(JJTFUNNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/
          ( <EQ> RelationalExpression()/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
            }
/*@egen*/
            {
                 setOperator(jjtn002, tokenImage[EQ]);
            }
          )/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/            
        )*
}



void RelationalExpression() :
{
}
{
  AdditiveExpression()
  (/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( <LT> AdditiveExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
          setOperator(jjtn001, tokenImage[LT]);
      }
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/            
        |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn002 = new AstFunNode(JJTFUNNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( <GT> AdditiveExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
      }
/*@egen*/
      {
          setOperator(jjtn002, tokenImage[GT]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/            
    |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn003 = new AstFunNode(JJTFUNNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    ( <LE> AdditiveExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn003,  2);
        jjtc003 = false;
      }
/*@egen*/
      {
          setOperator(jjtn003, tokenImage[LE]);
      }
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
    }
/*@egen*/            
        |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn004 = new AstFunNode(JJTFUNNODE);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/
    ( <GE> AdditiveExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn004,  2);
        jjtc004 = false;
      }
/*@egen*/
      {
          setOperator(jjtn004, tokenImage[GE]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  2);
      }
    }
/*@egen*/            
  )*
}


void AdditiveExpression() :
{
}
{
  MultiplicativeExpression()
  (/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( <PLUS> MultiplicativeExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
          setOperator(jjtn001, tokenImage[PLUS]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/            
    |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn002 = new AstFunNode(JJTFUNNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( <MINUS> MultiplicativeExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
      }
/*@egen*/
      {
          setOperator(jjtn002, tokenImage[MINUS]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/            
  )*
}


void MultiplicativeExpression() :
{
}
{
  UnaryExpression()
  (/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
      PowerExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtc001 = false;
      }
/*@egen*/
      {
        if (true) throw new ParseException(
                "Syntax Error (implicit multiplication not enabled)");

        setOperator(jjtn001, tokenImage[MUL]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
/*@egen*/            
    |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn002 = new AstFunNode(JJTFUNNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( <MUL> UnaryExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtc002 = false;
      }
/*@egen*/
      {
        setOperator(jjtn002, tokenImage[MUL]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
      }
    }
/*@egen*/            
        |/*@bgen(jjtree) #FunNode( 2) */
    {
      AstFunNode jjtn003 = new AstFunNode(JJTFUNNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    ( <DIV> UnaryExpression()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn003,  2);
        jjtc003 = false;
      }
/*@egen*/
      {
        setOperator(jjtn003, tokenImage[DIV]);
      }
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  2);
      }
    }
/*@egen*/            
  )*
}


void UnaryExpression() :
{
}
{
  ( <PLUS> UnaryExpression())
|/*@bgen(jjtree) #FunNode( 1) */
  {
    AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <MINUS> UnaryExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  1);
      jjtc001 = false;
    }
/*@egen*/
    {
          setOperator(jjtn001, "u-"); // tokenImage[MINUS]);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/            
|/*@bgen(jjtree) #FunNode( 1) */
  {
    AstFunNode jjtn002 = new AstFunNode(JJTFUNNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  ( <NOT> UnaryExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002,  1);
      jjtc002 = false;
    }
/*@egen*/
    {
          setOperator(jjtn002, tokenImage[NOT]);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  1);
    }
  }
/*@egen*/            
|
  PowerExpression()
}


void PowerExpression() :
{
}
{
  UnaryExpressionNotPlusMinus()
  [/*@bgen(jjtree) #FunNode( 2) */
  {
    AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <POWER> UnaryExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
    }
/*@egen*/
    {
      setOperator(jjtn001, tokenImage[POWER]);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  2);
    }
  }
/*@egen*/            
  ]
}


void UnaryExpressionNotPlusMinus() :
{
        String identString = "";
        int type;
}
{
        AnyConstant()
|
        ( LOOKAHEAD(2)
                Function()
                |
                Piecewise()
                |
                VariableOrPredefinedConstant()
        )
        |
        ParenthisExpression()
}


void ParenthisExpression() : {}
{
  ( "(" Expression() ")"
    {}
   ) // #Parenthesis
 
}


void VariableOrPredefinedConstant() : {}
{
    ( LOOKAHEAD( {context.containsConstant(getToken(1).image) } )
           PredefinedConstant()
           |
           Variable()
    )
}


void PredefinedConstant() :
{
        String identString = "";
}
{/*@bgen(jjtree) Constant */
        {
          AstConstant jjtn001 = new AstConstant(JJTCONSTANT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        (identString = Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
        {
               jjtn001.setName(identString);
               jjtn001.setValue( context.getConstantValue(identString) );
        }
        )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/          
}


void Variable() :
{
        String identString = "";
}
{/*@bgen(jjtree) VarNode */
        {
          AstVarNode jjtn001 = new AstVarNode(JJTVARNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
        (identString = Identifier()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
          }
/*@egen*/
          {
               jjtn001.setName( processVariable(identString) );
               jjtn001.setTitle( identString );
          }
        )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/         
}


void Function() :
{
    int reqArguments = 0;
    String identString = "";
}
{/*@bgen(jjtree) FunNode */
    {
      AstFunNode jjtn001 = new AstFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    ( identString = Identifier()
        {
            Function function = context.getFunction(identString);

            if( function == null )
            {
                error("Unknown function '" + identString + "'.");
                function = new UndeclaredFunction(identString, Function.FUNCTION_PRIORITY);
            }

            jjtn001.setFunction(function);
            reqArguments = function.getNumberOfParameters();
         }

      "("ArgumentList(reqArguments, identString)")"

    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         
}

void ArgumentList(int reqArguments, String functionName) :
{
    int count = 0;
    String errorStr = "";
}
{
    [
      Expression() { count++; }
        (
            ","
            Expression() { count++; }
        )*
    ]
    {
        if( reqArguments != count && reqArguments != -1 )
        {
            errorStr = "Function \"" + functionName +"\" requires " + reqArguments + " parameter";
            if( reqArguments!=1 )
                errorStr += "s";

            error(errorStr);
        }
    }
}


String Identifier() :
{
  Token t;
}
{
        t=<IDENTIFIER>
        {
            return t.image;
        }
}


void AnyConstant()          :
{/*@bgen(jjtree) Constant */
    AstConstant jjtn000 = new AstConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
    Object value;
}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
        t=<STRING_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            // strip away double quotes at end of string
            String temp = (t.image).substring(1,t.image.length()-1);

            // replace escape characters
            // temp = replaceEscape(temp);

            jjtn000.setValue(temp);
        }
        |
        value = RealConstant()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            jjtn000.setValue(value);
        }
        |
        value = Array()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
            jjtn000.setValue(value);
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Object RealConstant() :
{
  Token t;
  Object value;
}
{
        (t=<INTEGER_LITERAL>
        {
             try
             {
                 value = new Integer(t.image);
             }
             catch (Exception e)
             {
                 value = null;
                 error("Can't parse \"" + t.image + "\"");
             }

             return value;
        }
        |
        t=<FLOATING_POINT_LITERAL>)
        {
             try
             {
                 value = new Double(t.image);
             }
             catch (Exception e)
             {
                 value = null;
                 error("Can't parse \"" + t.image + "\"");
             }

             return value;
        }
}

Vector Array() :
{
    Object value;
    Vector result = new Vector();
}
{
        "["
        value = RealConstant()
        {
             result.addElement(value);
        }
        (
             ","
             value = RealConstant()
             {
                   result.addElement(value);
             }
        )*
        "]"
        {
             return result;
        }
}

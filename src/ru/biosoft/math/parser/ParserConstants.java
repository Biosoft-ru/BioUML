/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package ru.biosoft.math.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FUNCTION = 7;
  /** RegularExpression Id. */
  int DIFF = 8;
  /** RegularExpression Id. */
  int PIECEWISE = 9;
  /** RegularExpression Id. */
  int XOR = 10;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 11;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 12;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 13;
  /** RegularExpression Id. */
  int EXPONENT = 14;
  /** RegularExpression Id. */
  int STRING_LITERAL = 15;
  /** RegularExpression Id. */
  int IDENTIFIER = 16;
  /** RegularExpression Id. */
  int LETTER = 17;
  /** RegularExpression Id. */
  int DIGIT = 18;
  /** RegularExpression Id. */
  int GT = 19;
  /** RegularExpression Id. */
  int LT = 20;
  /** RegularExpression Id. */
  int EQ = 21;
  /** RegularExpression Id. */
  int LE = 22;
  /** RegularExpression Id. */
  int GE = 23;
  /** RegularExpression Id. */
  int NE = 24;
  /** RegularExpression Id. */
  int AND = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MUL = 29;
  /** RegularExpression Id. */
  int DIV = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int POWER = 32;
  /** RegularExpression Id. */
  int ASSIGNMENT = 33;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"function\"",
    "\"diff\"",
    "\"piecewise\"",
    "\"xor\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"!\"",
    "\"^\"",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"=>\"",
    "\"[\"",
    "\"]\"",
  };

}

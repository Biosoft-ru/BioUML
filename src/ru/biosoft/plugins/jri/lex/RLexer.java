/* The following code was generated by JFlex 1.3.2 on 29.08.13 15:16 */

/* RLexer.java is a generated file.  You probably want to
 * edit RLexer.lex to make changes.  Use JFlex to generate it.
 * To generate RLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main RLexer.lex</code><br>
 * You will then have a file called RLexer.java
 */

package ru.biosoft.plugins.jri.lex;

import java.io.IOException;
import com.Ostermiller.Syntax.Lexer.Lexer;
import com.Ostermiller.Syntax.Lexer.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 29.08.13 15:16 from the specification file
 * <tt>file:/C:/projects/java/BioUML/src/ru/biosoft/plugins/jri/lex/RLexer.lex</tt>
 */
public class RLexer implements Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 21,  0, 19, 21,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    19, 50, 29, 30, 58, 38, 51, 28, 39, 40, 53, 31, 46, 32, 18, 54, 
    14, 15, 15, 15, 13, 13, 13, 13, 12, 12, 55, 45, 48, 49, 47, 57, 
    59, 69, 11, 11, 37, 35, 10, 16, 16, 70, 16, 16, 33, 16, 68, 16, 
    16, 16, 73, 74,  9, 25, 16, 16, 34, 16, 16, 43, 20, 44, 22, 17, 
     0,  6, 27, 63, 36,  4,  5, 71, 66, 60, 16, 67,  7, 72, 26, 62, 
    64, 61,  2,  8,  1,  3, 23, 65, 24, 16, 16, 41, 52, 42, 56,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    75,   150,   225,   300,   375,   450,   525,   600,   675, 
      750,   825,   900,   975,  1050,  1125,  1200,  1275,  1350,  1425, 
     1050,  1500,  1575,  1650,  1050,  1050,  1050,  1050,  1725,  1800, 
     1050,  1050,  1875,  1950,  2025,  2100,  2175,  2250,  1050,  1050, 
     2325,  1050,  1050,    75,    75,  2400,  2475,  2550,  2625,  2700, 
     2775,  2850,  2925,  3000,  3075,  3150,  3225,  3300,  3375,  3450, 
     3525,  3600,  3525,  3525,  3675,  3525,  3750,  3525,  3825,  3900, 
     3975,  4050,  4125,  3525,  4200,  4275,  4350,  4425,  4500,  4575, 
     4650,  4725,  1050,  4800,  1050,  4875,  4950,  1050,  1050,  1050, 
     1050,  1050,  5025,  1050,  1050,  1050,  1050,  1050,  5100,   150, 
      150,  5175,  5250,  5325,  5400,  5475,  5550,  5625,  5700,  5775, 
     5850,  5925,  6000,  6075,   150,  6150,  6225,  6300,  6375,  6450, 
     6525,  6600,  3525,  6675,  6750,  6825,    75,    75,  6900,    75, 
       75,   150,  6975,  7050,  7125,  7200,  7275,  1050,  7350,  7425, 
     7500,  7575,  7650,  7725,  7800,  7875,  1050,  7950,  1050,  1050, 
     8025,  8100,  8175,  8250,   450,  8325,  8400,   150,  8475,  8550, 
      150,   450,  8625,   150,   150,  8700,  8775,  8850,  3525,  1050, 
     8925,  9000,   150,  9075,  9150,  9225,  9300,  1050,  9375,  9450, 
     9525,  9600,  9675,   450,  9750,  9825,   150,  9900,  9975, 10050, 
    10125, 10200, 10275,   150,  1050,  1050,  1050,  1050,   450, 10350, 
    10425, 10500, 10575, 10650, 10725, 10800, 10875,   150,   450,   150, 
    10950, 11025, 11100, 11175,   150,   450, 11250,   150, 11325, 11400, 
    11475, 11550, 11625, 11700, 11775, 11850, 11925, 12000, 12075, 12150, 
    12225, 12300,   450, 12375, 12450, 12525, 12600,   150, 12675, 12750, 
      450, 12825, 12900, 12975, 13050, 13125, 13200, 13275, 13350, 13425, 
      150,   150, 13500, 13575,   450
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\3\2\13\1\14\1\13\1\3"+
    "\1\2\1\15\1\16\1\2\1\16\1\17\1\7\2\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\3"+
    "\1\27\1\3\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\3\1\60\1\61\1\62\2\3\1\63"+
    "\1\3\1\64\4\3\6\2\1\0\14\2\1\0\1\2"+
    "\3\0\4\2\2\0\1\2\2\0\5\2\24\0\22\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\3\3\1\65\1\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\1\2\5\3\1\7\1\66\13\3\1\0\1\2"+
    "\2\0\1\67\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\2\3\1\70\2\3\1\7\14\3"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\2\3\1\71\14\3\1\0\22\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\2\5\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\1\72\16\3\1\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\15\3\1\73"+
    "\1\3\1\2\5\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\11\3\1\74\5\3\4\75\1\76\1\77\1\0\1\100"+
    "\2\75\1\77\1\75\4\13\2\75\1\101\1\0\1\75"+
    "\3\0\4\75\2\0\1\75\2\0\1\100\1\75\1\76"+
    "\2\102\24\0\25\75\1\103\1\104\1\0\1\100\2\75"+
    "\1\104\1\75\1\105\1\106\1\107\1\106\2\75\1\110"+
    "\1\0\1\75\3\0\1\111\3\75\2\0\1\75\2\0"+
    "\1\100\1\111\1\103\2\112\24\0\21\75\1\2\5\3"+
    "\1\7\5\3\2\113\1\114\1\113\2\3\1\115\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\17\3\23\0\1\16\1\0\1\16\200\0"+
    "\1\2\3\3\1\116\1\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\1\3\1\117\3\3\1\7\14\3"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\1\3\1\120\15\3\24\121\1\122"+
    "\1\0\6\121\1\123\56\121\24\23\1\124\1\0\7\23"+
    "\1\125\55\23\25\24\1\0\65\24\57\0\1\126\33\0"+
    "\1\2\3\3\1\127\1\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\25\30\1\0\20\30\1\130\44\30\53\0"+
    "\1\131\113\0\1\132\117\0\1\133\71\0\1\134\17\0"+
    "\1\135\1\136\112\0\1\137\112\0\1\140\114\0\1\141"+
    "\113\0\1\142\115\0\1\143\23\0\1\2\4\3\1\144"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\2\3\1\145"+
    "\1\3\2\0\1\2\2\0\5\3\24\0\2\2\17\3"+
    "\1\2\2\3\1\146\2\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\5\3\1\147\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\5\3\1\150\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\5\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\6\3\1\151\10\3\1\2\5\3\1\152\14\3"+
    "\1\0\1\2\2\0\1\7\1\3\1\153\2\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\11\3\1\154\5\3"+
    "\1\2\5\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\2\3\1\155\1\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\1\156\4\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\4\3\1\157\12\3\1\2\5\3\1\7"+
    "\1\3\1\160\12\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\0"+
    "\5\7\1\161\14\7\4\0\5\7\5\0\5\7\26\0"+
    "\17\7\1\2\5\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\2\3\1\162\1\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\17\3\1\2\1\3\1\163\3\3\1\7"+
    "\14\3\1\0\1\2\2\0\1\7\4\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\2\5\3\1\7"+
    "\1\3\1\164\12\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\1\3"+
    "\1\165\2\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\1\2\5\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\1\166\4\3\24\0"+
    "\2\2\17\3\6\75\1\0\14\75\1\0\1\75\3\0"+
    "\4\75\2\0\1\75\2\0\5\75\24\0\27\75\1\0"+
    "\5\75\4\167\3\75\1\0\1\75\3\0\4\75\2\0"+
    "\1\75\2\170\5\75\24\0\25\75\1\76\1\77\1\0"+
    "\3\75\1\77\1\75\4\101\3\75\1\0\1\75\3\0"+
    "\4\75\2\0\1\75\2\0\2\75\1\76\2\102\24\0"+
    "\27\75\1\0\5\75\4\171\3\75\1\0\1\75\3\0"+
    "\4\75\2\0\1\75\2\172\5\75\24\0\25\75\1\76"+
    "\1\77\1\0\3\75\1\77\1\75\4\105\2\75\1\101"+
    "\1\0\1\75\3\0\4\75\2\0\1\75\2\0\2\75"+
    "\1\76\2\102\24\0\25\75\1\76\1\77\1\0\1\173"+
    "\2\75\1\77\1\75\1\105\3\106\2\75\1\101\1\0"+
    "\1\75\3\0\4\75\2\0\1\75\2\0\1\173\1\75"+
    "\1\76\2\102\24\0\25\75\1\103\1\104\1\0\1\173"+
    "\2\75\1\104\1\75\1\105\1\106\1\107\1\106\2\75"+
    "\1\110\1\0\1\75\3\0\4\75\2\0\1\75\2\0"+
    "\1\173\1\75\1\103\2\112\24\0\25\75\1\103\1\104"+
    "\1\0\3\75\1\104\1\75\2\101\1\110\1\101\3\75"+
    "\1\0\1\75\3\0\4\75\2\0\1\75\2\0\2\75"+
    "\1\103\2\112\24\0\25\75\2\174\1\175\3\75\6\174"+
    "\3\75\1\0\1\75\3\0\3\75\1\174\2\0\1\75"+
    "\2\0\2\75\3\174\24\0\5\75\1\174\5\75\1\174"+
    "\5\75\4\2\1\176\1\177\1\0\3\2\1\177\1\2"+
    "\4\113\3\2\1\0\1\2\3\0\4\2\2\0\1\2"+
    "\2\0\2\2\1\176\2\200\24\0\25\2\1\201\1\202"+
    "\1\0\3\2\1\202\1\2\2\113\1\114\1\113\3\2"+
    "\1\0\1\2\3\0\4\2\2\0\1\2\2\0\2\2"+
    "\1\201\2\203\24\0\22\2\5\3\1\7\13\3\1\204"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\17\3\1\2\5\3\1\7\14\3"+
    "\1\0\1\2\2\0\1\7\1\205\3\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\2\3\3\1\206"+
    "\1\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\2\3\1\207\2\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\24\210\1\211\1\0\6\210\1\212\57\210\2\121"+
    "\1\213\1\210\2\121\6\210\1\214\2\215\4\210\1\121"+
    "\1\0\1\210\1\121\1\210\1\216\4\121\55\210\1\217"+
    "\2\23\1\220\1\217\2\23\6\217\3\23\4\217\1\23"+
    "\1\0\1\217\1\23\1\217\1\221\3\23\1\222\55\217"+
    "\57\0\1\223\33\0\1\2\5\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\4\3\1\224\12\3\40\0\1\225\141\0"+
    "\1\226\23\0\1\2\5\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\2\3\1\227\14\3\1\0\6\7\1\230\13\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\0\1\7"+
    "\1\231\20\7\4\0\5\7\5\0\5\7\26\0\17\7"+
    "\1\2\5\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\5\3\24\0\2\2\1\232"+
    "\16\3\1\0\22\7\4\0\5\7\5\0\5\7\26\0"+
    "\10\7\1\233\6\7\1\2\5\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\1\234"+
    "\4\3\24\0\2\2\17\3\1\2\5\3\1\7\12\3"+
    "\1\235\1\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\17\3\1\2\4\3"+
    "\1\236\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\2\3\1\237\2\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\1\2\3\3\1\240\1\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\17\3\1\2\3\3\1\241\1\3\1\7"+
    "\14\3\1\0\1\2\2\0\1\7\4\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\0\6\7\1\242"+
    "\13\7\4\0\5\7\5\0\5\7\26\0\17\7\1\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\3\3\1\243"+
    "\13\3\1\2\1\244\4\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\5\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\2\3\1\245"+
    "\2\3\24\0\2\2\17\3\1\2\5\3\1\7\14\3"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\16\3\1\246\5\75\1\77\1\0"+
    "\3\75\1\77\1\75\4\167\3\75\1\0\1\75\3\0"+
    "\4\75\2\0\1\75\2\0\3\75\2\102\24\0\21\75"+
    "\14\0\4\247\73\0\5\75\1\104\1\0\3\75\1\104"+
    "\1\75\4\171\3\75\1\0\1\75\3\0\4\75\2\0"+
    "\1\75\2\0\3\75\2\112\24\0\21\75\14\0\4\250"+
    "\73\0\4\75\2\174\1\175\1\251\2\75\6\174\3\75"+
    "\1\0\1\75\3\0\3\75\1\174\2\0\1\75\2\0"+
    "\1\251\1\75\3\174\24\0\5\75\1\174\5\75\1\174"+
    "\5\75\4\0\3\175\1\252\2\0\6\175\13\0\1\175"+
    "\5\0\1\252\1\0\3\175\31\0\1\175\5\0\1\175"+
    "\5\0\6\2\1\0\5\2\4\253\3\2\1\0\1\2"+
    "\3\0\4\2\2\0\1\2\2\170\5\2\24\0\27\2"+
    "\1\0\5\2\4\254\3\2\1\0\1\2\3\0\4\2"+
    "\2\0\1\2\2\172\5\2\24\0\22\2\1\255\4\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\17\3\1\2\5\3"+
    "\1\256\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\17\3\1\2\5\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\2\3\1\257\14\3"+
    "\24\210\1\211\1\0\6\210\1\123\103\210\1\0\71\210"+
    "\3\260\3\210\6\260\4\210\1\211\1\0\5\210\1\260"+
    "\1\123\6\210\3\260\31\210\1\260\5\210\1\260\22\210"+
    "\3\121\4\210\1\211\1\0\6\210\1\212\73\210\3\214"+
    "\4\210\1\211\1\0\6\210\1\212\62\210\3\261\3\210"+
    "\6\261\4\210\1\211\1\0\5\210\1\261\1\123\6\210"+
    "\3\261\31\210\1\261\5\210\1\261\5\210\25\217\1\0"+
    "\7\217\1\262\61\217\3\263\3\217\6\263\5\217\1\0"+
    "\5\217\1\263\1\217\1\262\5\217\3\263\31\217\1\263"+
    "\5\217\1\263\11\217\3\264\3\217\6\264\5\217\1\0"+
    "\5\217\1\264\1\217\1\262\5\217\3\264\31\217\1\264"+
    "\5\217\1\264\5\217\24\222\1\265\1\0\7\222\1\125"+
    "\55\222\1\2\5\3\1\266\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\1\2\1\267\4\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\0\6\7\1\270\13\7\4\0\5\7"+
    "\5\0\5\7\26\0\17\7\1\0\7\7\1\271\12\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\2\5\3"+
    "\1\7\1\272\13\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\1\273\4\3\24\0\2\2\17\3"+
    "\1\2\1\3\1\274\3\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\1\275\2\3\1\276\13\3\1\2\1\3\1\277"+
    "\3\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\5\3\1\300\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\1\301\4\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\5\3\24\0\2\2\17\3"+
    "\1\2\5\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\2\3\1\302\2\3\24\0"+
    "\2\2\17\3\5\0\1\303\4\0\1\303\1\0\4\247"+
    "\24\0\2\304\52\0\1\305\4\0\1\305\1\0\4\250"+
    "\24\0\2\306\45\0\5\2\1\177\1\0\3\2\1\177"+
    "\1\2\4\253\3\2\1\0\1\2\3\0\4\2\2\0"+
    "\1\2\2\0\3\2\2\200\24\0\26\2\1\202\1\0"+
    "\3\2\1\202\1\2\4\254\3\2\1\0\1\2\3\0"+
    "\4\2\2\0\1\2\2\0\3\2\2\203\24\0\21\2"+
    "\1\0\22\7\4\0\5\7\5\0\5\7\26\0\7\7"+
    "\1\307\7\7\1\2\1\310\4\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\17\3\4\210\3\311\3\210\6\311\4\210"+
    "\1\211\1\0\5\210\1\311\1\123\6\210\3\311\31\210"+
    "\1\311\5\210\1\311\11\210\3\312\3\210\6\312\4\210"+
    "\1\211\1\0\5\210\1\312\1\123\6\210\3\312\31\210"+
    "\1\312\5\210\1\312\5\210\4\217\3\313\3\217\6\313"+
    "\5\217\1\0\5\217\1\313\1\217\1\262\5\217\3\313"+
    "\31\217\1\313\5\217\1\313\11\217\3\314\3\217\6\314"+
    "\5\217\1\0\5\217\1\314\1\217\1\262\5\217\3\314"+
    "\31\217\1\314\5\217\1\314\5\217\1\0\2\222\1\315"+
    "\1\0\2\222\6\0\3\222\4\0\1\222\2\0\1\222"+
    "\1\0\1\316\4\222\56\0\1\7\1\317\20\7\4\0"+
    "\5\7\5\0\5\7\26\0\17\7\1\2\3\3\1\320"+
    "\1\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\0"+
    "\3\7\1\321\16\7\4\0\5\7\5\0\5\7\26\0"+
    "\17\7\1\2\3\3\1\322\1\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\4\3\2\0\1\2\2\0\5\3"+
    "\24\0\2\2\17\3\1\2\3\3\1\323\1\3\1\7"+
    "\14\3\1\0\1\2\2\0\1\7\4\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\2\5\3\1\7"+
    "\14\3\1\0\1\2\2\0\1\7\2\3\1\324\1\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\17\3\1\2"+
    "\5\3\1\7\14\3\1\0\1\2\2\0\1\7\4\3"+
    "\2\0\1\2\2\0\5\3\24\0\2\2\2\3\1\325"+
    "\3\3\1\326\10\3\1\2\5\3\1\7\14\3\1\0"+
    "\1\2\2\0\1\7\2\3\1\327\1\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\0\1\330\21\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\2\5\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\1\331\16\3\1\2"+
    "\3\3\1\332\1\3\1\7\14\3\1\0\1\2\2\0"+
    "\1\7\4\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\4\210\3\333\3\210\6\333\4\210\1\211\1\0"+
    "\5\210\1\333\1\123\6\210\3\333\31\210\1\333\5\210"+
    "\1\333\11\210\3\334\3\210\6\334\4\210\1\211\1\0"+
    "\5\210\1\334\1\123\6\210\3\334\31\210\1\334\5\210"+
    "\1\334\5\210\4\217\3\335\3\217\6\335\5\217\1\0"+
    "\5\217\1\335\1\217\1\262\5\217\3\335\31\217\1\335"+
    "\5\217\1\335\11\217\3\336\3\217\6\336\5\217\1\0"+
    "\5\217\1\336\1\217\1\262\5\217\3\336\31\217\1\336"+
    "\5\217\1\336\5\217\4\0\3\337\3\0\6\337\13\0"+
    "\1\337\7\0\3\337\31\0\1\337\5\0\1\337\11\0"+
    "\3\340\3\0\6\340\13\0\1\340\7\0\3\340\31\0"+
    "\1\340\5\0\1\340\6\0\7\7\1\341\12\7\4\0"+
    "\5\7\5\0\5\7\26\0\17\7\1\2\5\3\1\342"+
    "\14\3\1\0\1\2\2\0\1\7\4\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\2\1\343\4\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\17\3\1\2\5\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\14\3\1\344\2\3"+
    "\1\2\5\3\1\345\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\5\3\24\0\2\2\17\3"+
    "\1\2\5\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\5\3\24\0\2\2\2\3"+
    "\1\346\14\3\4\210\3\121\3\210\6\121\4\210\1\211"+
    "\1\0\5\210\1\121\1\123\6\210\3\121\31\210\1\121"+
    "\5\210\1\121\11\210\3\213\3\210\6\213\4\210\1\211"+
    "\1\0\5\210\1\213\1\123\6\210\3\213\31\210\1\213"+
    "\5\210\1\213\5\210\4\217\3\23\3\217\6\23\5\217"+
    "\1\0\5\217\1\23\1\217\1\262\5\217\3\23\31\217"+
    "\1\23\5\217\1\23\11\217\3\220\3\217\6\220\5\217"+
    "\1\0\5\217\1\220\1\217\1\262\5\217\3\220\31\217"+
    "\1\220\5\217\1\220\5\217\4\0\3\347\3\0\6\347"+
    "\13\0\1\347\7\0\3\347\31\0\1\347\5\0\1\347"+
    "\11\0\3\350\3\0\6\350\13\0\1\350\7\0\3\350"+
    "\31\0\1\350\5\0\1\350\6\0\3\7\1\351\16\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\0\6\7"+
    "\1\352\13\7\4\0\5\7\5\0\5\7\26\0\17\7"+
    "\1\2\3\3\1\353\1\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\5\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\4\3\1\354\12\3\1\0\1\7\1\355\20\7"+
    "\4\0\5\7\5\0\5\7\26\0\17\7\1\2\5\3"+
    "\1\7\14\3\1\0\1\2\2\0\1\7\2\3\1\356"+
    "\1\3\2\0\1\2\2\0\5\3\24\0\2\2\17\3"+
    "\4\0\3\357\3\0\6\357\13\0\1\357\7\0\3\357"+
    "\31\0\1\357\5\0\1\357\11\0\3\360\3\0\6\360"+
    "\13\0\1\360\7\0\3\360\31\0\1\360\5\0\1\360"+
    "\6\0\20\7\1\361\1\7\4\0\5\7\5\0\5\7"+
    "\26\0\17\7\1\2\5\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\13\3\1\362\3\3\1\2\5\3\1\7\1\363"+
    "\13\3\1\0\1\2\2\0\1\7\4\3\2\0\1\2"+
    "\2\0\5\3\24\0\2\2\17\3\1\0\5\7\1\364"+
    "\14\7\4\0\5\7\5\0\5\7\26\0\17\7\4\0"+
    "\3\222\3\0\6\222\13\0\1\222\7\0\3\222\31\0"+
    "\1\222\5\0\1\222\11\0\3\315\3\0\6\315\13\0"+
    "\1\315\7\0\3\315\31\0\1\315\5\0\1\315\5\0"+
    "\1\2\3\3\1\365\1\3\1\7\14\3\1\0\1\2"+
    "\2\0\1\7\4\3\2\0\1\2\2\0\5\3\24\0"+
    "\2\2\17\3\1\2\3\3\1\366\1\3\1\7\14\3"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\17\3\1\0\22\7\4\0\5\7"+
    "\5\0\5\7\26\0\3\7\1\367\13\7\1\2\1\3"+
    "\1\370\3\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\4\3\2\0\1\2\2\0\5\3\24\0\2\2\17\3"+
    "\1\2\5\3\1\7\14\3\1\0\1\2\2\0\1\7"+
    "\1\371\3\3\2\0\1\2\2\0\5\3\24\0\2\2"+
    "\17\3\1\0\1\372\21\7\4\0\5\7\5\0\5\7"+
    "\26\0\17\7\1\2\5\3\1\7\12\3\1\373\1\3"+
    "\1\0\1\2\2\0\1\7\4\3\2\0\1\2\2\0"+
    "\5\3\24\0\2\2\17\3\1\2\5\3\1\7\12\3"+
    "\1\374\1\3\1\0\1\2\2\0\1\7\4\3\2\0"+
    "\1\2\2\0\5\3\24\0\2\2\17\3\1\0\3\7"+
    "\1\375\16\7\4\0\5\7\5\0\5\7\26\0\17\7"+
    "\1\0\1\7\1\376\20\7\4\0\5\7\5\0\5\7"+
    "\26\0\17\7\1\0\20\7\1\377\1\7\4\0\5\7"+
    "\5\0\5\7\26\0\17\7";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  9,  1,  1,  0,  9,  9,  9,  9,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  9,  9,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  9,  1,  9,  1,  1,  9,  9,  9,  9,  9,  0,  9,  9,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    int lastToken;

    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }        
    
    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
     * All internal variables are reset, the old input stream  cannot be reused
     * (content of the internal buffer is discarded and lost).
     * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    @Override
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
        this.yychar = yychar;
        this.yycolumn = yycolumn;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[13650];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  @Override
public Token getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_r = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 24: 
          {  
    lastToken = RToken.SEPARATOR_LPAREN;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
     }
        case 256: break;
        case 193: 
          {  
    lastToken = RToken.LITERAL_BOOLEAN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 257: break;
        case 177: 
          {  
    lastToken = RToken.ERROR_MALFORMED_STRING;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 258: break;
        case 164: 
          {  
    lastToken = RToken.LITERAL_BOOLEAN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 259: break;
        case 63: 
          {  
    try {
        if (lastToken == RToken.OPERATOR_SUBTRACT){
            Long.decode('-' + yytext().substring(0,yytext().length()-1));
        } else {
            Long.decode(yytext().substring(0,yytext().length()-1));
        }
        lastToken = RToken.LITERAL_LONG_DECIMAL;
    } catch (NumberFormatException e){  
        lastToken = RToken.ERROR_LONG_DECIMIAL_SIZE;
    }
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 260: break;
        case 60: 
        case 61: 
        case 66: 
        case 68: 
        case 72: 
          {  
    lastToken = RToken.ERROR_FLOAT;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 261: break;
        case 18: 
        case 145: 
          {  
    /* most of these errors have to be caught down near the end of the file.
     * This way, previous expressions of the same length have precedence.
     * This is really useful for catching anything bad by just allowing it 
     * to slip through the cracks. 
     */ 
    lastToken = RToken.ERROR_UNCLOSED_STRING;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 262: break;
        case 17: 
        case 135: 
        case 138: 
        case 141: 
        case 175: 
        case 176: 
        case 200: 
        case 201: 
        case 218: 
        case 219: 
          {  
    lastToken = RToken.ERROR_MALFORMED_UNCLOSED_CHARACTER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 263: break;
        case 13: 
          {  
    lastToken = RToken.WHITE_SPACE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 264: break;
        case 8: 
        case 9: 
          {  
    lastToken = RToken.LITERAL_BOOLEAN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+1, nextState));
    return (t);
 }
        case 265: break;
        case 2: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 15: 
        case 16: 
        case 22: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 86: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 115: 
        case 116: 
        case 117: 
        case 132: 
        case 133: 
        case 134: 
        case 147: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 155: 
        case 156: 
        case 158: 
        case 159: 
        case 162: 
        case 165: 
        case 173: 
        case 174: 
        case 181: 
        case 182: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 199: 
        case 206: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 216: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 252: 
        case 253: 
          {  
    lastToken = RToken.IDENTIFIER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 266: break;
        case 1: 
        case 12: 
        case 125: 
        case 128: 
          {  
    lastToken = RToken.ERROR_IDENTIFIER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 267: break;
        case 19: 
          {  
    lastToken = RToken.COMMENT_HASH;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 268: break;
        case 80: 
        case 139: 
        case 140: 
          {  
    lastToken = RToken.ERROR_UNCLOSED_CHARACTER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 269: break;
        case 82: 
          {  
    lastToken = RToken.ERROR_MALFORMED_CHARACTER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 270: break;
        case 83: 
        case 142: 
        case 143: 
        case 144: 
        case 178: 
        case 179: 
        case 202: 
        case 203: 
        case 220: 
        case 221: 
          {  
    lastToken = RToken.ERROR_MALFORMED_UNCLOSED_STRING;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 271: break;
        case 84: 
          {  
    lastToken = RToken.LITERAL_STRING;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 272: break;
        case 87: 
          {  
    lastToken = RToken.OPERATOR_SPECIAL;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 273: break;
        case 137: 
          {  
    lastToken = RToken.LITERAL_CHARACTER;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 274: break;
        case 254: 
          { 
    lastToken = RToken.ATOM_NA_character_;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+13, nextState));
    return (t);
 }
        case 275: break;
        case 251: 
          { 
    lastToken = RToken.ATOM_NA_complex_;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+11, nextState));
    return (t);
 }
        case 276: break;
        case 250: 
          { 
    lastToken = RToken.ATOM_NA_integer_;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+11, nextState));
    return (t);
 }
        case 277: break;
        case 240: 
          { 
    lastToken = RToken.ATOM_NA_real_;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+8, nextState));
    return (t);
 }
        case 278: break;
        case 237: 
          { 
    lastToken = RToken.RESERVED_WORD_FUNCTION;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+8, nextState));
    return (t);
 }
        case 279: break;
        case 232: 
          { 
    lastToken = RToken.RESERVED_WORD_DEPARSE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+7, nextState));
    return (t);
 }
        case 280: break;
        case 217: 
          { 
    lastToken = RToken.RESERVED_WORD_BQUOTE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 281: break;
        case 215: 
          { 
    lastToken = RToken.RESERVED_WORD_REPEAT;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 282: break;
        case 214: 
          { 
    lastToken = RToken.RESERVED_WORD_RETURN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+6, nextState));
    return (t);
 }
        case 283: break;
        case 209: 
          { 
    lastToken = RToken.RESERVED_WORD_WHILE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 284: break;
        case 208: 
          { 
    lastToken = RToken.RESERVED_WORD_PARSE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 285: break;
        case 207: 
          { 
    lastToken = RToken.RESERVED_WORD_QUOTE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 286: break;
        case 198: 
          { 
    lastToken = RToken.RESERVED_WORD_BREAK;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+5, nextState));
    return (t);
 }
        case 287: break;
        case 186: 
          { 
    lastToken = RToken.ATOM_NULL;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 288: break;
        case 183: 
          { 
    lastToken = RToken.RESERVED_WORD_CALL;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 289: break;
        case 172: 
          { 
    lastToken = RToken.RESERVED_WORD_NEXT;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 290: break;
        case 168: 
        case 169: 
          { 
    /* A Hex long cannot be too big.  After removing 
     * initial zeros, It can have 17 digits, the last of which is
     * the L or l
     */
    lastToken = RToken.LITERAL_LONG_HEXIDECIMAL;
    int i;
    int length =yytext().length();
    for (i=2 ; i<length-17; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = RToken.ERROR_LONG_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 17){
        lastToken = RToken.ERROR_LONG_HEXIDECIMAL_SIZE;
    }
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 291: break;
        case 62: 
        case 126: 
        case 194: 
          { 
    /* Sun s java has a few bugs here.  Their MAX_FLOAT and MIN_FLOAT do not
     * quite match the spec.  Its not far off, so we will deal.  If they fix
     * then we are fixed.  So all good.
     */ 
    Float f;
    try {
        f = Float.valueOf(yytext());
        if ( f.isInfinite() || f.compareTo(Float.valueOf(0f)) == 0 )
        {
            lastToken = RToken.ERROR_FLOAT_SIZE;
        } else {
            lastToken = RToken.LITERAL_FLOATING_POINT;
        }
    } catch (NumberFormatException e){
        lastToken = RToken.ERROR_FLOAT_SIZE;
    }
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 292: break;
        case 44: 
          { 
    lastToken = RToken.OPERATOR_SLOT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 293: break;
        case 43: 
          { 
    lastToken = RToken.OPERATOR_COMPONENT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 294: break;
        case 42: 
          { 
    lastToken = RToken.OPERATOR_HELP;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 295: break;
        case 41: 
          { 
    lastToken = RToken.OPERATOR_TILDE;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 296: break;
        case 40: 
          { 
    lastToken = RToken.OPERATOR_SEQUENCE;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 297: break;
        case 39: 
          { 
    lastToken = RToken.OPERATOR_DIVIDE;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 298: break;
        case 38: 
          { 
    lastToken = RToken.OPERATOR_MULTIPLY;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 299: break;
        case 37: 
          { 
    lastToken = RToken.OPERATOR_BITWISE_OR;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 300: break;
        case 36: 
          { 
    lastToken = RToken.OPERATOR_BITWISE_AND;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 301: break;
        case 35: 
          { 
    lastToken = RToken.OPERATOR_LOGICAL_NOT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 302: break;
        case 34: 
          { 
    lastToken = RToken.OPERATOR_ASSIGN;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 303: break;
        case 33: 
          { 
    lastToken = RToken.OPERATOR_LESS_THAN;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 304: break;
        case 32: 
          { 
    lastToken = RToken.OPERATOR_GREATER_THAN;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 305: break;
        case 31: 
          { 
    lastToken = RToken.SEPARATOR_COMMA;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 306: break;
        case 30: 
          { 
    lastToken = RToken.SEPARATOR_SEMICOLON;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 307: break;
        case 14: 
          { 
    lastToken = RToken.OPERATOR_EXPONENT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 308: break;
        case 10: 
        case 11: 
          { 
    /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Java has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */
    try {
        /* bigger negatives are allowed than positives.  Thus
         * we have to be careful to make sure a neg sign is preserved
         */
        if (lastToken == RToken.OPERATOR_SUBTRACT){
            Integer.decode('-' + yytext());
        } else {
            Integer.decode(yytext());
        }
        lastToken = RToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = RToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 309: break;
        case 20: 
          { 
    lastToken = RToken.OPERATOR_ADD;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 310: break;
        case 21: 
          { 
    lastToken = RToken.OPERATOR_SUBTRACT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 311: break;
        case 25: 
          { 
    lastToken = RToken.SEPARATOR_RPAREN;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 312: break;
        case 26: 
          { 
    lastToken = RToken.SEPARATOR_LBRACE;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 313: break;
        case 27: 
          { 
    lastToken = RToken.SEPARATOR_RBRACE;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 314: break;
        case 28: 
          { 
    lastToken = RToken.SEPARATOR_LBRACKET;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 315: break;
        case 29: 
          { 
    lastToken = RToken.SEPARATOR_RBRACKET;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+1, nextState));
    return (t);
 }
        case 316: break;
        case 64: 
        case 65: 
        case 74: 
        case 118: 
        case 127: 
        case 166: 
        case 170: 
        case 195: 
          { 
    Double d;
    try {
        d = Double.valueOf(yytext());
        if (d.isInfinite() || d.compareTo(Double.valueOf(0d)) == 0){
            lastToken = RToken.ERROR_DOUBLE_SIZE;
        } else {
            lastToken = RToken.LITERAL_DOUBLE;
        }
    } catch (NumberFormatException e){
        lastToken = RToken.ERROR_DOUBLE_SIZE;
    } 
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 317: break;
        case 67: 
        case 129: 
        case 196: 
          { 
    /* catch the case of a zero in parsing, so that we do not incorrectly
     * give an error that a number was rounded to zero
     */
    lastToken = RToken.LITERAL_FLOATING_POINT;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 318: break;
        case 69: 
        case 70: 
          { 
    /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 11 digits, the first
     * of which must be 3 or less.
     */
    lastToken = RToken.LITERAL_INTEGER_OCTAL;
    int i;
    int length =yytext().length();
    for (i=1 ; i<length-11; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = RToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    if (length - i > 11){
        lastToken = RToken.ERROR_INTEGER_OCTAL_SIZE;
    } else if (length - i == 11){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (yytext().charAt(i) != '0' && yytext().charAt(i) != '1' && 
        yytext().charAt(i) != '2' && yytext().charAt(i) != '3'){
            lastToken = RToken.ERROR_INTEGER_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK   
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 319: break;
        case 71: 
        case 73: 
        case 75: 
        case 120: 
        case 130: 
        case 167: 
        case 171: 
        case 197: 
          { 
    lastToken = RToken.LITERAL_DOUBLE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 320: break;
        case 85: 
          { 
    lastToken = RToken.OPERATOR_ASSIGN_RARROW;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 321: break;
        case 88: 
          { 
    lastToken = RToken.SEPARATOR_LDBRACKET;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 322: break;
        case 89: 
          { 
    lastToken = RToken.SEPARATOR_RDBRACKET;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 323: break;
        case 90: 
          { 
    lastToken = RToken.OPERATOR_GREATER_THAN_OR_EQUAL;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 324: break;
        case 91: 
          { 
    lastToken = RToken.OPERATOR_ASSIGN_ARROW;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 325: break;
        case 93: 
          { 
    lastToken = RToken.OPERATOR_LESS_THAN_OR_EQUAL;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 326: break;
        case 94: 
          { 
    lastToken = RToken.OPERATOR_EQUAL;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 327: break;
        case 95: 
          { 
    lastToken = RToken.OPERATOR_NOT_EQUAL;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 328: break;
        case 96: 
          { 
    lastToken = RToken.OPERATOR_LOGICAL_AND;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 329: break;
        case 97: 
          { 
    lastToken = RToken.OPERATOR_LOGICAL_OR;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 330: break;
        case 98: 
          { 
    lastToken = RToken.OPERATOR_DCOLON;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+2, nextState));
    return (t);
 }
        case 331: break;
        case 99: 
          { 
    lastToken = RToken.RESERVED_WORD_IF;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 332: break;
        case 100: 
          { 
    lastToken = RToken.RESERVED_WORD_IN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 333: break;
        case 107: 
          { 
    lastToken = RToken.ATOM_NA;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+2, nextState));
    return (t);
 }
        case 334: break;
        case 114: 
          { 
    lastToken = RToken.RESERVED_WORD_FOR;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 335: break;
        case 122: 
          { 
    /* An Octal number cannot be too big.  After removing 
     * initial zeros, It can have 23 digits, the first
     * of which must be 1 or less.  The last will be the L or l
     * at the end.
     */
    lastToken = RToken.LITERAL_LONG_OCTAL;
    int i;
    int length =yytext().length();
    for (i=1 ; i<length-23; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = RToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    if (length - i > 23){
        lastToken = RToken.ERROR_LONG_OCTAL_SIZE;
    } else if (length - i == 23){
        // if the rest of the number is as big as possible
        // the first digit can only be 3 or less
        if (yytext().charAt(i) != '0' && yytext().charAt(i) != '1'){
            lastToken = RToken.ERROR_LONG_OCTAL_SIZE;
        }
    }
    // Otherwise, it should be OK   
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 336: break;
        case 123: 
        case 124: 
          { 
    /* A Hex number cannot be too big.  After removing 
     * initial zeros, It can have 8 digits
     */
    lastToken = RToken.LITERAL_INTEGER_HEXIDECIMAL;
    int i;
    int length =yytext().length();
    for (i=2 ; i<length-8; i++){
        //check for initial zeros
        if (yytext().charAt(i) != '0'){ 
            lastToken = RToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
        }
    }
    if (length - i > 8){
        lastToken = RToken.ERROR_INTEGER_HEXIDECIMAL_SIZE;
    }
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar + yytext().length(), nextState));
    return (t);
 }
        case 337: break;
        case 131: 
          { 
    lastToken = RToken.SEPARATOR_DOT_DOT_DOT;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 338: break;
        case 146: 
          { 
    lastToken = RToken.OPERATOR_ASSIGN_RDARROW;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 339: break;
        case 148: 
          { 
    lastToken = RToken.OPERATOR_ASSIGN_DARROW;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 340: break;
        case 149: 
          { 
    lastToken = RToken.OPERATOR_TCOLON;
    RToken t = (new RToken(lastToken,yytext(),yyline,yychar,yychar+3, nextState));
    return (t);
 }
        case 341: break;
        case 154: 
          { 
    lastToken = RToken.ATOM_NaN;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 342: break;
        case 157: 
          { 
    lastToken = RToken.ATOM_Inf;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+3, nextState));
    return (t);
 }
        case 343: break;
        case 160: 
          { 
    lastToken = RToken.RESERVED_WORD_ELSE;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 344: break;
        case 161: 
          { 
    lastToken = RToken.RESERVED_WORD_EVAL;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 345: break;
        case 163: 
          { 
    lastToken = RToken.RESERVED_WORD_LIST;
    RToken t = (new RToken(lastToken, yytext(), yyline, yychar, yychar+4, nextState));
    return (t);
 }
        case 346: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
